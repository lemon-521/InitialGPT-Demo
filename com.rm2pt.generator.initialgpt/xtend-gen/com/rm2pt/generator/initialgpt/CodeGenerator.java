/**
 * RM2PT Generator Runtime
 * generated by RM2PT v1.3.0
 */
package com.rm2pt.generator.initialgpt;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import net.mydreamy.requirementmodel.rEMODEL.AtomicExpression;
import net.mydreamy.requirementmodel.rEMODEL.Attribute;
import net.mydreamy.requirementmodel.rEMODEL.Contract;
import net.mydreamy.requirementmodel.rEMODEL.Entity;
import net.mydreamy.requirementmodel.rEMODEL.EntityType;
import net.mydreamy.requirementmodel.rEMODEL.EnumEntity;
import net.mydreamy.requirementmodel.rEMODEL.EnumItem;
import net.mydreamy.requirementmodel.rEMODEL.IteratorExpCS;
import net.mydreamy.requirementmodel.rEMODEL.LeftSubAtomicExpression;
import net.mydreamy.requirementmodel.rEMODEL.LogicFormulaExpCS;
import net.mydreamy.requirementmodel.rEMODEL.OCLExpressionCS;
import net.mydreamy.requirementmodel.rEMODEL.Parameter;
import net.mydreamy.requirementmodel.rEMODEL.PrimitiveTypeCS;
import net.mydreamy.requirementmodel.rEMODEL.PropertyCallExpCS;
import net.mydreamy.requirementmodel.rEMODEL.RightSubAtomicExpression;
import net.mydreamy.requirementmodel.rEMODEL.TypeCS;
import net.mydreamy.requirementmodel.rEMODEL.VariableExpCS;
import org.eclipse.core.resources.IFile;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

@SuppressWarnings("all")
public class CodeGenerator extends AbstractGenerator {
  private EObject root;
  
  private CharSequence _generate;
  
  private EList<Attribute> lattribute;
  
  private Iterable<Entity> sEntity;
  
  private Iterable<Entity> ssEntity;
  
  private Iterable<Contract> sContract;
  
  private Iterable<Entity> sssEntity;
  
  private Iterable<Contract> sssContract;
  
  private Iterable<Entity> sssssEntity;
  
  private Iterable<Contract> sssssContract;
  
  private String s;
  
  private IFile file;
  
  private Iterable<Entity> sEnumEntity;
  
  public String doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final String projectName) {
    Iterable<Entity> _filter = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    for (final Entity e : _filter) {
      Iterable<Entity> _filter_1 = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
      for (final Entity e1 : _filter_1) {
        {
          this.root = resource.getContents().get(0);
          String _name = e1.getName();
          String _plus = ((("../../" + projectName) + "Prototype/src-gen/entities/") + _name);
          String _plus_1 = (_plus + "JsonUtils.java");
          fsa.generateFile(_plus_1, this.compileJsonUtils(e1));
        }
      }
    }
    this.root = resource.getContents().get(0);
    this.sEntity = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    this.sContract = Iterables.<Contract>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Contract.class);
    return this.setloadfile(this.sEntity, this.sContract).toString();
  }
  
  public CharSequence compileButton(final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("+ \"");
    String _name = entity.getName();
    _builder.append(_name, "    \t\t\t");
    _builder.append(": (\"");
    _builder.newLineIfNotEmpty();
    {
      EList<Attribute> _attributes = entity.getAttributes();
      for(final Attribute attribute : _attributes) {
        {
          if ((((((!Objects.equal(this.compileType(attribute.getType()), "int")) && (!Objects.equal(this.compileType(attribute.getType()), "boolean"))) && (!Objects.equal(this.compileType(attribute.getType()), "float"))) && (!Objects.equal(this.compileType(attribute.getType()), "LocalDate"))) && (!Objects.equal(this.compileType(attribute.getType()), "String")))) {
            _builder.append("    \t\t   \t");
            _builder.append("+ \"");
            String _name_1 = attribute.getName();
            _builder.append(_name_1, "    \t\t   \t");
            _builder.append("(");
            {
              EList<EnumItem> _element = this.getElement(attribute.getType());
              for(final EnumItem element : _element) {
                _builder.append(" ");
                String _name_2 = element.getName();
                _builder.append(_name_2, "    \t\t   \t");
                _builder.append(", ");
              }
            }
            _builder.append(")\"");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("+ \"");
            String _name_3 = attribute.getName();
            _builder.append(_name_3);
            _builder.append("(");
            String _compileType = this.compileType(attribute.getType());
            _builder.append(_compileType);
            _builder.append("), \"");
          }
        }
      }
    }
    _builder.append("+ \");\"");
    _builder.newLineIfNotEmpty();
    _builder.append("            \t");
    _builder.append(";      ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("fun(input2);");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("circle = new Circle();");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("circle.setCenterX(50);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("circle.setCenterY(150);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("circle.setRadius(30);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("circle.setStroke(Color.BLACK);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("circle.setFill(Color.LIGHTGREEN);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("borderpane.getChildren().add(circle);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 创建路径转变，其实坐标为(50, 150)，终点坐标为(350, 150)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("pathTransition = new PathTransition(Duration.millis(5000), new Line(180, 150, 480, 150), circle);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("pathTransition.setCycleCount(Animation.INDEFINITE);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("pathTransition.play();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("primaryStage_Generation_Setting.fireEvent(");
    _builder.newLine();
    _builder.append("        \t\t\t");
    _builder.append("new javafx.stage.WindowEvent(primaryStage_Generation_Setting, javafx.stage.WindowEvent.WINDOW_CLOSE_REQUEST)");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append(");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileEntity(final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package entities;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import services.impl.StandardOPs;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.LinkedList;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.time.LocalDate;");
    _builder.newLine();
    _builder.append("import java.io.Serializable;");
    _builder.newLine();
    _builder.append("import java.lang.reflect.Method;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = entity.getName();
    _builder.append(_name);
    {
      Entity _superEntity = entity.getSuperEntity();
      boolean _tripleNotEquals = (_superEntity != null);
      if (_tripleNotEquals) {
        _builder.append(" extends ");
        String _name_1 = entity.getSuperEntity().getName();
        _builder.append(_name_1);
        _builder.append(" ");
      }
    }
    _builder.append(" implements Serializable {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* all primary attributes */");
    _builder.newLine();
    {
      EList<Attribute> _attributes = entity.getAttributes();
      for(final Attribute attribute : _attributes) {
        _builder.append("\t");
        _builder.append("private ");
        String _compileType = this.compileType(attribute.getType());
        _builder.append(_compileType, "\t");
        _builder.append(" ");
        String _name_2 = attribute.getName();
        _builder.append(_name_2, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileJsonUtils(final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package entities;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.json.JSONObject;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Random;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.ThreadLocalRandom;");
    _builder.newLine();
    _builder.append("import java.time.Instant;");
    _builder.newLine();
    _builder.append("import java.time.LocalDate;");
    _builder.newLine();
    _builder.append("import java.time.ZoneId;");
    _builder.newLine();
    _builder.append("import java.time.format.DateTimeParseException;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import com.google.gson.JsonObject;");
    _builder.newLine();
    _builder.append("import com.google.gson.JsonParser;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.json.JSONArray;");
    _builder.newLine();
    _builder.append("import org.json.JSONException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = entity.getName();
    _builder.append(_name);
    _builder.append("JsonUtils{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static List<");
    String _name_1 = entity.getName();
    _builder.append(_name_1, "\t");
    _builder.append("> getJsonList(String json) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    \t");
    _builder.append("List<HashMap<String, Object>> dataList;");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("List<");
    String _name_2 = entity.getName();
    _builder.append(_name_2, "\t    \t");
    _builder.append("> list");
    String _name_3 = entity.getName();
    _builder.append(_name_3, "\t    \t");
    _builder.append(" = new ArrayList<>();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    \t   ");
    _builder.append("dataList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t    \t   \t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("JSONArray dataArray= new JSONArray(json);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("for (int i = 0; i < dataArray.length(); i++) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("JSONObject sonObject = dataArray.getJSONObject(i);");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Attribute> _attributes = entity.getAttributes();
      for(final Attribute attribute : _attributes) {
        _builder.append("\t   ");
        _builder.append("String ");
        String _name_4 = attribute.getName();
        _builder.append(_name_4, "\t   ");
        _builder.append("Str = String.valueOf(sonObject.get(\"");
        String _name_5 = attribute.getName();
        _builder.append(_name_5, "\t   ");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("HashMap<String, Object> map = new HashMap<>(); ");
    _builder.newLine();
    {
      EList<Attribute> _attributes_1 = entity.getAttributes();
      for(final Attribute attribute_1 : _attributes_1) {
        _builder.append("\t\t");
        _builder.append("map.put(\"");
        String _name_6 = attribute_1.getName();
        _builder.append(_name_6, "\t\t");
        _builder.append("\", ");
        String _name_7 = attribute_1.getName();
        _builder.append(_name_7, "\t\t");
        _builder.append("Str);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("dataList.add(map);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      boolean _isEmpty = entity.getReference().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("\t\t\t\t\t\t    \t      \t        ");
        _builder.newLine();
        _builder.append("JSONArray dataArray");
        String _name_8 = entity.getName();
        _builder.append(_name_8);
        _builder.append(" = new JSONArray(dataList);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("for(int n = 0; n < dataArray");
        String _name_9 = entity.getName();
        _builder.append(_name_9, "\t\t\t\t\t\t");
        _builder.append(".length(); n++ ) ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t\t");
        _builder.append("JSONObject sonObject");
        String _name_10 = entity.getName();
        _builder.append(_name_10, "\t\t\t\t\t\t\t");
        _builder.append(" = dataArray");
        String _name_11 = entity.getName();
        _builder.append(_name_11, "\t\t\t\t\t\t\t");
        _builder.append(".getJSONObject(n);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t\t");
        String _name_12 = entity.getName();
        _builder.append(_name_12, "\t\t\t\t\t\t\t");
        _builder.append(" iii");
        String _name_13 = entity.getName();
        _builder.append(_name_13, "\t\t\t\t\t\t\t");
        _builder.append(" = new ");
        String _name_14 = entity.getName();
        _builder.append(_name_14, "\t\t\t\t\t\t\t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
        {
          EList<Attribute> _attributes_2 = entity.getAttributes();
          for(final Attribute attribute_2 : _attributes_2) {
            {
              String _compileType = this.compileType(attribute_2.getType());
              boolean _equals = Objects.equal(_compileType, "int");
              if (_equals) {
                _builder.append("try {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("iii");
                String _name_15 = entity.getName();
                _builder.append(_name_15, "\t");
                _builder.append(".set");
                String _name_16 = attribute_2.getName();
                _builder.append(_name_16, "\t");
                _builder.append("(Integer.valueOf( String.valueOf(sonObject");
                String _name_17 = entity.getName();
                _builder.append(_name_17, "\t");
                _builder.append(".get(\"");
                String _name_18 = attribute_2.getName();
                _builder.append(_name_18, "\t");
                _builder.append("\")) ));");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t    ");
                _builder.append("} catch (NumberFormatException e) {");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("System.out.println(\"当前输入的字符串超过类型限制，随机生成填入！\");");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("Random rand = new Random();");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("int minDigits = 2; // 最小位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("int maxDigits = 8; // 最大位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("iii");
                String _name_19 = entity.getName();
                _builder.append(_name_19, "\t\t\t\t\t\t        ");
                _builder.append(".set");
                String _name_20 = attribute_2.getName();
                _builder.append(_name_20, "\t\t\t\t\t\t        ");
                _builder.append("(Integer.valueOf(randomNumber ));");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("e.printStackTrace();");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t    ");
                _builder.append("}catch (JSONException e) {");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("System.out.println(\"JSONObject [");
                String _name_21 = attribute_2.getName();
                _builder.append(_name_21, "\t\t\t\t\t\t        ");
                _builder.append("]没找到，出现异常，随机生成填入！\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("Random rand = new Random();");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("int minDigits = 2; // 最小位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("int maxDigits = 8; // 最大位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("iii");
                String _name_22 = entity.getName();
                _builder.append(_name_22, "\t\t\t\t\t\t        ");
                _builder.append(".set");
                String _name_23 = attribute_2.getName();
                _builder.append(_name_23, "\t\t\t\t\t\t        ");
                _builder.append("(Integer.valueOf(randomNumber ));");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("e.printStackTrace();");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t    ");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t    ");
                _builder.append("catch (Exception e) {");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("System.out.println(\"出现未知异常，随机生成填入！\");");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("Random rand = new Random();");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("int minDigits = 2; // 最小位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("int maxDigits = 8; // 最大位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("iii");
                String _name_24 = entity.getName();
                _builder.append(_name_24, "\t\t\t\t\t\t        ");
                _builder.append(".set");
                String _name_25 = attribute_2.getName();
                _builder.append(_name_25, "\t\t\t\t\t\t        ");
                _builder.append("(Integer.valueOf(randomNumber ));");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t        ");
                _builder.append("e.printStackTrace();");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t    ");
                _builder.append("}");
                _builder.newLine();
              } else {
                String _compileType_1 = this.compileType(attribute_2.getType());
                boolean _equals_1 = Objects.equal(_compileType_1, "boolean");
                if (_equals_1) {
                  _builder.append("try {");
                  _builder.newLine();
                  _builder.append("\t\t\t\t\t\t\t\t       ");
                  _builder.append("iii");
                  String _name_26 = entity.getName();
                  _builder.append(_name_26, "\t\t\t\t\t\t\t\t       ");
                  _builder.append(".set");
                  String _name_27 = attribute_2.getName();
                  _builder.append(_name_27, "\t\t\t\t\t\t\t\t       ");
                  _builder.append("(Boolean.parseBoolean(sonObject");
                  String _name_28 = entity.getName();
                  _builder.append(_name_28, "\t\t\t\t\t\t\t\t       ");
                  _builder.append(".get(\"");
                  String _name_29 = attribute_2.getName();
                  _builder.append(_name_29, "\t\t\t\t\t\t\t\t       ");
                  _builder.append("\").toString() ));");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t\t\t\t\t\t    ");
                  _builder.append("} catch (Exception e) {");
                  _builder.newLine();
                  _builder.append("\t\t\t\t\t\t\t\t        ");
                  _builder.append("// handle the exception");
                  _builder.newLine();
                  _builder.append("\t\t\t\t\t\t\t\t        ");
                  _builder.append("System.out.println(\"发生了未知错误，随机生成填入！\");");
                  _builder.newLine();
                  _builder.append("\t\t\t\t\t\t\t\t        ");
                  _builder.append("iii");
                  String _name_30 = entity.getName();
                  _builder.append(_name_30, "\t\t\t\t\t\t\t\t        ");
                  _builder.append(".set");
                  String _name_31 = attribute_2.getName();
                  _builder.append(_name_31, "\t\t\t\t\t\t\t\t        ");
                  _builder.append("(Boolean.parseBoolean(\"false\" ));");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t\t\t\t\t\t        ");
                  _builder.append("e.printStackTrace();");
                  _builder.newLine();
                  _builder.append("\t\t\t\t\t\t\t\t        ");
                  _builder.newLine();
                  _builder.append("\t\t\t\t\t\t\t\t    ");
                  _builder.append("}");
                  _builder.newLine();
                } else {
                  String _compileType_2 = this.compileType(attribute_2.getType());
                  boolean _equals_2 = Objects.equal(_compileType_2, "float");
                  if (_equals_2) {
                    _builder.append("try {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("iii");
                    String _name_32 = entity.getName();
                    _builder.append(_name_32, "\t");
                    _builder.append(".set");
                    String _name_33 = attribute_2.getName();
                    _builder.append(_name_33, "\t");
                    _builder.append("(Float.parseFloat(sonObject");
                    String _name_34 = entity.getName();
                    _builder.append(_name_34, "\t");
                    _builder.append(".get(\"");
                    String _name_35 = attribute_2.getName();
                    _builder.append(_name_35, "\t");
                    _builder.append("\").toString()));");
                    _builder.newLineIfNotEmpty();
                    _builder.append("} catch (ArithmeticException e) {");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("System.out.println(\"yaml不能为0，随机生成填入！\");");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("e.printStackTrace();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("Random rand = new Random();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("float randomFloat = rand.nextFloat();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("iii");
                    String _name_36 = entity.getName();
                    _builder.append(_name_36, "    ");
                    _builder.append(".set");
                    String _name_37 = attribute_2.getName();
                    _builder.append(_name_37, "    ");
                    _builder.append("(randomFloat);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    ");
                    _builder.newLine();
                    _builder.append("} catch (NumberFormatException e) {");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("System.out.println(\"yaml数字格式不正确，随机生成填入！\");");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("e.printStackTrace();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("Random rand = new Random();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("float randomFloat = rand.nextFloat();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("iii");
                    String _name_38 = entity.getName();
                    _builder.append(_name_38, "    ");
                    _builder.append(".set");
                    String _name_39 = attribute_2.getName();
                    _builder.append(_name_39, "    ");
                    _builder.append("(randomFloat);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    ");
                    _builder.newLine();
                    _builder.append("} catch (Exception e) {");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("System.out.println(\"发生了未知异常，随机生成填入！\");");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("e.printStackTrace();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("Random rand = new Random();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("float randomFloat = rand.nextFloat();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("iii");
                    String _name_40 = entity.getName();
                    _builder.append(_name_40, "    ");
                    _builder.append(".set");
                    String _name_41 = attribute_2.getName();
                    _builder.append(_name_41, "    ");
                    _builder.append("(randomFloat);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("}");
                    _builder.newLine();
                  } else {
                    String _compileType_3 = this.compileType(attribute_2.getType());
                    boolean _equals_3 = Objects.equal(_compileType_3, "LocalDate");
                    if (_equals_3) {
                      _builder.append("String inputDate");
                      String _name_42 = attribute_2.getName();
                      _builder.append(_name_42);
                      _builder.append(" = sonObject");
                      String _name_43 = entity.getName();
                      _builder.append(_name_43);
                      _builder.append(".get(\"");
                      String _name_44 = attribute_2.getName();
                      _builder.append(_name_44);
                      _builder.append("\").toString();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t");
                      _builder.append("try {");
                      _builder.newLine();
                      _builder.append("\t\t\t\t\t\t\t    ");
                      _builder.append("Instant instant = Instant.ofEpochMilli(Long.parseLong(inputDate");
                      String _name_45 = attribute_2.getName();
                      _builder.append(_name_45, "\t\t\t\t\t\t\t    ");
                      _builder.append("));");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t    ");
                      _builder.append("LocalDate localDate");
                      String _name_46 = entity.getName();
                      _builder.append(_name_46, "\t\t\t\t\t\t\t    ");
                      _builder.append(" = instant.atZone(ZoneId.systemDefault()).toLocalDate();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t    ");
                      _builder.append("iii");
                      String _name_47 = entity.getName();
                      _builder.append(_name_47, "\t\t\t\t\t\t\t    ");
                      _builder.append(".set");
                      String _name_48 = attribute_2.getName();
                      _builder.append(_name_48, "\t\t\t\t\t\t\t    ");
                      _builder.append("(localDate");
                      String _name_49 = entity.getName();
                      _builder.append(_name_49, "\t\t\t\t\t\t\t    ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t");
                      _builder.append("} catch (DateTimeParseException e) {");
                      _builder.newLine();
                      _builder.append("System.out.println(\"发生了DateTimeParseException异常，随机生成填入！\");");
                      _builder.newLine();
                      _builder.append("\t\t\t\t\t\t\t    ");
                      _builder.append("long startEpochDay");
                      String _name_50 = entity.getName();
                      _builder.append(_name_50, "\t\t\t\t\t\t\t    ");
                      _builder.append(" = LocalDate.of(2020, 1, 1).toEpochDay();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t        ");
                      _builder.append("long endEpochDay");
                      String _name_51 = entity.getName();
                      _builder.append(_name_51, "\t\t\t\t\t\t        ");
                      _builder.append(" = LocalDate.of(2030, 1, 1).toEpochDay();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t        ");
                      _builder.append("long randomDay");
                      String _name_52 = entity.getName();
                      _builder.append(_name_52, "\t\t\t\t\t\t        ");
                      _builder.append(" = ThreadLocalRandom.current().nextLong(startEpochDay");
                      String _name_53 = entity.getName();
                      _builder.append(_name_53, "\t\t\t\t\t\t        ");
                      _builder.append(", endEpochDay");
                      String _name_54 = entity.getName();
                      _builder.append(_name_54, "\t\t\t\t\t\t        ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t    ");
                      _builder.append("LocalDate randomDate");
                      String _name_55 = entity.getName();
                      _builder.append(_name_55, "\t\t\t\t\t\t\t    ");
                      _builder.append(" = LocalDate.ofEpochDay(randomDay");
                      String _name_56 = entity.getName();
                      _builder.append(_name_56, "\t\t\t\t\t\t\t    ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t    ");
                      _builder.append("iii");
                      String _name_57 = entity.getName();
                      _builder.append(_name_57, "\t\t\t\t\t\t\t    ");
                      _builder.append(".set");
                      String _name_58 = attribute_2.getName();
                      _builder.append(_name_58, "\t\t\t\t\t\t\t    ");
                      _builder.append("(randomDate");
                      String _name_59 = entity.getName();
                      _builder.append(_name_59, "\t\t\t\t\t\t\t    ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t    ");
                      _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                      _builder.newLine();
                      _builder.append("\t\t\t\t\t\t\t");
                      _builder.append("}catch (Exception e) {");
                      _builder.newLine();
                      _builder.append("\t\t\t\t\t\t\t    ");
                      _builder.append("System.out.println(\"发生了未知异常，随机生成填入！\");");
                      _builder.newLine();
                      _builder.append("\t\t\t\t\t\t\t    ");
                      _builder.append("long startEpochDay");
                      String _name_60 = entity.getName();
                      _builder.append(_name_60, "\t\t\t\t\t\t\t    ");
                      _builder.append(" = LocalDate.of(2020, 1, 1).toEpochDay();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t        ");
                      _builder.append("long endEpochDay");
                      String _name_61 = entity.getName();
                      _builder.append(_name_61, "\t\t\t\t\t\t        ");
                      _builder.append(" = LocalDate.of(2030, 1, 1).toEpochDay();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t        ");
                      _builder.append("long randomDay");
                      String _name_62 = entity.getName();
                      _builder.append(_name_62, "\t\t\t\t\t\t        ");
                      _builder.append(" = ThreadLocalRandom.current().nextLong(startEpochDay");
                      String _name_63 = entity.getName();
                      _builder.append(_name_63, "\t\t\t\t\t\t        ");
                      _builder.append(", endEpochDay");
                      String _name_64 = entity.getName();
                      _builder.append(_name_64, "\t\t\t\t\t\t        ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.newLine();
                      _builder.append("\t\t\t\t\t\t\t    ");
                      _builder.append("LocalDate randomDate");
                      String _name_65 = entity.getName();
                      _builder.append(_name_65, "\t\t\t\t\t\t\t    ");
                      _builder.append(" = LocalDate.ofEpochDay(randomDay");
                      String _name_66 = entity.getName();
                      _builder.append(_name_66, "\t\t\t\t\t\t\t    ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t    ");
                      _builder.append("iii");
                      String _name_67 = entity.getName();
                      _builder.append(_name_67, "\t\t\t\t\t\t\t    ");
                      _builder.append(".set");
                      String _name_68 = attribute_2.getName();
                      _builder.append(_name_68, "\t\t\t\t\t\t\t    ");
                      _builder.append("(randomDate");
                      String _name_69 = entity.getName();
                      _builder.append(_name_69, "\t\t\t\t\t\t\t    ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t    ");
                      _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                      _builder.newLine();
                      _builder.append("\t\t\t\t\t\t\t    ");
                      _builder.newLine();
                      _builder.append("\t\t\t\t\t\t\t");
                      _builder.append("}");
                      _builder.newLine();
                    } else {
                      String _compileType_4 = this.compileType(attribute_2.getType());
                      boolean _equals_4 = Objects.equal(_compileType_4, "String");
                      if (_equals_4) {
                        _builder.append("iii");
                        String _name_70 = entity.getName();
                        _builder.append(_name_70);
                        _builder.append(".set");
                        String _name_71 = attribute_2.getName();
                        _builder.append(_name_71);
                        _builder.append("(sonObject");
                        String _name_72 = entity.getName();
                        _builder.append(_name_72);
                        _builder.append(".get(\"");
                        String _name_73 = attribute_2.getName();
                        _builder.append(_name_73);
                        _builder.append("\").toString());");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("iii");
                        String _name_74 = entity.getName();
                        _builder.append(_name_74);
                        _builder.append(".set");
                        String _name_75 = attribute_2.getName();
                        _builder.append(_name_75);
                        _builder.append("(");
                        String _compileType_5 = this.compileType(attribute_2.getType());
                        _builder.append(_compileType_5);
                        _builder.append(".");
                        String _name_76 = this.getOneElement(attribute_2.getType()).getName();
                        _builder.append(_name_76);
                        _builder.append(");");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append("\t            \t\t\t");
        _builder.append("list");
        String _name_77 = entity.getName();
        _builder.append(_name_77, "\t            \t\t\t");
        _builder.append(".add(iii");
        String _name_78 = entity.getName();
        _builder.append(_name_78, "\t            \t\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return list");
    String _name_79 = entity.getName();
    _builder.append(_name_79, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} catch (JSONException e) {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence setloadfile(final Iterable<Entity> sEntity, final Iterable<Contract> sContract) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final Contract contract : sContract) {
        {
          if (((contract.getOp().getParameter().isEmpty() != true) && (!Objects.equal(contract.getDef(), null)))) {
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t\t\t \t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("Button ");
            String _name = contract.getOp().getName();
            _builder.append(_name, "\t\t\t");
            _builder.append("_");
            String _compileType = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType, "\t\t\t");
            _builder.append("_input_State=new Button();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            String _name_1 = contract.getOp().getName();
            _builder.append(_name_1, "\t\t\t");
            _builder.append("_");
            String _compileType_1 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_1, "\t\t\t");
            _builder.append("_input_State.setText(\"LoadFromState\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            String _name_2 = contract.getOp().getName();
            _builder.append(_name_2, "\t\t\t");
            _builder.append("_content.add(");
            String _name_3 = contract.getOp().getName();
            _builder.append(_name_3, "\t\t\t");
            _builder.append("_");
            String _compileType_2 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_2, "\t\t\t");
            _builder.append("_input_State);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t ");
            String _name_4 = contract.getOp().getName();
            _builder.append(_name_4, "\t\t\t ");
            _builder.append("_");
            String _compileType_3 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_3, "\t\t\t ");
            _builder.append("_input_State.setMinWidth(Region.USE_PREF_SIZE);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("GridPane.setConstraints(");
            String _name_5 = contract.getOp().getName();
            _builder.append(_name_5, "\t\t\t");
            _builder.append("_");
            String _compileType_4 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_4, "\t\t\t");
            _builder.append("_input_State,2,0);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("Button ");
            String _name_6 = contract.getOp().getName();
            _builder.append(_name_6, "\t\t\t");
            _builder.append("_");
            String _compileType_5 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_5, "\t\t\t");
            _builder.append("_input_reset_t=new Button();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            String _name_7 = contract.getOp().getName();
            _builder.append(_name_7, "\t\t\t");
            _builder.append("_");
            String _compileType_6 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_6, "\t\t\t");
            _builder.append("_input_reset_t.setText(\"InputReset\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            String _name_8 = contract.getOp().getName();
            _builder.append(_name_8, "\t\t\t");
            _builder.append("_content.add(");
            String _name_9 = contract.getOp().getName();
            _builder.append(_name_9, "\t\t\t");
            _builder.append("_");
            String _compileType_7 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_7, "\t\t\t");
            _builder.append("_input_reset_t);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t ");
            String _name_10 = contract.getOp().getName();
            _builder.append(_name_10, "\t\t\t ");
            _builder.append("_");
            String _compileType_8 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_8, "\t\t\t ");
            _builder.append("_input_reset_t.setMinWidth(Region.USE_PREF_SIZE);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("GridPane.setConstraints(");
            String _name_11 = contract.getOp().getName();
            _builder.append(_name_11, "\t\t\t");
            _builder.append("_");
            String _compileType_9 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_9, "\t\t\t");
            _builder.append("_input_reset_t,2,1); ");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.newLine();
            _builder.newLine();
            _builder.append("\t\t");
            String _name_12 = contract.getOp().getName();
            _builder.append(_name_12, "\t\t");
            _builder.append("_");
            String _compileType_10 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_10, "\t\t");
            _builder.append("_input_State.setOnMouseClicked((e) -> {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("List<");
            String _compileType_11 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_11, "\t\t\t");
            _builder.append("> rs = EntityManager.getAllInstancesOf(\"");
            String _compileType_12 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_12, "\t\t\t");
            _builder.append("\") ;");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("int index=(int)(Math.random() * rs.size());");
            _builder.newLine();
            {
              EList<Parameter> _parameter = contract.getOp().getParameter();
              for(final Parameter parameter : _parameter) {
                _builder.newLine();
                {
                  boolean _judgeType = this.judgeType(this.compileType(parameter.getType()));
                  boolean _not = (!_judgeType);
                  if (_not) {
                    _builder.append("\t\t\t\t");
                    String _name_13 = parameter.getName();
                    String _plus = (_name_13 + ".type: ");
                    String _compileType_13 = this.compileType(parameter.getType());
                    String _plus_1 = (_plus + _compileType_13);
                    System.out.println(_plus_1);
                    _builder.newLineIfNotEmpty();
                    {
                      EList<Attribute> _attributess = this.getattributess(this.getentity(contract.getDef().getVariable().get(0).getType()));
                      for(final Attribute attribute : _attributess) {
                        {
                          boolean _equalsIgnoreCase = parameter.getName().equalsIgnoreCase(attribute.getName());
                          if (_equalsIgnoreCase) {
                            _builder.newLine();
                            _builder.append("for(int i = 0; i < ");
                            String _name_14 = contract.getOp().getName();
                            _builder.append(_name_14);
                            _builder.append("_");
                            String _name_15 = parameter.getName();
                            _builder.append(_name_15);
                            _builder.append("_cb.getItems().size(); i++ ) ");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t\t\t\t\t\t\t\t\t");
                            _builder.append("{");
                            _builder.newLine();
                            _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
                            _builder.append("if(rs.get(index).get");
                            String _name_16 = attribute.getName();
                            _builder.append(_name_16, "\t\t\t\t\t\t\t\t\t\t\t");
                            _builder.append("().toString() == ");
                            String _name_17 = contract.getOp().getName();
                            _builder.append(_name_17, "\t\t\t\t\t\t\t\t\t\t\t");
                            _builder.append("_");
                            String _name_18 = parameter.getName();
                            _builder.append(_name_18, "\t\t\t\t\t\t\t\t\t\t\t");
                            _builder.append("_cb.getItems().get(i)) ");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
                            _builder.append("{");
                            _builder.newLine();
                            _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
                            String _name_19 = contract.getOp().getName();
                            _builder.append(_name_19, "\t\t\t\t\t\t\t\t\t\t\t\t");
                            _builder.append("_");
                            String _name_20 = parameter.getName();
                            _builder.append(_name_20, "\t\t\t\t\t\t\t\t\t\t\t\t");
                            _builder.append("_cb.getSelectionModel().select(i);");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
                            _builder.append("}");
                            _builder.newLine();
                            _builder.append("\t\t\t\t\t\t\t\t\t\t");
                            _builder.append("}");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  } else {
                    String _string = this.getSymbol(this.getRightside(this.getAtomicexp(this.getExp(this.getLeftside(this.getAtomicexp(contract.getDef().getVariable().get(0).getInitExpression())))))).toString();
                    String _name_21 = parameter.getName();
                    boolean _equals = Objects.equal(_string, _name_21);
                    if (_equals) {
                      _builder.append("\t\t\t\t");
                      String _name_22 = contract.getOp().getName();
                      _builder.append(_name_22, "\t\t\t\t");
                      _builder.append("_");
                      String _name_23 = parameter.getName();
                      _builder.append(_name_23, "\t\t\t\t");
                      _builder.append("_t.setText(String.valueOf(rs.get(index).get");
                      String _attribute = this.getAttribute(this.getLeftside(this.getAtomicexp(this.getExp(this.getLeftside(this.getAtomicexp(contract.getDef().getVariable().get(0).getInitExpression()))))));
                      _builder.append(_attribute, "\t\t\t\t");
                      _builder.append("()));");
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _name_24 = parameter.getName();
                      boolean _equals_1 = Objects.equal(_name_24, "quantity");
                      if (_equals_1) {
                        _builder.append("\t\t\t\t");
                        _builder.append("int indexStockNumber=(int)(Math.random()*rs.get(index).getStockNumber());");
                        _builder.newLine();
                        _builder.append("\t\t\t\t");
                        String _name_25 = contract.getOp().getName();
                        _builder.append(_name_25, "\t\t\t\t");
                        _builder.append("_");
                        String _name_26 = parameter.getName();
                        _builder.append(_name_26, "\t\t\t\t");
                        _builder.append("_t.setText(String.valueOf(indexStockNumber));");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t\t");
                        _builder.newLine();
                      } else {
                        {
                          EList<Attribute> _attributess_1 = this.getattributess(this.getentity(contract.getDef().getVariable().get(0).getType()));
                          for(final Attribute attribute_1 : _attributess_1) {
                            {
                              boolean _equalsIgnoreCase_1 = parameter.getName().equalsIgnoreCase(attribute_1.getName());
                              if (_equalsIgnoreCase_1) {
                                _builder.append("\t\t\t\t");
                                String _name_27 = contract.getOp().getName();
                                _builder.append(_name_27, "\t\t\t\t");
                                _builder.append("_");
                                String _name_28 = parameter.getName();
                                _builder.append(_name_28, "\t\t\t\t");
                                _builder.append("_t.setText(String.valueOf(rs.get(index).get");
                                String _name_29 = attribute_1.getName();
                                _builder.append(_name_29, "\t\t\t\t");
                                _builder.append("()));");
                                _builder.newLineIfNotEmpty();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("\t\t\t\t\t");
                _builder.newLine();
              }
            }
            _builder.newLine();
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.newLine();
            _builder.append("\t\t\t      ");
            _builder.append("refreshAll();");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append(");");
            _builder.newLine();
            _builder.newLine();
            _builder.newLine();
            _builder.append("\t\t\t\t\t\t \t \t\t");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("//reset input button click");
            _builder.newLine();
            _builder.append("\t \t\t\t\t\t");
            String _name_30 = contract.getOp().getName();
            _builder.append(_name_30, "\t \t\t\t\t\t");
            _builder.append("_");
            String _compileType_14 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_14, "\t \t\t\t\t\t");
            _builder.append("_input_reset_t.setOnMouseClicked((e) -> {");
            _builder.newLineIfNotEmpty();
            {
              EList<Parameter> _parameter_1 = contract.getOp().getParameter();
              for(final Parameter parameter_1 : _parameter_1) {
                {
                  boolean _judgeType_1 = this.judgeType(this.compileType(parameter_1.getType()));
                  boolean _not_1 = (!_judgeType_1);
                  if (_not_1) {
                    _builder.append("\t\t\t\t");
                    String _name_31 = parameter_1.getName();
                    String _plus_2 = (_name_31 + ".type: ");
                    String _compileType_15 = this.compileType(parameter_1.getType());
                    String _plus_3 = (_plus_2 + _compileType_15);
                    System.out.println(_plus_3);
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t");
                    String _name_32 = contract.getOp().getName();
                    _builder.append(_name_32, "\t\t\t\t");
                    _builder.append("_");
                    String _name_33 = parameter_1.getName();
                    _builder.append(_name_33, "\t\t\t\t");
                    _builder.append("_cb.getSelectionModel().select(0);");
                    _builder.newLineIfNotEmpty();
                  } else {
                    String _name_34 = parameter_1.getName();
                    boolean _equals_2 = Objects.equal(_name_34, "quantity");
                    if (_equals_2) {
                      _builder.append("\t\t\t\t");
                      _builder.append("enterItem_quantity_t.setText(\"\");");
                      _builder.newLine();
                    } else {
                      String _string_1 = this.getSymbol(this.getRightside(this.getAtomicexp(this.getExp(this.getLeftside(this.getAtomicexp(contract.getDef().getVariable().get(0).getInitExpression())))))).toString();
                      String _name_35 = parameter_1.getName();
                      boolean _equals_3 = Objects.equal(_string_1, _name_35);
                      if (_equals_3) {
                        _builder.append("\t\t\t\t");
                        String _name_36 = contract.getOp().getName();
                        _builder.append(_name_36, "\t\t\t\t");
                        _builder.append("_");
                        String _name_37 = parameter_1.getName();
                        _builder.append(_name_37, "\t\t\t\t");
                        _builder.append("_t.setText(\"\");");
                        _builder.newLineIfNotEmpty();
                      } else {
                        {
                          EList<Attribute> _attributess_2 = this.getattributess(this.getentity(contract.getDef().getVariable().get(0).getType()));
                          for(final Attribute attribute_2 : _attributess_2) {
                            {
                              boolean _equalsIgnoreCase_2 = parameter_1.getName().equalsIgnoreCase(attribute_2.getName());
                              if (_equalsIgnoreCase_2) {
                                _builder.append("\t\t\t\t");
                                String _name_38 = contract.getOp().getName();
                                _builder.append(_name_38, "\t\t\t\t");
                                _builder.append("_");
                                String _name_39 = parameter_1.getName();
                                _builder.append(_name_39, "\t\t\t\t");
                                _builder.append("_t.setText(\"\");");
                                _builder.newLineIfNotEmpty();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("// refresh GUI after load data");
            _builder.newLine();
            _builder.append(" \t\t\t");
            _builder.append("refreshAll();");
            _builder.newLine();
            _builder.append(" \t\t\t");
            _builder.append("});");
            _builder.newLine();
            _builder.append(" \t\t\t");
            _builder.newLine();
            _builder.append(" \t\t\t");
            _builder.newLine();
            _builder.append(" \t\t\t");
            _builder.newLine();
            _builder.append("\t \t\t\t");
            String _name_40 = contract.getOp().getName();
            _builder.append(_name_40, "\t \t\t\t");
            _builder.append("_");
            String _name_41 = contract.getOp().getParameter().get(0).getName();
            _builder.append(_name_41, "\t \t\t\t");
            _builder.append("_t.setOnMouseClicked((e) -> {");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("TableView obs = allObjectTables.get(\"");
            String _compileType_16 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_16, "\t\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("obs.getSelectionModel().selectedIndexProperty().addListener(");
            _builder.newLine();
            _builder.append("\t\t\t\t\t ");
            _builder.append("(observable, oldValue, newValue) -> ");
            _builder.newLine();
            _builder.append("\t\t\t\t\t ");
            _builder.append("{ ");
            _builder.newLine();
            _builder.append("\t\t\t\t\t\t ");
            _builder.append("//get selected index");
            _builder.newLine();
            _builder.append("\t\t\t\t\t\t ");
            _builder.append("objectindex = obs.getSelectionModel().getSelectedIndex();");
            _builder.newLine();
            _builder.append("\t\t \t\t\t\t \t\t\t ");
            _builder.append("System.out.println(\"tableView select: \" + objectindex);");
            _builder.newLine();
            _builder.append("\t\t \t\t\t\t \t\t\t ");
            _builder.append("obs.setOnMouseClicked( event -> {");
            _builder.newLine();
            _builder.append("\t\t \t\t\t\t \t\t\t  ");
            _builder.newLine();
            _builder.append("\t\t\t\t\t\t\t");
            _builder.append("if( event.getClickCount() == 2 ) {");
            _builder.newLine();
            _builder.append("\t\t \t\t\t\t \t\t\t  \t\t");
            _builder.append("System.out.println( obs.getSelectionModel().getSelectedItem());");
            _builder.newLine();
            _builder.append("\t\t \t\t\t\t \t\t\t\t\t");
            _builder.append("List<");
            String _compileType_17 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_17, "\t\t \t\t\t\t \t\t\t\t\t");
            _builder.append("> rs = EntityManager.getAllInstancesOf(\"");
            String _compileType_18 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_18, "\t\t \t\t\t\t \t\t\t\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            {
              EList<Parameter> _parameter_2 = contract.getOp().getParameter();
              for(final Parameter parameter_2 : _parameter_2) {
                _builder.append("\t\t \t\t\t\t \t\t\t \t\t\t");
                _builder.newLine();
                {
                  boolean _judgeType_2 = this.judgeType(this.compileType(parameter_2.getType()));
                  boolean _not_2 = (!_judgeType_2);
                  if (_not_2) {
                    String _name_42 = parameter_2.getName();
                    String _plus_4 = (_name_42 + ".type: ");
                    String _compileType_19 = this.compileType(parameter_2.getType());
                    String _plus_5 = (_plus_4 + _compileType_19);
                    System.out.println(_plus_5);
                    _builder.newLineIfNotEmpty();
                    {
                      EList<Attribute> _attributess_3 = this.getattributess(this.getentity(contract.getDef().getVariable().get(0).getType()));
                      for(final Attribute attribute_3 : _attributess_3) {
                        {
                          boolean _equalsIgnoreCase_3 = parameter_2.getName().equalsIgnoreCase(attribute_3.getName());
                          if (_equalsIgnoreCase_3) {
                            _builder.append("for(int i = 0; i < ");
                            String _name_43 = contract.getOp().getName();
                            _builder.append(_name_43);
                            _builder.append("_");
                            String _name_44 = parameter_2.getName();
                            _builder.append(_name_44);
                            _builder.append("_cb.getItems().size(); i++ ) ");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t\t\t \t\t\t\t\t\t\t\t\t");
                            _builder.append("{");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("if(rs.get(objectindex).get");
                            String _name_45 = attribute_3.getName();
                            _builder.append(_name_45, "\t");
                            _builder.append("().toString() == ");
                            String _name_46 = contract.getOp().getName();
                            _builder.append(_name_46, "\t");
                            _builder.append("_");
                            String _name_47 = parameter_2.getName();
                            _builder.append(_name_47, "\t");
                            _builder.append("_cb.getItems().get(i)) ");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("{");
                            _builder.newLine();
                            _builder.append("\t\t");
                            String _name_48 = contract.getOp().getName();
                            _builder.append(_name_48, "\t\t");
                            _builder.append("_");
                            String _name_49 = parameter_2.getName();
                            _builder.append(_name_49, "\t\t");
                            _builder.append("_cb.getSelectionModel().select(i);");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("}");
                            _builder.newLine();
                            _builder.append("}");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  } else {
                    String _string_2 = this.getSymbol(this.getRightside(this.getAtomicexp(this.getExp(this.getLeftside(this.getAtomicexp(contract.getDef().getVariable().get(0).getInitExpression())))))).toString();
                    String _name_50 = parameter_2.getName();
                    boolean _equals_4 = Objects.equal(_string_2, _name_50);
                    if (_equals_4) {
                      String _name_51 = contract.getOp().getName();
                      _builder.append(_name_51);
                      _builder.append("_");
                      String _name_52 = parameter_2.getName();
                      _builder.append(_name_52);
                      _builder.append("_t.setText(String.valueOf(rs.get(objectindex).get");
                      String _attribute_1 = this.getAttribute(this.getLeftside(this.getAtomicexp(this.getExp(this.getLeftside(this.getAtomicexp(contract.getDef().getVariable().get(0).getInitExpression()))))));
                      _builder.append(_attribute_1);
                      _builder.append("()));");
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _name_53 = parameter_2.getName();
                      boolean _equals_5 = Objects.equal(_name_53, "quantity");
                      if (_equals_5) {
                        _builder.append("int indexStockNumber=(int)(Math.random()*rs.get(objectindex).getStockNumber());");
                        _builder.newLine();
                        String _name_54 = contract.getOp().getName();
                        _builder.append(_name_54);
                        _builder.append("_");
                        String _name_55 = parameter_2.getName();
                        _builder.append(_name_55);
                        _builder.append("_t.setText(String.valueOf(indexStockNumber));");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t \t\t\t\t\t\t\t\t\t");
                        _builder.newLine();
                      } else {
                        {
                          EList<Attribute> _attributess_4 = this.getattributess(this.getentity(contract.getDef().getVariable().get(0).getType()));
                          for(final Attribute attribute_4 : _attributess_4) {
                            {
                              boolean _equalsIgnoreCase_4 = parameter_2.getName().equalsIgnoreCase(attribute_4.getName());
                              if (_equalsIgnoreCase_4) {
                                String _name_56 = contract.getOp().getName();
                                _builder.append(_name_56);
                                _builder.append("_");
                                String _name_57 = parameter_2.getName();
                                _builder.append(_name_57);
                                _builder.append("_t.setText(String.valueOf(rs.get(objectindex).get");
                                String _name_58 = attribute_4.getName();
                                _builder.append(_name_58);
                                _builder.append("()));");
                                _builder.newLineIfNotEmpty();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _builder.newLine();
              }
            }
            _builder.append("\t\t \t\t\t\t\t\t\t");
            _builder.newLine();
            _builder.append("\t\t \t\t\t\t\t\t\t");
            _builder.append("Stage stage = (Stage)obs.getScene().getWindow();");
            _builder.newLine();
            _builder.append("\t\t \t\t\t\t\t\t\t");
            _builder.append("stage.close();");
            _builder.newLine();
            _builder.append("\t\t \t\t\t\t\t\t");
            _builder.append("}});");
            _builder.newLine();
            _builder.append("\t\t \t\t\t\t ");
            _builder.append("});");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("startclick(obs, \"");
            String _compileType_20 = this.compileType(contract.getDef().getVariable().get(0).getType());
            _builder.append(_compileType_20, "\t\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("// refresh GUI after load data");
            _builder.newLine();
            _builder.append("\t\t \t");
            _builder.append("refreshAll();");
            _builder.newLine();
            _builder.newLine();
            _builder.append("\t\t ");
            _builder.append("});");
            _builder.newLine();
            _builder.append(" \t\t\t");
            _builder.newLine();
            _builder.append(" \t\t\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public Object getAttributes(final TypeCS type) {
    Object _xifexpression = null;
    if ((type != null)) {
      Object _switchResult = null;
      boolean _matched = false;
      if (type instanceof EntityType) {
        _matched=true;
        EList<Attribute> _xifexpression_1 = null;
        EList<Attribute> _attributes = ((EntityType)type).getEntity().getAttributes();
        boolean _notEquals = (!Objects.equal(_attributes, null));
        if (_notEquals) {
          _xifexpression_1 = this.lattribute = ((EntityType)type).getEntity().getAttributes();
        }
        _switchResult = _xifexpression_1;
      }
      if (!_matched) {
        _switchResult = "";
      }
      _xifexpression = _switchResult;
    }
    return _xifexpression;
  }
  
  public Object getentity(final TypeCS type) {
    Object _xifexpression = null;
    if ((type != null)) {
      Object _switchResult = null;
      boolean _matched = false;
      if (type instanceof EntityType) {
        _matched=true;
        _switchResult = ((EntityType)type).getEntity();
      }
      if (!_matched) {
        _switchResult = "";
      }
      _xifexpression = _switchResult;
    }
    return _xifexpression;
  }
  
  /**
   * For primary and enum type
   */
  public String compileType(final TypeCS type) {
    String _xifexpression = null;
    if ((type != null)) {
      String _switchResult = null;
      boolean _matched = false;
      if (type instanceof PrimitiveTypeCS) {
        _matched=true;
        String _switchResult_1 = null;
        boolean _matched_1 = false;
        String _name = ((PrimitiveTypeCS)type).getName();
        boolean _equals = Objects.equal(_name, "Boolean");
        if (_equals) {
          _matched_1=true;
          _switchResult_1 = "boolean";
        }
        if (!_matched_1) {
          String _name_1 = ((PrimitiveTypeCS)type).getName();
          boolean _equals_1 = Objects.equal(_name_1, "String");
          if (_equals_1) {
            _matched_1=true;
            _switchResult_1 = "String";
          }
        }
        if (!_matched_1) {
          String _name_2 = ((PrimitiveTypeCS)type).getName();
          boolean _equals_2 = Objects.equal(_name_2, "Real");
          if (_equals_2) {
            _matched_1=true;
            _switchResult_1 = "float";
          }
        }
        if (!_matched_1) {
          String _name_3 = ((PrimitiveTypeCS)type).getName();
          boolean _equals_3 = Objects.equal(_name_3, "Integer");
          if (_equals_3) {
            _matched_1=true;
            _switchResult_1 = "int";
          }
        }
        if (!_matched_1) {
          String _name_4 = ((PrimitiveTypeCS)type).getName();
          boolean _equals_4 = Objects.equal(_name_4, "Date");
          if (_equals_4) {
            _matched_1=true;
            _switchResult_1 = "LocalDate";
          }
        }
        if (!_matched_1) {
          _switchResult_1 = "";
        }
        _switchResult = _switchResult_1;
      }
      if (!_matched) {
        if (type instanceof EnumEntity) {
          _matched=true;
          _switchResult = ((EnumEntity)type).getName();
        }
      }
      if (!_matched) {
        if (type instanceof EntityType) {
          _matched=true;
          _switchResult = ((EntityType)type).getEntity().getName();
        }
      }
      if (!_matched) {
        _switchResult = "";
      }
      _xifexpression = _switchResult;
    } else {
      _xifexpression = "";
    }
    return _xifexpression;
  }
  
  public String compileparameter(final String type) {
    String _xifexpression = null;
    if ((type != null)) {
      String _switchResult = null;
      boolean _matched = false;
      boolean _equals = Objects.equal(type, "barcode");
      if (_equals) {
        _matched=true;
        _switchResult = "Barcode";
      }
      if (!_matched) {
        boolean _equals_1 = Objects.equal(type, "quantity");
        if (_equals_1) {
          _matched=true;
          _switchResult = "StockNumber";
        }
      }
      if (!_matched) {
        boolean _equals_2 = Objects.equal(type, "name");
        if (_equals_2) {
          _matched=true;
          _switchResult = "Name";
        }
      }
      if (!_matched) {
        boolean _equals_3 = Objects.equal(type, "amount");
        if (_equals_3) {
          _matched=true;
          _switchResult = "Amount";
        }
      }
      if (!_matched) {
        boolean _equals_4 = Objects.equal(type, "cardAccountNumber");
        if (_equals_4) {
          _matched=true;
          _switchResult = "CardAccountNumber";
        }
      }
      if (!_matched) {
        boolean _equals_5 = Objects.equal(type, "storeID");
        if (_equals_5) {
          _matched=true;
          _switchResult = "Id";
        }
      }
      if (!_matched) {
        boolean _equals_6 = Objects.equal(type, "cashDeskID");
        if (_equals_6) {
          _matched=true;
          _switchResult = "Id";
        }
      }
      if (!_matched) {
        boolean _equals_7 = Objects.equal(type, "orderid");
        if (_equals_7) {
          _matched=true;
          _switchResult = "Id";
        }
      }
      if (!_matched) {
        boolean _equals_8 = Objects.equal(type, "orderID");
        if (_equals_8) {
          _matched=true;
          _switchResult = "Id";
        }
      }
      if (!_matched) {
        boolean _equals_9 = Objects.equal(type, "supplierID");
        if (_equals_9) {
          _matched=true;
          _switchResult = "Id";
        }
      }
      if (!_matched) {
        boolean _equals_10 = Objects.equal(type, "id");
        if (_equals_10) {
          _matched=true;
          _switchResult = "Id";
        }
      }
      if (!_matched) {
        boolean _equals_11 = Objects.equal(type, "id");
        if (_equals_11) {
          _matched=true;
          _switchResult = "Id";
        }
      }
      if (!_matched) {
        boolean _equals_12 = Objects.equal(type, "cardAccountNumber");
        if (_equals_12) {
          _matched=true;
          _switchResult = "CardAccountNumber";
        }
      }
      if (!_matched) {
        boolean _equals_13 = Objects.equal(type, "cardAccountNumber");
        if (_equals_13) {
          _matched=true;
          _switchResult = "CardAccountNumber";
        }
      }
      if (!_matched) {
        boolean _equals_14 = Objects.equal(type, "userid");
        if (_equals_14) {
          _matched=true;
          _switchResult = "UserID";
        }
      }
      if (!_matched) {
        boolean _equals_15 = Objects.equal(type, "address");
        if (_equals_15) {
          _matched=true;
          _switchResult = "Address";
        }
      }
      if (!_matched) {
        boolean _equals_16 = Objects.equal(type, "librarianid");
        if (_equals_16) {
          _matched=true;
          _switchResult = "LibrarianID";
        }
      }
      if (!_matched) {
        boolean _equals_17 = Objects.equal(type, "password");
        if (_equals_17) {
          _matched=true;
          _switchResult = "Password";
        }
      }
      if (!_matched) {
        boolean _equals_18 = Objects.equal(type, "requestid");
        if (_equals_18) {
          _matched=true;
          _switchResult = "RequestID";
        }
      }
      if (!_matched) {
        boolean _equals_19 = Objects.equal(type, "loanamount");
        if (_equals_19) {
          _matched=true;
          _switchResult = "LoanAmount";
        }
      }
      if (!_matched) {
        boolean _equals_20 = Objects.equal(type, "loanpurpose");
        if (_equals_20) {
          _matched=true;
          _switchResult = "LoanPurpose";
        }
      }
      if (!_matched) {
        boolean _equals_21 = Objects.equal(type, "income");
        if (_equals_21) {
          _matched=true;
          _switchResult = "Income";
        }
      }
      if (!_matched) {
        boolean _equals_22 = Objects.equal(type, "phonenumber");
        if (_equals_22) {
          _matched=true;
          _switchResult = "PhoneNumber";
        }
      }
      if (!_matched) {
        boolean _equals_23 = Objects.equal(type, "postaladdress");
        if (_equals_23) {
          _matched=true;
          _switchResult = "PostalAddress";
        }
      }
      if (!_matched) {
        boolean _equals_24 = Objects.equal(type, "zipcode");
        if (_equals_24) {
          _matched=true;
          _switchResult = "ZipCode";
        }
      }
      if (!_matched) {
        boolean _equals_25 = Objects.equal(type, "email");
        if (_equals_25) {
          _matched=true;
          _switchResult = "Email";
        }
      }
      if (!_matched) {
        boolean _equals_26 = Objects.equal(type, "workreferences");
        if (_equals_26) {
          _matched=true;
          _switchResult = "WorkReferences";
        }
      }
      if (!_matched) {
        boolean _equals_27 = Objects.equal(type, "creditreferences");
        if (_equals_27) {
          _matched=true;
          _switchResult = "CreditReferences";
        }
      }
      if (!_matched) {
        boolean _equals_28 = Objects.equal(type, "checkingaccountnumber");
        if (_equals_28) {
          _matched=true;
          _switchResult = "CheckingAccountNumber";
        }
      }
      if (!_matched) {
        boolean _equals_29 = Objects.equal(type, "securitynumber");
        if (_equals_29) {
          _matched=true;
          _switchResult = "SecurityNumber";
        }
      }
      if (!_matched) {
        _switchResult = "";
      }
      _xifexpression = _switchResult;
    } else {
      _xifexpression = "";
    }
    return _xifexpression;
  }
  
  public EObject getAtomicexp(final OCLExpressionCS a) {
    if ((a instanceof LogicFormulaExpCS)) {
      return ((LogicFormulaExpCS)a).getAtomicexp().get(0);
    }
    return null;
  }
  
  public LeftSubAtomicExpression getLeftside(final EObject a) {
    if ((a instanceof AtomicExpression)) {
      return ((AtomicExpression)a).getLeftside();
    }
    return null;
  }
  
  public OCLExpressionCS getExp(final EObject a) {
    if ((a instanceof IteratorExpCS)) {
      return ((IteratorExpCS)a).getExp();
    }
    return null;
  }
  
  public String getAttribute(final EObject a) {
    if ((a instanceof PropertyCallExpCS)) {
      return ((PropertyCallExpCS)a).getAttribute();
    }
    return null;
  }
  
  public RightSubAtomicExpression getRightside(final EObject a) {
    if ((a instanceof AtomicExpression)) {
      return ((AtomicExpression)a).getRightside();
    }
    return null;
  }
  
  public String getSymbol(final EObject a) {
    if ((a instanceof VariableExpCS)) {
      return ((VariableExpCS)a).getSymbol();
    }
    if ((a instanceof PropertyCallExpCS)) {
      return ((PropertyCallExpCS)a).getAttribute();
    }
    return null;
  }
  
  public EList<Attribute> getattributess(final Object a) {
    if ((a instanceof Entity)) {
      return ((Entity)a).getAttributes();
    }
    return null;
  }
  
  public EList<EnumItem> getElement(final Object a) {
    if ((a instanceof EnumEntity)) {
      return ((EnumEntity)a).getElement();
    }
    return null;
  }
  
  public EnumItem getOneElement(final Object a) {
    if ((a instanceof EnumEntity)) {
      return ((EnumEntity)a).getElement().get(0);
    }
    return null;
  }
  
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
  
  public boolean judgeType(final String temp) {
    boolean _equals = temp.equals("boolean");
    if (_equals) {
      return true;
    } else {
      boolean _equals_1 = temp.equals("String");
      if (_equals_1) {
        return true;
      } else {
        boolean _equals_2 = temp.equals("float");
        if (_equals_2) {
          return true;
        } else {
          boolean _equals_3 = temp.equals("int");
          if (_equals_3) {
            return true;
          } else {
            boolean _equals_4 = temp.equals("LocalDate");
            if (_equals_4) {
              return true;
            } else {
              return false;
            }
          }
        }
      }
    }
  }
  
  public String doGenerate1(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final String projectName) {
    this.root = resource.getContents().get(0);
    this.sEntity = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    this.ssEntity = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    this.sContract = Iterables.<Contract>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Contract.class);
    this.sssEntity = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    this.sssContract = Iterables.<Contract>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Contract.class);
    this.sssssEntity = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    this.sssssContract = Iterables.<Contract>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Contract.class);
    this.sssssEntity = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    this.sssssContract = Iterables.<Contract>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Contract.class);
    String _string = this.loadfileFxml(this.sEntity, this.ssEntity, this.sContract).toString();
    String _string_1 = this.setYamlFilter(this.sssEntity, 
      Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class), 
      this.sssContract).toString();
    String _plus = (_string + _string_1);
    String _string_2 = this.setEntityToYamlStringFilter(this.sssssEntity, 
      Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class), 
      Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class), 
      this.sssssContract).toString();
    return (_plus + _string_2);
  }
  
  public String doGenerate_ChatClient(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final String projectName) {
    this.root = resource.getContents().get(0);
    this.sEntity = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    this.sContract = Iterables.<Contract>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Contract.class);
    return this.setChatClient(this.sEntity, this.sContract).toString();
  }
  
  public String doGenerate_OpenAiSpeaker(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final String projectName) {
    this.root = resource.getContents().get(0);
    this.sEntity = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    this.sContract = Iterables.<Contract>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Contract.class);
    return this.setOpenAiSpeaker(this.sEntity, Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class), this.sContract).toString();
  }
  
  public String loadfileFxml(final Iterable<Entity> sEntity, final Iterable<Entity> sssEntity, final Iterable<Contract> sContract) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.append("public static List<Integer> String2int(String str) {");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("// 创建列表");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("List<Integer> list = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (str.startsWith(\"[\") && str.endsWith(\"]\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("// 去除方括号");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("String content = str.substring(1, str.length() - 1);");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("System.out.println(\"content: \" +content);");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("// 拆分字符串");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("String[] items = content.split(\",\");");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("// 遍历拆分得到的字符串数组，将每个字符串转换为整数并添加到列表中");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("for (String item : items) {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("int number = Integer.parseInt(item.trim()); // 去除前后空格并将字符串转换为整数");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("list.add(number);");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t        \t");
    _builder.append("list.add(Integer.valueOf(str));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("return list;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      for(final Entity entity : sEntity) {
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("public static void load");
        String _name = entity.getName();
        _builder.append(_name, "\t\t");
        _builder.append("File(File file, int loadCode,JSONObject rootObject){\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        String _name_1 = entity.getName();
        _builder.append(_name_1, "\t\t\t");
        _builder.append("Instances.clear();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t    \t   \t");
        _builder.append("JSONArray dataArray");
        String _name_2 = entity.getName();
        _builder.append(_name_2, "\t    \t   \t");
        _builder.append(" = rootObject.getJSONArray(\"");
        String _name_3 = entity.getName();
        _builder.append(_name_3, "\t    \t   \t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append(" \t\t           ");
        String _name_4 = entity.getName();
        _builder.append(_name_4, " \t\t           ");
        _builder.append(" iii");
        String _name_5 = entity.getName();
        _builder.append(_name_5, " \t\t           ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(" \t\t           ");
        _builder.append("for(int i = 0; i < dataArray");
        String _name_6 = entity.getName();
        _builder.append(_name_6, " \t\t           ");
        _builder.append(".length(); i++) ");
        _builder.newLineIfNotEmpty();
        _builder.append(" \t\t           ");
        _builder.append("{");
        _builder.newLine();
        _builder.append(" \t\t           \t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append(" \t\t            \t");
        _builder.append("JSONObject sonObject");
        String _name_7 = entity.getName();
        _builder.append(_name_7, " \t\t            \t");
        _builder.append(" = dataArray");
        String _name_8 = entity.getName();
        _builder.append(_name_8, " \t\t            \t");
        _builder.append(".getJSONObject(i);");
        _builder.newLineIfNotEmpty();
        _builder.append(" \t\t            \t");
        _builder.newLine();
        _builder.append(" \t\t\t\t\t   \t");
        _builder.append("iii");
        String _name_9 = entity.getName();
        _builder.append(_name_9, " \t\t\t\t\t   \t");
        _builder.append(" = (");
        String _name_10 = entity.getName();
        _builder.append(_name_10, " \t\t\t\t\t   \t");
        _builder.append(") EntityManager.createObject(\"");
        String _name_11 = entity.getName();
        _builder.append(_name_11, " \t\t\t\t\t   \t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append(" \t\t\t\t\t ");
        _builder.newLine();
        _builder.append(" \t\t\t\t\t   \t");
        _builder.newLine();
        _builder.append(" \t\t\t\t\t   \t");
        _builder.newLine();
        {
          EList<Attribute> _attributes = entity.getAttributes();
          for(final Attribute attribute : _attributes) {
            _builder.append(" \t\t\t\t\t   \t");
            _builder.newLine();
            {
              String _compileType = this.compileType(attribute.getType());
              boolean _equals = Objects.equal(_compileType, "int");
              if (_equals) {
                _builder.append("try {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("iii");
                String _name_12 = entity.getName();
                _builder.append(_name_12, "\t");
                _builder.append(".set");
                String _name_13 = attribute.getName();
                _builder.append(_name_13, "\t");
                _builder.append("(Integer.valueOf( String.valueOf(sonObject");
                String _name_14 = entity.getName();
                _builder.append(_name_14, "\t");
                _builder.append(".get(\"");
                String _name_15 = attribute.getName();
                _builder.append(_name_15, "\t");
                _builder.append("\")) ));");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t\t    ");
                _builder.append("} catch (NumberFormatException e) {");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("System.out.println(\"当前输入的字符串超过类型限制，随机生成填入！\");");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("Random rand = new Random();");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("int minDigits = 2; // 最小位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("int maxDigits = 8; // 最大位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("iii");
                String _name_16 = entity.getName();
                _builder.append(_name_16, "\t\t\t\t\t\t\t        ");
                _builder.append(".set");
                String _name_17 = attribute.getName();
                _builder.append(_name_17, "\t\t\t\t\t\t\t        ");
                _builder.append("(Integer.valueOf(randomNumber ));");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("e.printStackTrace();");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t    ");
                _builder.append("}catch (JSONException e) {");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("System.out.println(\"JSONObject [");
                String _name_18 = attribute.getName();
                _builder.append(_name_18, "\t\t\t\t\t\t\t        ");
                _builder.append("]没找到，出现异常，随机生成填入！\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("Random rand = new Random();");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("int minDigits = 2; // 最小位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("int maxDigits = 8; // 最大位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("iii");
                String _name_19 = entity.getName();
                _builder.append(_name_19, "\t\t\t\t\t\t\t        ");
                _builder.append(".set");
                String _name_20 = attribute.getName();
                _builder.append(_name_20, "\t\t\t\t\t\t\t        ");
                _builder.append("(Integer.valueOf(randomNumber ));");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("e.printStackTrace();");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t    ");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t    ");
                _builder.append("catch (Exception e) {");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("System.out.println(\"出现未知异常，随机生成填入！\");");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("Random rand = new Random();");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("int minDigits = 2; // 最小位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("int maxDigits = 8; // 最大位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("iii");
                String _name_21 = entity.getName();
                _builder.append(_name_21, "\t\t\t\t\t\t\t        ");
                _builder.append(".set");
                String _name_22 = attribute.getName();
                _builder.append(_name_22, "\t\t\t\t\t\t\t        ");
                _builder.append("(Integer.valueOf(randomNumber ));");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t\t        ");
                _builder.append("e.printStackTrace();");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t    ");
                _builder.append("}");
                _builder.newLine();
              } else {
                String _compileType_1 = this.compileType(attribute.getType());
                boolean _equals_1 = Objects.equal(_compileType_1, "boolean");
                if (_equals_1) {
                  _builder.append("try {");
                  _builder.newLine();
                  _builder.append("\t\t\t\t\t\t\t    ");
                  _builder.append("iii");
                  String _name_23 = entity.getName();
                  _builder.append(_name_23, "\t\t\t\t\t\t\t    ");
                  _builder.append(".set");
                  String _name_24 = attribute.getName();
                  _builder.append(_name_24, "\t\t\t\t\t\t\t    ");
                  _builder.append("(Boolean.parseBoolean(sonObject");
                  String _name_25 = entity.getName();
                  _builder.append(_name_25, "\t\t\t\t\t\t\t    ");
                  _builder.append(".get(\"");
                  String _name_26 = attribute.getName();
                  _builder.append(_name_26, "\t\t\t\t\t\t\t    ");
                  _builder.append("\").toString() ));");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t\t\t\t\t    ");
                  _builder.append("} catch (Exception e) {");
                  _builder.newLine();
                  _builder.append("\t\t\t\t\t\t\t        ");
                  _builder.append("// handle the exception");
                  _builder.newLine();
                  _builder.append("\t\t\t\t\t\t\t        ");
                  _builder.append("System.out.println(\"发生了未知错误，随机生成填入！\");");
                  _builder.newLine();
                  _builder.append("\t\t\t\t\t\t\t        ");
                  _builder.append("iii");
                  String _name_27 = entity.getName();
                  _builder.append(_name_27, "\t\t\t\t\t\t\t        ");
                  _builder.append(".set");
                  String _name_28 = attribute.getName();
                  _builder.append(_name_28, "\t\t\t\t\t\t\t        ");
                  _builder.append("(Boolean.parseBoolean(\"false\" ));");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t\t\t\t\t        ");
                  _builder.append("e.printStackTrace();");
                  _builder.newLine();
                  _builder.append("\t\t\t\t\t\t\t        ");
                  _builder.newLine();
                  _builder.append("\t\t\t\t\t\t\t    ");
                  _builder.append("}");
                  _builder.newLine();
                } else {
                  String _compileType_2 = this.compileType(attribute.getType());
                  boolean _equals_2 = Objects.equal(_compileType_2, "float");
                  if (_equals_2) {
                    _builder.append("try {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("iii");
                    String _name_29 = entity.getName();
                    _builder.append(_name_29, "\t");
                    _builder.append(".set");
                    String _name_30 = attribute.getName();
                    _builder.append(_name_30, "\t");
                    _builder.append("(Float.parseFloat(sonObject");
                    String _name_31 = entity.getName();
                    _builder.append(_name_31, "\t");
                    _builder.append(".get(\"");
                    String _name_32 = attribute.getName();
                    _builder.append(_name_32, "\t");
                    _builder.append("\").toString()));");
                    _builder.newLineIfNotEmpty();
                    _builder.append("} catch (ArithmeticException e) {");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("System.out.println(\"yaml不能为0，随机生成填入！\");");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("e.printStackTrace();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("Random rand = new Random();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("float randomFloat = rand.nextFloat();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("iii");
                    String _name_33 = entity.getName();
                    _builder.append(_name_33, "    ");
                    _builder.append(".set");
                    String _name_34 = attribute.getName();
                    _builder.append(_name_34, "    ");
                    _builder.append("(randomFloat);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    ");
                    _builder.newLine();
                    _builder.append("} catch (NumberFormatException e) {");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("System.out.println(\"yaml数字格式不正确，随机生成填入！\");");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("e.printStackTrace();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("Random rand = new Random();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("float randomFloat = rand.nextFloat();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("iii");
                    String _name_35 = entity.getName();
                    _builder.append(_name_35, "    ");
                    _builder.append(".set");
                    String _name_36 = attribute.getName();
                    _builder.append(_name_36, "    ");
                    _builder.append("(randomFloat);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    ");
                    _builder.newLine();
                    _builder.append("} catch (Exception e) {");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("System.out.println(\"发生了未知异常，随机生成填入！\");");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("e.printStackTrace();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("Random rand = new Random();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("float randomFloat = rand.nextFloat();");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("iii");
                    String _name_37 = entity.getName();
                    _builder.append(_name_37, "    ");
                    _builder.append(".set");
                    String _name_38 = attribute.getName();
                    _builder.append(_name_38, "    ");
                    _builder.append("(randomFloat);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("}");
                    _builder.newLine();
                  } else {
                    String _compileType_3 = this.compileType(attribute.getType());
                    boolean _equals_3 = Objects.equal(_compileType_3, "LocalDate");
                    if (_equals_3) {
                      _builder.append("String inputDate");
                      String _name_39 = attribute.getName();
                      _builder.append(_name_39);
                      _builder.append(" = sonObject");
                      String _name_40 = entity.getName();
                      _builder.append(_name_40);
                      _builder.append(".get(\"");
                      String _name_41 = attribute.getName();
                      _builder.append(_name_41);
                      _builder.append("\").toString();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("try {");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("Instant instant = Instant.ofEpochMilli(Long.parseLong(inputDate");
                      String _name_42 = attribute.getName();
                      _builder.append(_name_42, "    ");
                      _builder.append("));");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("LocalDate localDate");
                      String _name_43 = entity.getName();
                      _builder.append(_name_43, "    ");
                      _builder.append(" = instant.atZone(ZoneId.systemDefault()).toLocalDate();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("iii");
                      String _name_44 = entity.getName();
                      _builder.append(_name_44, "    ");
                      _builder.append(".set");
                      String _name_45 = attribute.getName();
                      _builder.append(_name_45, "    ");
                      _builder.append("(localDate");
                      String _name_46 = entity.getName();
                      _builder.append(_name_46, "    ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("} catch (DateTimeParseException e) {");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("System.out.println(\"发生了DateTimeParseException异常，随机生成填入！\");");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("long startEpochDay");
                      String _name_47 = entity.getName();
                      _builder.append(_name_47, "    ");
                      _builder.append(" = LocalDate.of(2020, 1, 1).toEpochDay();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t        ");
                      _builder.append("long endEpochDay");
                      String _name_48 = entity.getName();
                      _builder.append(_name_48, "\t\t\t\t\t\t\t        ");
                      _builder.append(" = LocalDate.of(2030, 1, 1).toEpochDay();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t        ");
                      _builder.append("long randomDay");
                      String _name_49 = entity.getName();
                      _builder.append(_name_49, "\t\t\t\t\t\t\t        ");
                      _builder.append(" = ThreadLocalRandom.current().nextLong(startEpochDay");
                      String _name_50 = entity.getName();
                      _builder.append(_name_50, "\t\t\t\t\t\t\t        ");
                      _builder.append(", endEpochDay");
                      String _name_51 = entity.getName();
                      _builder.append(_name_51, "\t\t\t\t\t\t\t        ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("LocalDate randomDate");
                      String _name_52 = entity.getName();
                      _builder.append(_name_52, "    ");
                      _builder.append(" = LocalDate.ofEpochDay(randomDay");
                      String _name_53 = entity.getName();
                      _builder.append(_name_53, "    ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("iii");
                      String _name_54 = entity.getName();
                      _builder.append(_name_54, "    ");
                      _builder.append(".set");
                      String _name_55 = attribute.getName();
                      _builder.append(_name_55, "    ");
                      _builder.append("(randomDate");
                      String _name_56 = entity.getName();
                      _builder.append(_name_56, "    ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                      _builder.newLine();
                      _builder.append("}catch (Exception e) {");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("System.out.println(\"发生了未知异常，随机生成填入！\");");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("long startEpochDay");
                      String _name_57 = entity.getName();
                      _builder.append(_name_57, "    ");
                      _builder.append(" = LocalDate.of(2020, 1, 1).toEpochDay();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t        ");
                      _builder.append("long endEpochDay");
                      String _name_58 = entity.getName();
                      _builder.append(_name_58, "\t\t\t\t\t\t\t        ");
                      _builder.append(" = LocalDate.of(2030, 1, 1).toEpochDay();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t        ");
                      _builder.append("long randomDay");
                      String _name_59 = entity.getName();
                      _builder.append(_name_59, "\t\t\t\t\t\t\t        ");
                      _builder.append(" = ThreadLocalRandom.current().nextLong(startEpochDay");
                      String _name_60 = entity.getName();
                      _builder.append(_name_60, "\t\t\t\t\t\t\t        ");
                      _builder.append(", endEpochDay");
                      String _name_61 = entity.getName();
                      _builder.append(_name_61, "\t\t\t\t\t\t\t        ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("LocalDate randomDate");
                      String _name_62 = entity.getName();
                      _builder.append(_name_62, "    ");
                      _builder.append(" = LocalDate.ofEpochDay(randomDay");
                      String _name_63 = entity.getName();
                      _builder.append(_name_63, "    ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("iii");
                      String _name_64 = entity.getName();
                      _builder.append(_name_64, "    ");
                      _builder.append(".set");
                      String _name_65 = attribute.getName();
                      _builder.append(_name_65, "    ");
                      _builder.append("(randomDate");
                      String _name_66 = entity.getName();
                      _builder.append(_name_66, "    ");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.newLine();
                      _builder.append("}");
                      _builder.newLine();
                    } else {
                      String _compileType_4 = this.compileType(attribute.getType());
                      boolean _equals_4 = Objects.equal(_compileType_4, "String");
                      if (_equals_4) {
                        _builder.append("iii");
                        String _name_67 = entity.getName();
                        _builder.append(_name_67);
                        _builder.append(".set");
                        String _name_68 = attribute.getName();
                        _builder.append(_name_68);
                        _builder.append("(sonObject");
                        String _name_69 = entity.getName();
                        _builder.append(_name_69);
                        _builder.append(".get(\"");
                        String _name_70 = attribute.getName();
                        _builder.append(_name_70);
                        _builder.append("\").toString());");
                        _builder.newLineIfNotEmpty();
                      } else {
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append(" \t\t            \t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.newLine();
        {
          EList<Attribute> _attributes_1 = entity.getAttributes();
          for(final Attribute attribute_1 : _attributes_1) {
            {
              if ((((((!Objects.equal(this.compileType(attribute_1.getType()), "int")) && (!Objects.equal(this.compileType(attribute_1.getType()), "boolean"))) && (!Objects.equal(this.compileType(attribute_1.getType()), "float"))) && (!Objects.equal(this.compileType(attribute_1.getType()), "LocalDate"))) && (!Objects.equal(this.compileType(attribute_1.getType()), "String")))) {
                _builder.append("\t \t\t\t\t\t   \t");
                _builder.append("iii");
                String _name_71 = entity.getName();
                _builder.append(_name_71, "\t \t\t\t\t\t   \t");
                _builder.append(".set");
                String _name_72 = attribute_1.getName();
                _builder.append(_name_72, "\t \t\t\t\t\t   \t");
                _builder.append("(");
                String _compileType_5 = this.compileType(attribute_1.getType());
                _builder.append(_compileType_5, "\t \t\t\t\t\t   \t");
                _builder.append(".");
                String _name_73 = this.getOneElement(attribute_1.getType()).getName();
                _builder.append(_name_73, "\t \t\t\t\t\t   \t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append(" \t\t            \t");
        _builder.newLine();
        _builder.append(" \t\t            \t");
        _builder.append("if(loadCode == 1) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("EntityManager.addObject(\"");
        String _name_74 = entity.getName();
        _builder.append(_name_74, "\t\t\t\t\t\t\t");
        _builder.append("\", iii");
        String _name_75 = entity.getName();
        _builder.append(_name_75, "\t\t\t\t\t\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("if(loadCode == 2) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t\t\t");
        String _name_76 = entity.getName();
        _builder.append(_name_76, "\t\t\t\t\t\t\t");
        _builder.append("Instances.add(iii");
        String _name_77 = entity.getName();
        _builder.append(_name_77, "\t\t\t\t\t\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("        \t\t\t\t");
        _builder.append("}\t");
        _builder.newLine();
        _builder.append("        \t\t\t\t");
        _builder.append("if(loadCode == 3) ");
        _builder.newLine();
        _builder.append("\t                    ");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t   \t\t\t");
        String _name_78 = entity.getName();
        _builder.append(_name_78, "\t\t\t   \t\t\t");
        _builder.append("Instances.add(iii");
        String _name_79 = entity.getName();
        _builder.append(_name_79, "\t\t\t   \t\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("        \t\t\t\t");
        _builder.append("} catch (JSONException e) {");
        _builder.newLine();
        _builder.append("\t\t    \t      \t        ");
        _builder.append("// 处理异常");
        _builder.newLine();
        _builder.append("\t\t    \t      \t        ");
        _builder.append("e.printStackTrace();");
        _builder.newLine();
        _builder.append("\t\t    \t      \t        ");
        _builder.append("System.out.println(\"经判断，这个数据出现JSONException异常，将跳过...\");");
        _builder.newLine();
        _builder.append("\t\t    \t      \t        ");
        _builder.append("continue;}");
        _builder.newLine();
        _builder.append("\t\t \t\t            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t \t\t            ");
        _builder.newLine();
        _builder.append("\t\t \t\t      ");
        _builder.newLine();
        _builder.append("\t\t \t\t      ");
        _builder.append("if(loadCode == 2) ");
        _builder.newLine();
        _builder.append("\t                    ");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t   \t\t");
        _builder.append("AllmapperObject.put(\"");
        String _name_80 = entity.getName();
        _builder.append(_name_80, "\t\t\t   \t\t");
        _builder.append("\",");
        String _name_81 = entity.getName();
        _builder.append(_name_81, "\t\t\t   \t\t");
        _builder.append("Instances);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("      \t\t    ");
        _builder.append("} ");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/* Load File */");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("static Map<String, List> AllmapperObject = new HashMap<String, List>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@SuppressWarnings(\"null\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static Map<String, List> loadFile(File file, int loadCode){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t \t\t\t");
    _builder.append("Yaml yaml = new Yaml();");
    _builder.newLine();
    _builder.append("\t\t \t\t\t");
    _builder.append("System.out.println(\"come in yaml\");");
    _builder.newLine();
    _builder.append("\t\t \t\t\t");
    _builder.append("if (file != null) {");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.append("List<String> yamlList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String sssss;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Iterable<Object> object;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("sssss = file2String(file);");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\tSystem.out.println(\"currentLine\"+sssss);");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\tString objsss =yaml.load(new FileInputStream(file));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("object = yaml.loadAll(sssss);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("object.forEach(y -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("if (ObjectUtil.isNotNull(y)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t                ");
    _builder.append("yamlList.add(JSONUtil.toJsonStr(y));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (IOException es) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("es.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t   \t\t\t");
    _builder.append("JSONObject rootObject = new JSONObject(yamlList.get(0).toString());");
    _builder.newLine();
    _builder.append("\t   \t\t\t");
    _builder.newLine();
    {
      for(final Entity entity_1 : sssEntity) {
        _builder.newLine();
        _builder.append("if (rootObject.has(\"");
        String _name_82 = entity_1.getName();
        _builder.append(_name_82);
        _builder.append("\") )");
        _builder.newLineIfNotEmpty();
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("load");
        String _name_83 = entity_1.getName();
        _builder.append(_name_83, "\t\t\t\t\t\t");
        _builder.append("File(file, 2, rootObject);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t  ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t \t\t      ");
        _builder.append("if(loadCode == 2) ");
        _builder.newLine();
        _builder.append("\t                  ");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t\t\t   \t\t");
        _builder.append("AllmapperObject.put(\"");
        String _name_84 = entity_1.getName();
        _builder.append(_name_84, "\t\t\t\t   \t\t");
        _builder.append("\",");
        String _name_85 = entity_1.getName();
        _builder.append(_name_85, "\t\t\t\t   \t\t");
        _builder.append("Instances);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t   ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t              ");
    _builder.newLine();
    _builder.append("\t\t \t\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t \t\t");
    _builder.append("return AllmapperObject;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static void loadMapper(Map<String, List> Allmapper) {");
    _builder.newLine();
    {
      for(final Entity entity_2 : sEntity) {
        String _name_86 = entity_2.getName();
        _builder.append(_name_86);
        _builder.append("Instances =  (List<");
        String _name_87 = entity_2.getName();
        _builder.append(_name_87);
        _builder.append(">) Allmapper.get(\"");
        String _name_88 = entity_2.getName();
        _builder.append(_name_88);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("AllInstance.put(\"");
        String _name_89 = entity_2.getName();
        _builder.append(_name_89);
        _builder.append("\", ");
        String _name_90 = entity_2.getName();
        _builder.append(_name_90);
        _builder.append("Instances);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Load Success！\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String setChatClient(final Iterable<Entity> sEntity, final Iterable<Contract> sContract) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package gui;");
    _builder.newLine();
    _builder.append("import java.io.BufferedWriter;");
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.FileInputStream;");
    _builder.newLine();
    _builder.append("import java.io.FileNotFoundException;");
    _builder.newLine();
    _builder.append("import java.io.FileOutputStream;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.OutputStream;");
    _builder.newLine();
    _builder.append("import java.io.OutputStreamWriter;");
    _builder.newLine();
    _builder.append("import java.lang.reflect.Field;");
    _builder.newLine();
    _builder.append("import java.time.LocalDate;");
    _builder.newLine();
    _builder.append("import java.time.format.DateTimeFormatter;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.LinkedList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import java.util.Set;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.ExecutorService;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.Executors;");
    _builder.newLine();
    _builder.append("import java.util.regex.Matcher;");
    _builder.newLine();
    _builder.append("import java.util.regex.Pattern;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.yaml.snakeyaml.Yaml;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import entities.EntityManager;");
    _builder.newLine();
    _builder.append("import javafx.animation.Animation;");
    _builder.newLine();
    _builder.append("import javafx.animation.PathTransition;");
    _builder.newLine();
    _builder.append("import javafx.application.Application;");
    _builder.newLine();
    _builder.append("import javafx.application.Platform;");
    _builder.newLine();
    _builder.append("import javafx.beans.property.SimpleStringProperty;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javafx.collections.FXCollections;");
    _builder.newLine();
    _builder.append("import javafx.collections.ObservableList;");
    _builder.newLine();
    _builder.append("import javafx.concurrent.Task;");
    _builder.newLine();
    _builder.append("import javafx.geometry.Insets;");
    _builder.newLine();
    _builder.append("import javafx.geometry.Pos;");
    _builder.newLine();
    _builder.append("import javafx.scene.Scene;");
    _builder.newLine();
    _builder.append("import javafx.scene.control.*;");
    _builder.newLine();
    _builder.append("import javafx.scene.control.cell.PropertyValueFactory;");
    _builder.newLine();
    _builder.append("import javafx.scene.control.cell.TextFieldTableCell;");
    _builder.newLine();
    _builder.append("import javafx.scene.input.KeyEvent;");
    _builder.newLine();
    _builder.append("import javafx.scene.input.MouseEvent;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.Border;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.BorderPane;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.BorderStroke;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.BorderStrokeStyle;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.BorderWidths;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.GridPane;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.HBox;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.Priority;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.StackPane;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.VBox;");
    _builder.newLine();
    _builder.append("import javafx.scene.paint.Color;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javafx.scene.shape.Circle;");
    _builder.newLine();
    _builder.append("import javafx.scene.shape.Line;");
    _builder.newLine();
    _builder.append("import javafx.scene.text.Font;");
    _builder.newLine();
    _builder.append("import javafx.scene.text.Text;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javafx.scene.text.TextFlow;");
    _builder.newLine();
    _builder.append("import javafx.stage.Modality;");
    _builder.newLine();
    _builder.append("import javafx.stage.Stage;");
    _builder.newLine();
    _builder.append("import javafx.stage.StageStyle;");
    _builder.newLine();
    _builder.append("import javafx.util.Duration;");
    _builder.newLine();
    _builder.append("import javafx.util.StringConverter;");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.core.JsonProcessingException;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.Region;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("public class ChatClient_new extends Application{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String generatedData = \"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ProgressIndicator progressIndicator = new ProgressIndicator();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TextArea textArea;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//动画");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Stage primaryStage123 = new Stage();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//主界面");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Stage stagesss = new Stage();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BorderPane borderpane;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("VBox vBox;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Button yaml_view;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Button Evaluation_editButton;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Button table_view;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MenuBar menuBar;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Label statusLabel;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Label GenerationLabel;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, List> Allmapper = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TableView<String> leftTable;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TableView<Object> rightTable;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("VBox vBox_status;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("private static final Color PROPERTY_COLOR = Color.DARKCYAN;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("private static final Color VALUE_COLOR = Color.DARKSLATEGRAY;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("TextFlow textFlow;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("ScrollPane scrollPane;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("Button setting_Generation = new Button(\"Generation\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<EntityNumber> EntityNumberInstances = new LinkedList<EntityNumber>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String test_str1 = \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String test_str2 = \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String test_str3 = \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String AI_model = \"0\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String textArea_returnData = \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TableView<EntityNumber> SettingTable = new TableView<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Button setting_Generation_Promt = new Button(\"Generate Promt\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TextArea textArea_Promt = new TextArea();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<Integer, String> str_temp = new HashMap<Integer, String>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String min_test_str1 = \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private ExecutorService executorService = Executors.newCachedThreadPool();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TextArea Evaluation_result_textArea = new TextArea();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String entityString = op.entitySetting;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String Totalstr_Prompt = \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String str_Prompt = \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String str2_Prompt = \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String str3_Prompt = \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String minstr_Prompt = \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public String setPrompt(String promptValue) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String input_Prompt1 = ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"User Interaction Information: \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"Generate entity examples of the system based on these entity information, try to generate reasonable and realistic data, please generate the number of entity instances according to the given values: \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ promptValue");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"Initial Prompts: \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"1. you only need to generate the ones in the square brackets, \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"2. you don\'t need to generate the ones not listed, \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"3. the attribute fields of the entity are initial capitalized, \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"4. the format “ ```Entity Data``` ” is not allowed, only the entity data needs to be returned. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"5. the generated value of the attribute field cannot be outside the type range of the attribute field: \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"int: The maximum length cannot exceed 8 digits; and 0 cannot be used as the beginning;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"boolean:true and false;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"float: The maximum length cannot exceed 8 digits; \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"LocalDate: 0001-01-01 to 9999-12-31. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"6. the entity is returned in the format of a yaml file, \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"7. please note that the entity information in the generated data is unique and cannot be repeated. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"And the following cases cannot occur:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"1. Data with the same name cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"2. Data with the same ID cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"3. Entity\'s name with letters can not appear, for example \\\"Item 1\\\", \\\"Store 2\\\", \\\" Supplier 3\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"4. Entity\'s name with numbers can not appear, for example \\\"Item A\\\", \\\"Store B\\\", \\\" Supplier C\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"5. Double quotes can not appear.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"Domain Entity Information: \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"Below is all the entity information given, please generate according to the number of entities above, no need to generate more than the others: \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ entityString");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"Output Format Information\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"The yaml data is in this format: \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"Item: \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"- Barcode: 123455690\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"  Name: Backpack\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"  Price: 49.99\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"  StockNumber: 20\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"  OrderPrice: 39.99\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"- Barcode: 127895489\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"  Name: apple\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"  Price: 49.99\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"  StockNumber: 20\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"  OrderPrice: 39.99\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return input_Prompt1;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void fun(String Totalstr, String minstr, String str2, String str3, String ProxyPort, String openaiKey) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("HashMap<String, Integer> returnEntityNumber_Totalstr =  ReturnEntityNumber(Totalstr);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("executorService.submit(new Runnable() {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("if(!str_temp.isEmpty()) ");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("for(int i = 1 ; i <=str_temp.size(); i++) ");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t\t");
    _builder.append("if(AI_model.equals(\"gpt-3.5-turbo\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"send str Chat...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("if(!ProxyPort.equals(\"no\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t    \t\t\t");
    _builder.append("OpenAiSpeaker.PropertyKey = ProxyPort;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("if(!openaiKey.equals(\"\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            \t");
    _builder.append("OpenAiSpeaker.openAiKey = openaiKey;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            \t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            \t");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t            ");
    _builder.append("System.out.println(\"str_temp.get(i): \" + str_temp.get(i));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t            ");
    _builder.append("String return_test =  op.Chat_ReturnMessage(str_temp.get(i)); \t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t            ");
    _builder.append("test_str1 = test_str1 +\"\\r\\n\" + return_test;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t\t");
    _builder.append("if(AI_model.equals(\"gpt-4\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"send str gpt-4 Chat...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("if(!ProxyPort.equals(\"no\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t    \t\t\t");
    _builder.append("OpenAiSpeaker.PropertyKey = ProxyPort;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("if(!openaiKey.equals(\"\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            \t");
    _builder.append("OpenAiSpeaker.openAiKey = openaiKey;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            \t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            \t");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t            ");
    _builder.append("System.out.println(\"str_temp.get(i): \" + str_temp.get(i));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t            ");
    _builder.append("String return_test =  op.GPT4_Chat_ReturnMessage(str_temp.get(i)); \t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t            ");
    _builder.append("test_str1 = test_str1 +\"\\r\\n\" + return_test;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t\t");
    _builder.append("if(AI_model.equals(\"gpt-4o\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"send str gpt-4o Chat...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("if(!ProxyPort.equals(\"no\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t    \t\t\t");
    _builder.append("OpenAiSpeaker.PropertyKey = ProxyPort;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("if(!openaiKey.equals(\"\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            \t");
    _builder.append("OpenAiSpeaker.openAiKey = openaiKey;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            \t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            \t");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t            ");
    _builder.append("System.out.println(\"str_temp.get(i): \" + str_temp.get(i));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t            ");
    _builder.append("String return_test =  op.GPT4o_Chat_ReturnMessage(str_temp.get(i)); \t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t            ");
    _builder.append("test_str1 = test_str1 +\"\\r\\n\" + return_test;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("if(!minstr.isEmpty()) ");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("if(AI_model.equals(\"gpt-3.5-turbo\")) ");
    _builder.newLine();
    _builder.append("\t\t\t        \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t        \t\t\t");
    _builder.append("if(!openaiKey.equals(\"\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t\t");
    _builder.append("System.out.println(\"进来了minstr，gpt-3.5-turbo, 为最后一批小于40的，是: \"+minstr);");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("if(!ProxyPort.equals(\"no\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t\t");
    _builder.append("OpenAiSpeaker.PropertyKey = ProxyPort;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t\t");
    _builder.append("OpenAiSpeaker.openAiKey = openaiKey;");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t\t");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t\t");
    _builder.append("min_test_str1 =  op.Chat_ReturnMessage(minstr); \t");
    _builder.newLine();
    _builder.append("\t\t\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("if(AI_model.equals(\"gpt-4\")) ");
    _builder.newLine();
    _builder.append("\t\t\t        \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t        \t\t\t");
    _builder.append("if(!openaiKey.equals(\"\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t\t");
    _builder.append("System.out.println(\"进来了minstr，gpt-4, 为最后一批小于40的，是: \"+minstr);");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("if(!ProxyPort.equals(\"no\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t\t");
    _builder.append("OpenAiSpeaker.PropertyKey = ProxyPort;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t\t");
    _builder.append("OpenAiSpeaker.openAiKey = openaiKey;");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t\t");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t\t");
    _builder.append("min_test_str1 =  op.GPT4_Chat_ReturnMessage(minstr); \t");
    _builder.newLine();
    _builder.append("\t\t\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("if(AI_model.equals(\"gpt-4o\")) ");
    _builder.newLine();
    _builder.append("\t\t\t        \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t        \t\t\t");
    _builder.append("if(!openaiKey.equals(\"\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t\t");
    _builder.append("System.out.println(\"进来了minstr，gpt-4o, 为最后一批小于40的，是: \"+minstr);");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("if(!ProxyPort.equals(\"no\")) ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t\t");
    _builder.append("OpenAiSpeaker.PropertyKey = ProxyPort;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t\t");
    _builder.append("OpenAiSpeaker.openAiKey = openaiKey;");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t\t");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t\t");
    _builder.append("min_test_str1 =  op.GPT4o_Chat_ReturnMessage(minstr); \t");
    _builder.newLine();
    _builder.append("\t\t\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("System.out.println(\"minstr为空！\");");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("executorService.submit(new Runnable() {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("if(!str2.isEmpty()) ");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("HashMap<String, Integer> returnEntityNumber_str2 =  ReturnEntityNumber(str2);");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("Set<String> key_str2 = returnEntityNumber_str2.keySet();");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("for (String string_str2_entity : key_str2) ");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t        \t\t\t");
    _builder.append("int entityValue = returnEntityNumber_str2.get(string_str2_entity); ");
    _builder.newLine();
    _builder.append("\t        \t\t\t\t");
    _builder.append("if(AI_model.equals(\"gpt-3.5-turbo\")) ");
    _builder.newLine();
    _builder.append("\t        \t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("if(!ProxyPort.equals(\"no\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t\t");
    _builder.append("OpenAiSpeaker.PropertyKey = ProxyPort;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t\t");
    _builder.append("System.out.println(\"OpenAiSpeaker.PropertyKey: \"+OpenAiSpeaker.PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t");
    _builder.append("OpenAiSpeaker.openAiKey = openaiKey;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("String return_test =  op.Large_Chat_ReturnMessage(string_str2_entity,entityValue); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("test_str2 = test_str2 +\"\\r\\n\" + return_test;");
    _builder.newLine();
    _builder.append("\t        \t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        \t\t\t\t");
    _builder.append("if(AI_model.equals(\"gpt-4\")) ");
    _builder.newLine();
    _builder.append("\t        \t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t        \t\t\t\t\t");
    _builder.append("System.out.println(\"gpt-4\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("if(!ProxyPort.equals(\"no\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t\t");
    _builder.append("OpenAiSpeaker.PropertyKey = ProxyPort;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t\t");
    _builder.append("System.out.println(\"OpenAiSpeaker.PropertyKey: \"+OpenAiSpeaker.PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t");
    _builder.append("OpenAiSpeaker.openAiKey = openaiKey;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("String return_test =  op.GPT4_Large_Chat_ReturnMessage(string_str2_entity,entityValue); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("test_str2 = test_str2 +\"\\r\\n\" + return_test;");
    _builder.newLine();
    _builder.append("\t        \t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        \t\t\t\t");
    _builder.append("if(AI_model.equals(\"gpt-4o\")) ");
    _builder.newLine();
    _builder.append("\t        \t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t        \t\t\t\t\t");
    _builder.append("System.out.println(\"gpt-4o\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("if(!ProxyPort.equals(\"no\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t\t");
    _builder.append("OpenAiSpeaker.PropertyKey = ProxyPort;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t\t");
    _builder.append("System.out.println(\"OpenAiSpeaker.PropertyKey: \"+OpenAiSpeaker.PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t    \t\t");
    _builder.append("OpenAiSpeaker.openAiKey = openaiKey;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("String return_test =  op.GPT4o_Large_Chat_ReturnMessage(string_str2_entity, entityValue); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("test_str2 = test_str2 +\"\\r\\n\" + return_test;");
    _builder.newLine();
    _builder.append("\t        \t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("executorService.submit(new Runnable() {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void run() ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("if(!str3.isEmpty()) ");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("HashMap<String, Integer> returnEntityNumber_str3 =  ReturnEntityNumber(str3);");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("Set<String> key_str3 = returnEntityNumber_str3.keySet();");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("for (String string_str3_entity : key_str3) ");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t        \t\t\t");
    _builder.append("int entityValue = returnEntityNumber_str3.get(string_str3_entity);");
    _builder.newLine();
    _builder.append("\t\t        \t\t\t");
    _builder.append("if(AI_model.equals(\"gpt-3.5-turbo\")) {");
    _builder.newLine();
    _builder.append("    \t\t\t\t            ");
    _builder.append("if(!ProxyPort.equals(\"no\")) {");
    _builder.newLine();
    _builder.append("    \t\t\t\t    \t\t\t");
    _builder.append("OpenAiSpeaker.PropertyKey = ProxyPort;");
    _builder.newLine();
    _builder.append("    \t\t\t\t    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t\t\t    \t\t");
    _builder.append("OpenAiSpeaker.openAiKey = openaiKey;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("String return_test = op.Large_Chat_ReturnMessage(string_str3_entity,entityValue); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("test_str3 = test_str3 +\"\\r\\n\" + return_test;");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        \t\t\t");
    _builder.append("if(AI_model.equals(\"gpt-4\")) {");
    _builder.newLine();
    _builder.append("    \t\t\t\t            ");
    _builder.append("if(!ProxyPort.equals(\"no\")) {");
    _builder.newLine();
    _builder.append("    \t\t\t\t    \t\t\t");
    _builder.append("OpenAiSpeaker.PropertyKey = ProxyPort;");
    _builder.newLine();
    _builder.append("    \t\t\t\t    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t\t\t            ");
    _builder.append("System.out.println(\"gpt-4\");");
    _builder.newLine();
    _builder.append("    \t\t\t\t    \t\t");
    _builder.append("OpenAiSpeaker.openAiKey = openaiKey;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("String return_test = op.GPT4_Large_Chat_ReturnMessage(string_str3_entity,entityValue); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("test_str3 = test_str3 +\"\\r\\n\" + return_test;");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        \t\t\t");
    _builder.append("if(AI_model.equals(\"gpt-4o\")) {");
    _builder.newLine();
    _builder.append("    \t\t\t\t            ");
    _builder.append("if(!ProxyPort.equals(\"no\")) {");
    _builder.newLine();
    _builder.append("    \t\t\t\t    \t\t\t");
    _builder.append("OpenAiSpeaker.PropertyKey = ProxyPort;");
    _builder.newLine();
    _builder.append("    \t\t\t\t    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t\t\t            ");
    _builder.append("System.out.println(\"gpt-4o\");");
    _builder.newLine();
    _builder.append("    \t\t\t\t    \t\t");
    _builder.append("OpenAiSpeaker.openAiKey = openaiKey;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("String return_test = op.GPT4_Large_Chat_ReturnMessage(string_str3_entity,entityValue); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t            ");
    _builder.append("test_str3 = test_str3 +\"\\r\\n\" + return_test;");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("} ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("executorService.submit(new Runnable() {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t        \t");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("if(!str2.isEmpty()) ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t            \t");
    _builder.append("Thread.sleep(5000);");
    _builder.newLine();
    _builder.append("\t\t            \t");
    _builder.append("while(test_str2.isEmpty()) {");
    _builder.newLine();
    _builder.append("\t\t            \t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Thread.sleep(1000);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"send str2 request-...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Platform.runLater(() -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("+ \"Current State：It takes about four minute to generate, please wait a moment...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\ttextArea.setText(generatedData+\"\\r\\n\"+test_str2+\"\\r\\n\"+test_str3);//将输入的内容显示至屏幕上");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t            \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        \t");
    _builder.newLine();
    _builder.append("\t        \t");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("if(!str3.isEmpty()) ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("Thread.sleep(5000);");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("while(test_str3.isEmpty()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Thread.sleep(1000);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"send str3 request-...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Platform.runLater(() -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("+ \"Current State：It takes about four minute to generate, please wait a moment...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\ttextArea.setText(generatedData+\"\\r\\n\"+test_str2+\"\\r\\n\"+test_str3);//将输入的内容显示至屏幕上");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            \t");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(!minstr.isEmpty() && str_temp.isEmpty()) ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("while(min_test_str1.isEmpty()) {");
    _builder.newLine();
    _builder.append("\t\t\t            \t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("Thread.sleep(1000);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"send 1 request-...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("Platform.runLater(() -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("+ \"Current State：It takes about four minute to generate, please wait a moment...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t\t\t\t\t\ttextArea.setText(generatedData+\"\\r\\n\"+test_str2+\"\\r\\n\"+test_str3);//将输入的内容显示至屏幕上");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}else if(minstr.isEmpty() && !str_temp.isEmpty()){");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("while(test_str1.isEmpty()) ");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t            \t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Thread.sleep(1000);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"send 2 request-...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Platform.runLater(() -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("+ \"Current State：It takes about four minute to generate, please wait a moment...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\ttextArea.setText(generatedData+\"\\r\\n\"+test_str2+\"\\r\\n\"+test_str3);//将输入的内容显示至屏幕上");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("}else if(!minstr.isEmpty() && !str_temp.isEmpty()) {");
    _builder.newLine();
    _builder.append("\t\t    \t   ");
    _builder.append("while(min_test_str1.isEmpty() || test_str1.isEmpty()) ");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t            \t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Thread.sleep(1000);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"send 3 request-...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Platform.runLater(() -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("+ \"Current State：It takes about four minute to generate, please wait a moment...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\ttextArea.setText(generatedData+\"\\r\\n\"+test_str2+\"\\r\\n\"+test_str3);//将输入的内容显示至屏幕上");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("}else if(minstr.isEmpty() && str_temp.isEmpty()) {");
    _builder.newLine();
    _builder.append("\t\t    \t   ");
    _builder.append("System.out.println(\"Null to generate\");");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("//Please wait a moment, it is being generated...");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("System.out.println(\"--完了ssss...\");");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("Platform.runLater(new Runnable() {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("//更新JavaFX的主线程的代码放在此处");
    _builder.newLine();
    _builder.append("//\t                \tprogressIndicator.setProgress(1); // 停止动画");
    _builder.newLine();
    _builder.append("\t                \t");
    _builder.append("primaryStage123.close();");
    _builder.newLine();
    _builder.append("\t                \t");
    _builder.append("stagesss.getScene().getRoot().setDisable(false);");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("borderpane.setRight(vBox);");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t\t\t");
    _builder.append("generatedData =  min_test_str1+\"\\r\\n\"+test_str1+\"\\r\\n\"+test_str2+\"\\r\\n\"+test_str3;");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("// 定义正则表达式，匹配 yaml 块");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t        ");
    _builder.append("Pattern pattern = Pattern.compile(\"(?s)```yaml\\\\s*(.*?)\\\\s*```\", Pattern.CASE_INSENSITIVE);");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t        ");
    _builder.append("Matcher matcher = pattern.matcher(generatedData);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t    \t\t\t\t        ");
    _builder.append("if (matcher.find()) {");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t            ");
    _builder.append("// 提取 YAML 数据");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t            ");
    _builder.append("String yamlData = matcher.group(1).trim();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t    \t\t\t\t            ");
    _builder.append("// 去除单引号和双引号");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t            ");
    _builder.append("generatedData = yamlData.replaceAll(\"([\'\\\"])([^\'\\\"]*?)\\\\1\", \"$2\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t    \t\t\t\t            ");
    _builder.append("// 输出处理后的 YAML 数据");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t            ");
    _builder.append("System.out.println(\"提取的 YAML 数据（已去除包裹的引号111）：\\r\\n\" + generatedData);");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t            ");
    _builder.append("System.out.println(\"未找到 YAML 数据。\");");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t\t");
    _builder.append("textArea_returnData = EntityManager.YamlFilter(generatedData, returnEntityNumber_Totalstr , 1,\"\");");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"最终返回: \\r\\n \"+textArea_returnData);\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t");
    _builder.append("} catch (JsonProcessingException e) {");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t");
    _builder.append("if(!textArea_returnData.isEmpty()) {");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("        \t\t\t\t\t\t\t");
    _builder.append("OutFileString(textArea_returnData.toString(),\"D:/test_chat.yaml\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("generatedData = textArea_returnData;");
    _builder.newLine();
    _builder.append("    \t    \t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t\t");
    _builder.append("File file = new File(\"D:/test_chat.yaml\");");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t\t");
    _builder.append("Allmapper = EntityManager.loadFile(file,2);");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t        \t");
    _builder.append("Set<String> keys = Allmapper.keySet();");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t        \t");
    _builder.append("ObservableList<String> dataAllString = FXCollections.observableArrayList(keys);");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t        \t");
    _builder.append("leftTable.setItems(FXCollections.observableArrayList(dataAllString));");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t        \t");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t        \t");
    _builder.append("rightTable.refresh();");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t        \t");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t        \t\t");
    _builder.append("+ \"        Current State：Generation is complete!\");");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static void OutFileString(String cu,String filePath) throws IOException {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String a = cu.toString();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("OutputStream os = null;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("OutputStreamWriter ops = null;//添加了四个包");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BufferedWriter bw = null;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("File f1 = new File(filePath);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(!f1.exists()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("f1.getParentFile().mkdirs();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("os = new FileOutputStream(f1);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("ops = new OutputStreamWriter(os);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("bw = new BufferedWriter(ops);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("bw.write(a);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("bw.newLine();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("bw.flush();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("catch(FileNotFoundException e){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("catch(IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\" 生成完毕 successfulString!!!\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}//OutFile");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void start(Stage primaryStage){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Map<String, List> AllEntityAttributes = new HashMap<String, List>();");
    _builder.newLine();
    {
      for(final Entity entitysss : sEntity) {
        _builder.append("\t \t\t");
        _builder.append("EntityNumber i");
        String _name = entitysss.getName();
        _builder.append(_name, "\t \t\t");
        _builder.append(" = new  EntityNumber();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t        ");
        _builder.append("i");
        String _name_1 = entitysss.getName();
        _builder.append(_name_1, "\t \t        ");
        _builder.append(".setName(\"");
        String _name_2 = entitysss.getName();
        _builder.append(_name_2, "\t \t        ");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t        ");
        _builder.append("i");
        String _name_3 = entitysss.getName();
        _builder.append(_name_3, "\t \t        ");
        _builder.append(".setNumber(2);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t        ");
        _builder.append("i");
        String _name_4 = entitysss.getName();
        _builder.append(_name_4, "\t \t        ");
        _builder.append(".setCharacter(\"\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t        ");
        _builder.append("EntityNumberInstances.add(i");
        String _name_5 = entitysss.getName();
        _builder.append(_name_5, "\t \t        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t        ");
        _builder.append("List<String> ");
        String _name_6 = entitysss.getName();
        _builder.append(_name_6, "\t \t        ");
        _builder.append("Attributes = Arrays.asList(");
        {
          EList<Attribute> _attributes = entitysss.getAttributes();
          for(final Attribute attribute : _attributes) {
            _builder.append(" \"");
            String _name_7 = attribute.getName();
            _builder.append(_name_7, "\t \t        ");
            _builder.append("\",");
          }
        }
        _builder.append(" \"\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t        ");
        _builder.append("AllEntityAttributes.put(\"");
        String _name_8 = entitysss.getName();
        _builder.append(_name_8, "\t \t        ");
        _builder.append("\", ");
        String _name_9 = entitysss.getName();
        _builder.append(_name_9, "\t \t        ");
        _builder.append("Attributes);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      for(final Entity entitysss_1 : sEntity) {
        _builder.append("\t \t\t");
        _builder.append("EntityNumber i");
        String _name_10 = entitysss_1.getName();
        _builder.append(_name_10, "\t \t\t");
        _builder.append(" = new  EntityNumber();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t\t");
        _builder.append("ssssssssssssssss");
        _builder.newLine();
      }
    }
    _builder.append(" \t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("statusLabel = new Label(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \"                              Current State：No data generated...\");            ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("statusLabel.setPrefHeight(100);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t// 添加边框");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\tstatusLabel.setStyle(\"-fx-border-color: black; -fx-border-width: 2px;\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t// 添加背景");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\tstatusLabel.setStyle(\"-fx-background-color: #FFFFFF;\");  // 使用颜色值");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\tstatusLabel.setAlignment(Pos.CENTER);");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("borderpane = new BorderPane();");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("textArea=new TextArea(\"Initial data generation\");//中间部分，显示生成的数据和各个按钮：chatgpt、notionAI");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("textArea.setWrapText(true);//实现自动换行");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("vBox=new VBox(10);//设置间距为15");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("vBox.setPadding(new Insets(6,0,0,0));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("vBox.setPrefWidth(180);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("Button Generation = new Button(\"Generation Setting\");//设置按钮名称");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("yaml_view = new Button(\"Yaml View\");");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("table_view = new Button(\"Table View\");");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("Button load=new Button(\"Load Data\");");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("Generation.setPrefWidth(130);//设置按钮宽度");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("yaml_view.setPrefWidth(130);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("table_view.setPrefWidth(130);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("load.setPrefWidth(180);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("Label models_Label = new Label(\"Model\");");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("models_Label.setFont(new Font(\"Arial\", 15));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("ChoiceBox<String> choiceBox = new ChoiceBox<>();");
    _builder.newLine();
    _builder.append("//\t        ,\"gpt-4\"");
    _builder.newLine();
    _builder.append("\t         ");
    _builder.append("choiceBox.getItems().addAll(\"gpt-3.5-turbo\",\"gpt-4\",\"gpt-4o\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//,\"text-davinci-003\",\"text-davinci-002\"");
    _builder.newLine();
    _builder.append("//\t        choiceBox.getSelectionModel().select(0);//默认下拉框选中第0项");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("choiceBox.setPrefWidth(137);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("choiceBox.setPrefHeight(27);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("choiceBox.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("System.out.println(\"Selected option: \" + newValue);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("ObservableList<String> dataleftTable = FXCollections.observableArrayList();");
    _builder.newLine();
    _builder.append("\t        \t");
    _builder.append("leftTable.setItems(FXCollections.observableArrayList(dataleftTable));");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("rightTable.getColumns().clear();");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("AI_model = newValue;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("choiceBox.setStyle(\"-fx-font-family: Arial; -fx-font-size: 14px; -fx-font-weight: bold; -fx-text-fill: red;\");");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("// 设置ChoiceBox的背景色");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("Label Proxy_Label = new Label(\"Proxy Port: \");");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("Proxy_Label.setFont(new Font(\"Arial\", 15));");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("Proxy_Label.setPrefWidth(90);");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("Proxy_Label.setPadding(new Insets(10,0,0,0));");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.newLine();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("TextArea ProxyPortArea = new TextArea();");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("ProxyPortArea.setText(\"no\");");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("ProxyPortArea.setPrefHeight(1);");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("ProxyPortArea.setPrefWidth(40); ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("Label Proxy_openAiKey = new Label(\"OpenAiKey: \");");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("Proxy_openAiKey.setFont(new Font(\"Arial\", 15));");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("Proxy_openAiKey.setPrefWidth(90);");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("Proxy_openAiKey.setPadding(new Insets(20,0,0,0));");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("TextArea ProxyPortArea_openAiKey = new TextArea();");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("ProxyPortArea_openAiKey.setText(\"\");");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("ProxyPortArea_openAiKey.setPrefWidth(40); ");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("ProxyPortArea_openAiKey.setPrefHeight(20); ");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("leftTable = new TableView<>();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("leftTable.setPrefWidth(235);");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("rightTable = new TableView<>();");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("rightTable.setPrefWidth(575);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("// 创建表格列");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("TableColumn<String,String> column = new TableColumn<>(\"Entity\");");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("column.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue())); // 绑定数据源，这里为空字符串");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("column.setPrefWidth(110);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("leftTable.getColumns().add(column); // 添加到 leftTable 中");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("leftTable.getColumns().forEach(c -> c.setVisible(false));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("column.setVisible(true);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//      leftTable.setItems(FXCollections.observableArrayList(dataAllString));");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("ObservableList<String> dataleftTable = FXCollections.observableArrayList();");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("leftTable.setItems(FXCollections.observableArrayList(dataleftTable));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("column.setCellFactory(e -> {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("return new TableCell<String, String>() {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("protected void updateItem(String item, boolean empty) {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("super.updateItem(item, empty);");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("if (empty || item == null) {");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("setText(null);");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("setGraphic(null);");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("setText(item);");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("setAlignment(Pos.CENTER); // 设置单元格文本居中");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("leftTable.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> {");
    _builder.newLine();
    _builder.append(" \t\t    ");
    _builder.append("// 获取当前选择的实体名称");
    _builder.newLine();
    _builder.append(" \t\t    ");
    _builder.append("String selectedEntity = leftTable.getSelectionModel().getSelectedItem();");
    _builder.newLine();
    _builder.append(" \t\t    ");
    _builder.append("// 获取当前实体对应的对象列表");
    _builder.newLine();
    _builder.append(" \t\t    ");
    _builder.append("List<Object> objects = Allmapper.get(selectedEntity);");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" \t\t    ");
    _builder.append("// 创建表格列，并添加到右边的表格中");
    _builder.newLine();
    _builder.append(" \t\t    ");
    _builder.append("rightTable.getColumns().clear();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("          \t\t ");
    _builder.newLine();
    _builder.append(" \t\t    ");
    _builder.append("for (Field field : objects.get(0).getClass().getDeclaredFields()) {");
    _builder.newLine();
    _builder.append(" \t\t    \t");
    _builder.append("if(AllEntityAttributes.get(selectedEntity).contains(field.getName()))");
    _builder.newLine();
    _builder.append(" \t\t    \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append(" \t\t    \t\t");
    _builder.append("TableColumn<Object, Object> col = new TableColumn<>(field.getName());");
    _builder.newLine();
    _builder.append("\t \t\t        ");
    _builder.append("col.setCellValueFactory(new PropertyValueFactory<>(field.getName()));");
    _builder.newLine();
    _builder.append("\t \t\t        ");
    _builder.append("col.setCellFactory(e -> {");
    _builder.newLine();
    _builder.append("\t \t\t            ");
    _builder.append("return new TableCell<Object, Object>() {");
    _builder.newLine();
    _builder.append("\t \t\t                ");
    _builder.append("protected void updateItem(Object item, boolean empty) {");
    _builder.newLine();
    _builder.append("\t \t\t                    ");
    _builder.append("super.updateItem(item, empty);");
    _builder.newLine();
    _builder.append("\t \t\t                    ");
    _builder.append("if (empty || item == null) {");
    _builder.newLine();
    _builder.append("\t \t\t                        ");
    _builder.append("setText(null);");
    _builder.newLine();
    _builder.append("\t \t\t                        ");
    _builder.append("setGraphic(null);");
    _builder.newLine();
    _builder.append("\t \t\t                    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t \t\t                        ");
    _builder.append("setText(item.toString());");
    _builder.newLine();
    _builder.append("\t \t\t                        ");
    _builder.append("setAlignment(Pos.CENTER); // 设置单元格文本居中");
    _builder.newLine();
    _builder.append("\t \t\t                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t \t\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t \t\t            ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t \t\t        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t \t\t        ");
    _builder.append("rightTable.setEditable(true);");
    _builder.newLine();
    _builder.append("\t \t\t        ");
    _builder.append("col.setCellFactory(TextFieldTableCell.forTableColumn(new StringConverter<Object>() {");
    _builder.newLine();
    _builder.append("\t \t\t           ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t \t\t          ");
    _builder.append("public String toString(Object object) {");
    _builder.newLine();
    _builder.append("\t \t\t              ");
    _builder.append("return object.toString();");
    _builder.newLine();
    _builder.append("\t \t\t          ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t \t\t          ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t \t\t          ");
    _builder.append("public Object fromString(String string) {");
    _builder.newLine();
    _builder.append("\t \t\t              ");
    _builder.append("return string;");
    _builder.newLine();
    _builder.append("\t \t\t          ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t \t\t      ");
    _builder.append("}));");
    _builder.newLine();
    _builder.append("\t \t\t       ");
    _builder.append("col.setOnEditCommit(event -> {");
    _builder.newLine();
    _builder.append("\t \t\t    \t    ");
    _builder.append("// 处理表格中的编辑事件, 将修改后的数据保存到数据集合中");
    _builder.newLine();
    _builder.append("\t\t \t            ");
    _builder.append("// 获取修改的行索引");
    _builder.newLine();
    _builder.append("\t\t \t            ");
    _builder.append("int rowIndex = event.getTablePosition().getRow();");
    _builder.newLine();
    _builder.append("\t\t \t            ");
    _builder.append("// 获取修改后的值");
    _builder.newLine();
    _builder.append("\t\t \t           ");
    _builder.append("Object newValue = event.getNewValue();");
    _builder.newLine();
    _builder.append("\t\t \t            ");
    _builder.append("// 根据索引更新对应的数据");
    _builder.newLine();
    _builder.append("\t\t\t \t       ");
    _builder.append("// 获取当前行对应的对象");
    _builder.newLine();
    _builder.append("\t\t \t          ");
    _builder.append("Object selectedItem = rightTable.getItems().get(rowIndex);");
    _builder.newLine();
    _builder.append("\t\t \t          ");
    _builder.newLine();
    _builder.append("\t\t \t         ");
    _builder.append("String[] parts = selectedItem.getClass().getName().split(\"\\\\.\");");
    _builder.newLine();
    _builder.append("\t\t \t        ");
    _builder.append("String result = parts[parts.length - 1]; // 取最后一个元素");
    _builder.newLine();
    _builder.append("\t\t \t        ");
    _builder.append("System.out.println(\"Data saved! selected: \" + result); // ");
    _builder.newLine();
    _builder.append("\t\t \t         \t\t \t         ");
    _builder.newLine();
    _builder.append("\t\t \t          ");
    _builder.append("// 获取要更新的属性的 Field 对象");
    _builder.newLine();
    _builder.append("\t\t \t          ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Field fields = selectedItem.getClass().getDeclaredField(col.getText());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// 取消 Java 的访问权限检查");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("fields.setAccessible(true);");
    _builder.newLine();
    _builder.append("\t\t\t \t          ");
    _builder.append("// 更新属性值");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.append("System.out.println(\"Data saved! fields Type: \" + newValue.toString()+\"   \" +fields.getType());");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t Allmapper.replace(newVal, dataAllString)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.append("if( fields.getType().toString().equals(\"float\") ) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t ");
    _builder.append("fields.set(selectedItem, Float.parseFloat(newValue.toString()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.append("}else if( fields.getType().toString().equals(\"boolean\") ){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t ");
    _builder.append("fields.set(selectedItem, Boolean.parseBoolean(newValue.toString()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.append("}else if( fields.getType().toString().equals(\"int\") ){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t ");
    _builder.append("fields.set(selectedItem, Integer.parseInt(newValue.toString()) );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.append("}else if( fields.getType().toString().equals(\"class java.time.LocalDate\") ){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t ");
    _builder.append("DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t ");
    _builder.append("fields.set(selectedItem, LocalDate.parse(newValue.toString(), formatter) );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.append("}else if( fields.getType().toString().equals(\"class java.lang.String\") ){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t ");
    _builder.append("fields.set(selectedItem, newValue);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.append("}else ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t ");
    _builder.append("System.out.println(\"进来了枚举类: \" + fields.getType());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t ");
    _builder.append("fields.set(selectedItem, newValue);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.append("Allmapper.replace(result, (List<Object>)rightTable.getItems());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ \"                       Current State：Modified and saved!\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t     ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (NoSuchFieldException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (SecurityException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (IllegalArgumentException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (IllegalAccessException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t \t\t    \t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t \t\t     ");
    _builder.newLine();
    _builder.append("\t \t\t        ");
    _builder.append("rightTable.getColumns().add(col);");
    _builder.newLine();
    _builder.append(" \t\t    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t\t        ");
    _builder.newLine();
    _builder.append(" \t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t\t    ");
    _builder.newLine();
    _builder.append(" \t\t    ");
    _builder.newLine();
    _builder.append(" \t\t    ");
    _builder.append("// 将对象列表添加到右边的表格中");
    _builder.newLine();
    _builder.append(" \t\t    ");
    _builder.append("ObservableList<Object> datasss = FXCollections.observableArrayList(objects);");
    _builder.newLine();
    _builder.append(" \t\t    ");
    _builder.append("rightTable.setItems(datasss);");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("// saveButton.setOnAction(event -> {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 将修改后的数据保存到数据集合中");
    _builder.newLine();
    _builder.append(" \t\t\t");
    _builder.append("// EntityManager.loadMapper(Allmapper);");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("//  });");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Generation.setOnAction(o->{//设置鼠标点击事件,发送信息");
    _builder.newLine();
    _builder.append("            \t");
    _builder.newLine();
    _builder.append("           \t");
    _builder.append("textArea.setText(\"Please wait a moment, it is being generated...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("SettingTable.setPrefWidth(440);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("ObservableList<EntityNumber> dataEntityString = FXCollections.observableArrayList(EntityNumberInstances);");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("SettingTable.setItems(FXCollections.observableArrayList(dataEntityString));");
    _builder.newLine();
    _builder.append("            \t ");
    _builder.append("// 创建表格列");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("TableColumn<EntityNumber,String> column_SettingEntity = new TableColumn<>(\"Entity\");");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("column_SettingEntity.setCellValueFactory(new PropertyValueFactory<>(\"Name\")); // 绑定数据源，这里为空字符串");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("column_SettingEntity.setPrefWidth(100);");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("column_SettingEntity.setCellFactory(TextFieldTableCell.forTableColumn());");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("SettingTable.getColumns().add(column_SettingEntity); // 添加到 SettingTable 中");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("SettingTable.setEditable(true);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            \t");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("column_SettingEntity.setOnEditCommit(event -> {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 将修改后的数据保存到数据集合中");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("System.out.println(\"Data saved!\");");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 获取修改的行索引");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("int rowIndex = event.getTablePosition().getRow();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 获取修改后的值");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("String newValue = event.getNewValue();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 根据索引更新对应的数据");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("SettingTable.getItems().get(rowIndex).setName(newValue);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            \t");
    _builder.newLine();
    _builder.append("            \t");
    _builder.newLine();
    _builder.append("            \t");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("TableColumn<EntityNumber, Integer> column_EntityNumber = new TableColumn<>(\"Number\");");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("column_EntityNumber.setCellValueFactory(new PropertyValueFactory<>(\"Number\")); // cellData -> new SimpleStringProperty(cellData.getValue())绑定数据源，这里为空字符串");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("column_EntityNumber.setPrefWidth(100);");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("SettingTable.getColumns().add(column_EntityNumber); ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("// 创建可编辑的Spinner控件");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("column_EntityNumber.setCellFactory(col -> new TableCell<EntityNumber, Integer>() {");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("private final Spinner<Integer> spinner = new Spinner<>(0, 10000, 0);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("spinner.setEditable(true);");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("spinner.getEditor().textProperty().addListener((obs, oldValue, newValue) -> {");
    _builder.newLine();
    _builder.append("    \t                    ");
    _builder.append("if (!newValue.matches(\"\\\\d*\")) {");
    _builder.newLine();
    _builder.append("    \t                        ");
    _builder.append("spinner.getEditor().setText(oldValue);");
    _builder.newLine();
    _builder.append("    \t                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("spinner.valueProperty().addListener((obs, oldValue, newValue) -> {");
    _builder.newLine();
    _builder.append("    \t                    ");
    _builder.append("commitEdit(newValue);");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("setContentDisplay(ContentDisplay.GRAPHIC_ONLY);");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("setGraphic(spinner);");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("protected void updateItem(Integer item, boolean empty) {");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("super.updateItem(item, empty);");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("if (empty) {");
    _builder.newLine();
    _builder.append("    \t                    ");
    _builder.append("setText(null);");
    _builder.newLine();
    _builder.append("    \t                    ");
    _builder.append("setGraphic(null);");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("    \t                    ");
    _builder.append("spinner.getValueFactory().setValue(item);");
    _builder.newLine();
    _builder.append("    \t                    ");
    _builder.append("setGraphic(spinner);");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("public void commitEdit(Integer newValue) {");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("super.commitEdit(newValue);");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("TableView<EntityNumber> table = getTableView();");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("if (table != null) {");
    _builder.newLine();
    _builder.append("    \t                    ");
    _builder.append("table.requestFocus();");
    _builder.newLine();
    _builder.append("    \t                    ");
    _builder.append("table.getSelectionModel().select(getIndex());");
    _builder.newLine();
    _builder.append("    \t                    ");
    _builder.append("table.getFocusModel().focus(getIndex(), column_EntityNumber);");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("// 获取当前单元格所在行和列的索引");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("int rowIndex = getTableRow().getIndex();");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("// 获取当前表格中的数据");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("EntityNumber entity = getTableView().getItems().get(rowIndex);");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("// 更新数据");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("entity.setNumber(newValue);");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("public void cancelEdit() {");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("super.cancelEdit();");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("updateItem(getItem(), false);");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("public void startEdit() {");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("super.startEdit();");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("spinner.getValueFactory().setValue(getItem());");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("setContentDisplay(ContentDisplay.GRAPHIC_ONLY);");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("setGraphic(spinner);");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("spinner.getEditor().selectAll();");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("column_EntityNumber.setOnEditCommit(event -> {");
    _builder.newLine();
    _builder.append("                     ");
    _builder.append("// 将修改后的数据保存到数据集合中");
    _builder.newLine();
    _builder.append("                     ");
    _builder.append("System.out.println(\"Data saved!\");");
    _builder.newLine();
    _builder.append("                     ");
    _builder.append("// 获取修改的行索引");
    _builder.newLine();
    _builder.append("                     ");
    _builder.append("int rowIndex = event.getTablePosition().getRow();");
    _builder.newLine();
    _builder.append("                     ");
    _builder.append("// 获取修改后的值");
    _builder.newLine();
    _builder.append("                     ");
    _builder.append("Integer newValue = event.getNewValue();");
    _builder.newLine();
    _builder.append("                     ");
    _builder.append("// 根据索引更新对应的数据");
    _builder.newLine();
    _builder.append("                     ");
    _builder.append("SettingTable.getItems().get(rowIndex).setNumber(Integer.valueOf(newValue));");
    _builder.newLine();
    _builder.append("                 ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("TableColumn<EntityNumber,String> column_EntityCharacter = new TableColumn<>(\"Note\");");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("column_EntityCharacter.setCellValueFactory(new PropertyValueFactory<>(\"Character\")); // 绑定数据源，这里为空字符串");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("column_EntityCharacter.setPrefWidth(235);");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("column_EntityCharacter.setCellFactory(TextFieldTableCell.forTableColumn());");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("SettingTable.getColumns().add(column_EntityCharacter); // 添加到 SettingTable 中");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("column_EntityCharacter.setOnEditCommit(event -> {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 将修改后的数据保存到数据集合中");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("System.out.println(\"Data saved!\");");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 获取修改的行索引");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("int rowIndex = event.getTablePosition().getRow();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 获取修改后的值");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("String newValue = event.getNewValue();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 根据索引更新对应的数据");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("SettingTable.getItems().get(rowIndex).setCharacter(newValue);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            \t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("Stage primaryStage_Generation_Setting = new Stage();");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("setting_Generation_Promt.setPrefWidth(120);");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("setting_Generation_Promt.setOnAction(e->{//设置鼠标点击事件,发送信息");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("if(!ProxyPortArea_openAiKey.getText().equals(\"\")) {");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t\t   ");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ \"                       Current State：Generate Promt\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("GenerationLabel = new Label(\"It takes some time to generate, please wait a moment...\");            ");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("GenerationLabel.setPrefHeight(20);");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("GenerationLabel.setPrefWidth(400);");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("GenerationLabel.setPadding(new Insets(20,0,0,0));\t");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("GenerationLabel.setAlignment(Pos.CENTER);");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("textArea_Promt.setPrefHeight(370);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\tString testData = \"Generate entity examples of the system based on these entity information, Try to generate reasonable and realistic data, \"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"please generate the number of entity instances according to the given values: \"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"Store: 2, Storenote:(), ProductCatalog: 2, ProductCatalognote:(), CashDesk: 2, \"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"CashDesknote:(), Sale: 2, Salenote:(), Cashier: 2, Cashiernote:(), SalesLineItem: 2, \"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"SalesLineItemnote:(), Item: 2, Itemnote:(), Payment: 2, Paymentnote:(), CashPayment: 2, \"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"CashPaymentnote:(), CardPayment: 2, CardPaymentnote:(), OrderEntry: 2, OrderEntrynote:(), \"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"Supplier: 2, Suppliernote:(), OrderProduct: 2, OrderProductnote:(), \"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"you only need to generate the ones in the square brackets, and you don\'t need to generate the ones not listed, and the attribute fields of the entity are initial capitalized, And the generated value of the attribute field cannot be outside the type range of the attribute field: int: The maximum length cannot exceed 8 digits; and 0 cannot be used as the beginning;boolean:true and false; float: The maximum length cannot exceed 8 digits; LocalDate: 0001-01-01 to 9999-12-31. \\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"and the entity is returned in the format of a yaml file, and please note that the entity information in the generated data is unique and cannot be repeated. \\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"Below is all the entity information given, please generate according to the number of entities above, no need to generate more than the others. \"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"Store: (Id(int), Name(String), Address(String), IsOpened(boolean), );ProductCatalog: (Id(int), Name(String), );CashDesk: (Id(int), Name(String), IsOpened(boolean), );Sale: (Time(LocalDate), IsComplete(boolean), Amount(float), IsReadytoPay(boolean), );Cashier: (Id(int), Name(String), );SalesLineItem: (Quantity(int), Subamount(float), );Item: (Barcode(int), Name(String), Price(float), StockNumber(int), OrderPrice(float), );Payment: (AmountTendered(float), );CashPayment: (Balance(float), );CardPayment: (CardAccountNumber(String), ExpiryDate(LocalDate), );OrderEntry: (Quantity(int), SubAmount(float), );Supplier: (Id(int), Name(String), );OrderProduct: (Id(int), Time(LocalDate), OrderStatus( NEW,  RECEIVED,  REQUESTED, ), Amount(float), );The yaml data is in this format: \\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"Item: \\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"- Barcode: 123455690\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"  Name: Backpack\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"  Price: 49.99\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"  StockNumber: 20\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"  OrderPrice: 39.99\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"- Barcode: 127895489\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"  Name: apple\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"  Price: 49.99\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"  StockNumber: 20\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"  OrderPrice: 39.99\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"the following cases cannot occur:\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"1. Data with the same name cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"2. Data with the same ID cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"3. Entity\'s name with letters can not appear, for example \\\"Item 1\\\", \\\"Store 2\\\", \\\" Supplier 3\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"4. Entity\'s name with numbers can not appear, for example \\\"Item A\\\", \\\"Store B\\\", \\\" Supplier C\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t\t\t\t\t\t\t+ \"5. Double quotes can not appear.\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.append("int str_int_number = 0;");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.append("int  countstr = 0;");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.append("ObservableList<EntityNumber> allEntities = SettingTable.getItems();");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.append("for (EntityNumber entity : allEntities) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t \t\t\t\t\tstr = str  + entity.getName() + \": \" + entity.getNumber() + \", \"+entity.getName()+\"note:(\" + entity.getCharacter()+ \"), \";");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t");
    _builder.append("Totalstr_Prompt = Totalstr_Prompt  + entity.getName() + \": \" + entity.getNumber() + \", \"+entity.getName()+\"note:(\" + entity.getCharacter()+ \"), \";");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t");
    _builder.append("if(entity.getNumber() <=10) ");
    _builder.newLine();
    _builder.append("\t\t\t    \t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t");
    _builder.append("str_int_number = str_int_number + entity.getNumber();");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t");
    _builder.append("str_Prompt = str_Prompt  + entity.getName() + \": \" + entity.getNumber() + \", \"+entity.getName()+\"note:(\" + entity.getCharacter()+ \"), \";");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t");
    _builder.append("if(str_int_number > 40) ");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t\t");
    _builder.append("System.out.println(str_Prompt);");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t\t");
    _builder.append("countstr = countstr +1;");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t\t");
    _builder.append("str_temp.put(countstr, str_Prompt);");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t\t");
    _builder.append("str_Prompt = \"\";");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t\t");
    _builder.append("minstr_Prompt = \"\";");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t\t");
    _builder.append("str_int_number = 0;");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t");
    _builder.append("else ");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t\t");
    _builder.append("minstr_Prompt = minstr_Prompt  + entity.getName() + \": \" + entity.getNumber() + \", \"+entity.getName()+\"note:(\" + entity.getCharacter()+ \"), \";");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t    \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t");
    _builder.append("else if(10 < entity.getNumber() && entity.getNumber() <=20 ) {");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t\t");
    _builder.append("str2_Prompt = str2_Prompt  + entity.getName() + \": \" + entity.getNumber() + \", \"+entity.getName()+\"note:(\" + entity.getCharacter()+ \"), \";");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t    \t\t\t");
    _builder.append("else if(20 < entity.getNumber() && entity.getNumber() <=10000 ) {");
    _builder.newLine();
    _builder.append("\t\t\t    \t\t\t\t");
    _builder.append("str3_Prompt = str3_Prompt  + entity.getName() + \": \" + entity.getNumber() + \", \"+entity.getName()+\"note:(\" + entity.getCharacter()+ \"), \";");
    _builder.newLine();
    _builder.append("\t\t\t    \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.append("System.out.println(\"Totalstr_Prompt: \"+Totalstr_Prompt);");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.append("textArea_Promt.setText(setPrompt(Totalstr_Prompt));");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("textArea_Promt.setStyle(\"-fx-font-family: \'Arial\'; -fx-font-size: 14; \");//-fx-font-weight: bold;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("textArea_Promt.setWrapText(true);//自动换行");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(textArea_Promt.getText().isBlank() == true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("textArea_Promt.setText(\"Sorry, please regenerate.\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t        ");
    _builder.append("// 添加文本变化监听器，实时更新样式");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("textArea_Promt.addEventFilter(KeyEvent.KEY_RELEASED, event -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t            ");
    _builder.append("updateStyles(textArea_Promt);");
    _builder.newLine();
    _builder.append("\t\t\t\t        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("textArea_Promt.setPrefHeight(430);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("// 设置段落的样式");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ \"                       Current State：Prompt View\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("statusLabel.setPrefHeight(100);");
    _builder.newLine();
    _builder.append("\t\t \t\t      ");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.newLine();
    _builder.append("\t\t \t\t      ");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("// 创建一个可拉伸的 Region 占位符");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("Region spacer = new Region();");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("spacer.setPrefWidth(Region.USE_COMPUTED_SIZE);");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("// 将按钮和 Region 放入 HBox");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("HBox hBox = new HBox();");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("hBox.getChildren().addAll(spacer, setting_Generation);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("// 设置 HBox 的横向增长属性，确保 Region 拉伸，按钮在右侧");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("HBox.setHgrow(spacer, javafx.scene.layout.Priority.ALWAYS);");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("VBox scene123_vBox_Promt = new VBox();");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("scene123_vBox_Promt.getChildren().addAll(textArea_Promt,hBox);");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("scene123_vBox_Promt.setMargin(textArea_Promt, new Insets(5, 5, 5, 5));");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("scene123_vBox_Promt.setMargin(hBox, new Insets(8, 10, 0, 0));");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.newLine();
    _builder.append("\t\t \t\t    \t");
    _builder.append("//It takes about four minute to generate, please wait a moment...");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("Scene scene123_Promt = new Scene(scene123_vBox_Promt, 600, 480);");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("primaryStage123.setTitle(\"Prompt Generation\");");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("primaryStage123.setScene(scene123_Promt);");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("primaryStage123.show();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t \t\t      ");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t \t\t\t\t\t");
    _builder.append("Alert alert = new Alert(Alert.AlertType.INFORMATION);");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("alert.setContentText(\"Please enter OpenAIkey!\");");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("alert.show();");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("setting_Generation.setOnAction(e->{//设置鼠标点击事件,发送信息");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.append("if(!ProxyPortArea_openAiKey.getText().equals(\"\")) {");
    _builder.newLine();
    _builder.append("\t \t\t\t\t\t");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ \"                       Current State：Generation Setting\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.append("fun(Totalstr_Prompt, minstr_Prompt,str2_Prompt,str3_Prompt, ProxyPortArea.getText(), ProxyPortArea_openAiKey.getText());");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.append("progressIndicator.setProgress(-1); // 初始进度为0");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t \t\t    \t");
    _builder.append("// 创建一个ProgressIndicator控件并设置其进度为-1，以启动动画");
    _builder.newLine();
    _builder.append("\t\t \t\t    \t");
    _builder.append("ProgressIndicator progressIndicatorsss = new ProgressIndicator(-1);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t \t\t    \t");
    _builder.append("// 创建一个StackPane，并将ProgressIndicator控件放置其中");
    _builder.newLine();
    _builder.append("\t\t \t\t    \t");
    _builder.append("StackPane stackPane = new StackPane(progressIndicatorsss);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t \t\t    \t");
    _builder.append("// 将StackPane放置在BorderPane上方");
    _builder.newLine();
    _builder.append("\t\t \t\t    \t");
    _builder.append("stackPane.setPrefWidth(120);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t \t\t    \tborderpane.setRight(stackPane);");
    _builder.newLine();
    _builder.append("\t\t \t\t    \t");
    _builder.newLine();
    _builder.append("\t\t \t\t    \t");
    _builder.newLine();
    _builder.append("\t\t \t\t    \t");
    _builder.newLine();
    _builder.append("\t\t \t\t    \t");
    _builder.append("GenerationLabel = new Label(\"It takes some time to generate, please wait a moment...\");            ");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("GenerationLabel.setPrefHeight(20);");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("GenerationLabel.setPrefWidth(400);");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("GenerationLabel.setPadding(new Insets(20,0,0,0));\t");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("GenerationLabel.setAlignment(Pos.CENTER);");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.newLine();
    _builder.append("\t\t \t\t   ");
    _builder.append("// 创建表格");
    _builder.newLine();
    _builder.append("\t \t\t\t\t\t");
    _builder.append("String[][] data = {");
    _builder.newLine();
    _builder.append("\t\t \t\t                ");
    _builder.append("{\"YamL Number\", \"    Time\"},");
    _builder.newLine();
    _builder.append("\t\t \t\t                ");
    _builder.append("{\"       25\", \"    18 s\"},");
    _builder.newLine();
    _builder.append("\t\t \t\t                ");
    _builder.append("{\"      100\", \"  1.88 min\"},");
    _builder.newLine();
    _builder.append("\t\t \t\t                ");
    _builder.append("{\"      300\", \"  11.50 min\"},\t");
    _builder.newLine();
    _builder.append("\t\t \t\t                ");
    _builder.append("{\"      500\", \"  22.50 min\"},\t");
    _builder.newLine();
    _builder.append("\t\t \t\t                ");
    _builder.append("{\"     1000\", \"  53.47 min\"}");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("GridPane grid = new GridPane();");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("grid.setPadding(new Insets(10));");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("grid.setHgap(50);");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("grid.setVgap(10);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("// 填充表格");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("for (int i = 0; i < data.length; i++) {");
    _builder.newLine();
    _builder.append("\t\t \t\t            ");
    _builder.append("for (int j = 0; j < data[i].length; j++) {");
    _builder.newLine();
    _builder.append("\t\t \t\t                ");
    _builder.append("Text cell = new Text(data[i][j]);");
    _builder.newLine();
    _builder.append("\t\t \t\t                ");
    _builder.append("grid.add(cell, j, i);");
    _builder.newLine();
    _builder.append("\t\t \t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("grid.setAlignment(Pos.CENTER);");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("grid.setPadding(new Insets(15,0,0,0));");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("VBox scene123_vBox = new VBox();");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("scene123_vBox.getChildren().addAll(stackPane,GenerationLabel,grid);");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("scene123_vBox.setPadding(new Insets(15,0,0,0));");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.newLine();
    _builder.append("\t\t \t\t    \t");
    _builder.append("//It takes about four minute to generate, please wait a moment...");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("Scene scene123 = new Scene(scene123_vBox, 400, 280);");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("primaryStage123.setTitle(\"Generation\");");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("primaryStage123.setScene(scene123);");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.append("primaryStage123.show();");
    _builder.newLine();
    _builder.append("\t\t \t\t    \t");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.newLine();
    _builder.append("\t\t \t\t       ");
    _builder.append("stagesss.getScene().getRoot().setDisable(true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t \t\t       primaryStage.getScene().getRoot().setDisable(false);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t \t\t\t\t");
    _builder.append("primaryStage_Generation_Setting.fireEvent(");
    _builder.newLine();
    _builder.append("\t    \t        \t\t\t");
    _builder.append("new javafx.stage.WindowEvent(primaryStage_Generation_Setting, javafx.stage.WindowEvent.WINDOW_CLOSE_REQUEST)");
    _builder.newLine();
    _builder.append("\t    \t        \t");
    _builder.append(");");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t \t\t\t\t\t");
    _builder.append("Alert alert = new Alert(Alert.AlertType.INFORMATION);");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("alert.setContentText(\"Please enter OpenAIkey!\");");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("alert.show();");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("setting_Generation.setPrefWidth(100);");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("VBox Proxyroot_Key = new VBox(Proxy_Label, ProxyPortArea,Proxy_openAiKey,ProxyPortArea_openAiKey);");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("Proxyroot_Key.setSpacing(8);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.newLine();
    _builder.append("//\t \t\t\tVBox openAiKey_vbox = new VBox(Proxy_openAiKey,ProxyPortArea_openAiKey);");
    _builder.newLine();
    _builder.append("//\t \t\t\topenAiKey_vbox.setSpacing(10);");
    _builder.newLine();
    _builder.append("//\t \t\t\t");
    _builder.newLine();
    _builder.append("//\t \t\t\tVBox proxy_openaikey = new VBox(Proxyroot,openAiKey_vbox);");
    _builder.newLine();
    _builder.append("//\t \t\t\tproxy_openaikey.setSpacing(10);");
    _builder.newLine();
    _builder.append("//\t \t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("VBox root_editButton_openAiKey = new VBox(Proxyroot_Key,setting_Generation_Promt);");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("root_editButton_openAiKey.setSpacing(30);");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("HBox root_editButton = new HBox(SettingTable,root_editButton_openAiKey);");
    _builder.newLine();
    _builder.append("\t \t      ");
    _builder.append("root_editButton.setSpacing(6);");
    _builder.newLine();
    _builder.append("//\t \t     root_editButton.setAlignment(Pos.CENTER);");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("root_editButton.setMargin(setting_Generation_Promt, new Insets(271,0,0,5));");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("Scene scene_Generation_Setting = new Scene(root_editButton, 600, 300);");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("primaryStage_Generation_Setting.setScene(scene_Generation_Setting);");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("primaryStage_Generation_Setting.setTitle(\"        Generation SettingTable View\");");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("primaryStage_Generation_Setting.show();");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t         \t\t");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("load.setOnAction(o->{");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("EntityManager.loadMapper(Allmapper);");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("//模拟用户点击关闭功能，controller监听关闭并刷新");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("stagesss.fireEvent(");
    _builder.newLine();
    _builder.append("        \t        \t\t\t");
    _builder.append("new javafx.stage.WindowEvent(primaryStage, javafx.stage.WindowEvent.WINDOW_CLOSE_REQUEST)");
    _builder.newLine();
    _builder.append("        \t        \t");
    _builder.append(");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});//设置鼠标点击事件,点击Quit时退出");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 创建一个VBox来放置TableView和按钮");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("HBox hbox = new HBox(leftTable,rightTable);");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("vBox_status= new VBox(hbox, statusLabel);");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("yaml_view.setOnAction(o->{//设置鼠标点击事件,发送信息");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("     \t\t\t");
    _builder.append("//textArea.setText(generatedData);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("textArea.setPrefHeight(370);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// Create text area");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("textArea.setText(generatedData);");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// Create text flow for highlighting");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("textFlow = new TextFlow();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("textFlow.getChildren().addAll(createHighlightedText(generatedData));");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("scrollPane = new ScrollPane();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("scrollPane.setContent(textFlow);");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("textFlow.setOnMouseClicked((MouseEvent event) -> {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (event.getClickCount() == 2) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("Text text = (Text) event.getTarget();");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("text.setFill(Color.RED);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("text.setStyle(\"-fx-font-weight: bold;\");");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("leftTable.setPrefWidth(235);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("textFlow.setPrefWidth(600);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("textFlow.setPadding(new Insets(10,0,0,20));");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// 设置段落的样式");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("hbox.getChildren().clear();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("hbox.getChildren().addAll(leftTable,scrollPane);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ \"                       Current State：Yaml View\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("statusLabel.setPrefHeight(100);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("table_view.setOnAction(o->{//设置鼠标点击事件,发送信息");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("hbox.getChildren().clear();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("hbox.getChildren().addAll(leftTable,rightTable);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"                      Current State：Table View\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("Evaluation_editButton = new Button(\"Automatic \\r\\n\"");
    _builder.newLine();
    _builder.append("     \t\t\t\t");
    _builder.append("+ \"Evaluation\");");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("Evaluation_editButton.setPrefWidth(130);");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("Evaluation_editButton.setOnAction(o->{//设置鼠标点击事件,发送信息");
    _builder.newLine();
    _builder.append("     \t\t \t");
    _builder.newLine();
    _builder.append("     \t\t\t");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"                      Current State：Evaluation View\");");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("Stage primaryStage_editButton = new Stage();");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t   ");
    _builder.newLine();
    _builder.append("\t \t\t   ");
    _builder.append("Evaluation_result_textArea.setText(\"Please click on the Evaluation button on the right.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t \t\t   \t\t");
    _builder.append("+ textArea_returnData);");
    _builder.newLine();
    _builder.append("\t \t\t   ");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("Button quit_edit = new Button(\"Quit\");");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("Button re_generate = new Button(\"Regenerate\");");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("Button evaluation_button = new Button(\"Evaluation\");");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("evaluation_button.setMinWidth(85);");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("evaluation_button.setMinHeight(30);");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("quit_edit.setMinHeight(30);");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("quit_edit.setMinWidth(85);");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("re_generate.setMinHeight(30);");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("re_generate.setMinWidth(85);");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("quit_edit.setOnAction(e->{//设置鼠标点击事件,发送信息");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ \"                      Current State：Evaluation View\");");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.append("primaryStage_editButton.fireEvent(");
    _builder.newLine();
    _builder.append("    \t        \t\t\t");
    _builder.append("new javafx.stage.WindowEvent(primaryStage_editButton, javafx.stage.WindowEvent.WINDOW_CLOSE_REQUEST)");
    _builder.newLine();
    _builder.append("    \t        \t");
    _builder.append(");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("evaluation_button.setOnAction(e->{//设置鼠标点击事件,发送信息");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.append("if(textArea_returnData !=\"\") {");
    _builder.newLine();
    _builder.append("\t \t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t\t\t");
    _builder.append("showProgressIndicatorAndRequest();");
    _builder.newLine();
    _builder.append("\t\t \t\t        ");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t            \t\t");
    _builder.append("Alert alert = new Alert(Alert.AlertType.INFORMATION);");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("alert.setContentText(\"The data is empty, please generate it first!\");");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("alert.show();");
    _builder.newLine();
    _builder.append("\t \t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("re_generate.setOnAction(e->{//设置鼠标点击事件,发送信息");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("if(textArea_returnData!=\"\") ");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t            \t\t");
    _builder.append("if(Totalstr_Prompt!=\"\") {");
    _builder.newLine();
    _builder.append("\t            \t\t\t");
    _builder.append("System.out.println(\"start re_generate: \");");
    _builder.newLine();
    _builder.append("\t            \t\t\t");
    _builder.append("showProgressIndicatorAndRequest_Regenerate();");
    _builder.newLine();
    _builder.append("\t            \t\t\t");
    _builder.append("primaryStage_editButton.fireEvent(");
    _builder.newLine();
    _builder.append("\t        \t        \t\t\t");
    _builder.append("new javafx.stage.WindowEvent(primaryStage_editButton, javafx.stage.WindowEvent.WINDOW_CLOSE_REQUEST)");
    _builder.newLine();
    _builder.append("\t        \t        \t");
    _builder.append(");");
    _builder.newLine();
    _builder.append("\t            \t\t");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t            \t\t\t");
    _builder.append("Alert alert = new Alert(Alert.AlertType.INFORMATION);");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append("alert.setContentText(\"The data is empty, please generate it first!\");");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append("alert.show();");
    _builder.newLine();
    _builder.append("\t            \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t            \t\t");
    _builder.append("Alert alert = new Alert(Alert.AlertType.INFORMATION);");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("alert.setContentText(\"The data is empty, please generate it first!\");");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("alert.show();");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("}    ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t   ");
    _builder.append("Evaluation_result_textArea.setPrefWidth(410);");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("VBox vButton = new VBox(evaluation_button,re_generate,quit_edit);");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("vButton.setMargin(evaluation_button, new Insets(180,0,10,5));");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("vButton.setMargin(re_generate, new Insets(0,0,10,5));");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("vButton.setMargin(quit_edit, new Insets(0,0,0,5));");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("HBox root_editButton = new HBox(Evaluation_result_textArea,vButton);");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("root_editButton.setMargin(Evaluation_result_textArea, new Insets(5,0,5,5));");
    _builder.newLine();
    _builder.append("//\t \t       root_editButton.setMargin(re_generate, new Insets(150,0,0,5));");
    _builder.newLine();
    _builder.append("//\t \t       root_editButton.setMargin(quit_edit, new Insets(271,0,0,5));");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("Scene scene_editButton = new Scene(root_editButton, 510, 300);");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("primaryStage_editButton.setScene(scene_editButton);");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("primaryStage_editButton.setTitle(\"                                 Evaluation View\");");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.append("primaryStage_editButton.show();");
    _builder.newLine();
    _builder.append("\t \t        ");
    _builder.newLine();
    _builder.append("\t \t        ");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"                       Current State：Evaluation View\");");
    _builder.newLine();
    _builder.append("\t \t       ");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("BorderStroke borderStroke = new BorderStroke(");
    _builder.newLine();
    _builder.append("            \t\t");
    _builder.append("null, null,Color.GRAY,null,");
    _builder.newLine();
    _builder.append("            \t\t");
    _builder.append("null,null,BorderStrokeStyle.SOLID,null,");
    _builder.newLine();
    _builder.append("            \t\t");
    _builder.append("null,BorderWidths.DEFAULT,new Insets(0));");
    _builder.newLine();
    _builder.append("           ");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("VBox root = new VBox(5);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("root.getChildren().addAll(models_Label, choiceBox);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("root.setAlignment(Pos.BASELINE_CENTER);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("root.setPadding(new Insets(0,0,0,5));");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("VBox vBox_submit = new VBox(15);//设置间距为10");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox_submit.getChildren().addAll(root, Generation);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox_submit.setAlignment(Pos.CENTER);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox_submit.setBorder(new Border(borderStroke));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//        vBox_submit.setStyle(\"-fx-border-color: gray; -fx-border-width:0.5\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox_submit.setPadding(new Insets(5,0,20,0));");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Label Label_view = new Label(\"View:\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Label_view.setFont(new Font(\"Arial\", 15));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("HBox root_view = new HBox();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("root_view.getChildren().addAll(Label_view);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("root_view.setPadding(new Insets(0,0,0,0));");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("VBox vBox_view = new VBox(10);//设置间距为10");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox_view.getChildren().addAll(root_view,yaml_view,table_view);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox_view.setAlignment(Pos.CENTER);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox_view.setBorder(new Border(borderStroke));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox_view.setPadding(new Insets(0,5,20,5));");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Label Label_evaluation = new Label(\"Evaluation:\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Label_evaluation.setFont(new Font(\"Arial\", 15));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("HBox root_evaluation = new HBox();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("root_evaluation.getChildren().addAll(Label_evaluation);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("root_evaluation.setPadding(new Insets(0,0,0,0));");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("VBox vBox_evaluation = new VBox(10);//设置间距为10");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox_evaluation.getChildren().addAll(root_evaluation,Evaluation_editButton);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox_evaluation.setAlignment(Pos.CENTER);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox_evaluation.setBorder(new Border(borderStroke));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox_evaluation.setPadding(new Insets(0,0,17,5));");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Region spacer = new Region();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("VBox.setVgrow(spacer, Priority.ALWAYS); // 让 spacer 占据剩余空间");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox.getChildren().addAll(vBox_submit, vBox_view,vBox_evaluation, load);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox.setMargin(load, new Insets(-4,0,7,0));");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox.setAlignment(Pos.BASELINE_CENTER);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox.setAlignment(Pos.CENTER);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("vBox.setStyle(\"-fx-border-color: green;-fx-border-width:1.5\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("menuBar = new MenuBar();//创建一个新菜单栏");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("menuBar.prefWidthProperty().bind(primaryStage.widthProperty());//菜单与舞台宽度绑定");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Menu fileMenu = new Menu(\"File\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("MenuItem quit= new MenuItem(\"Load\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("quit.setOnAction((e) -> {");
    _builder.newLine();
    _builder.append("            \t\t");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("load.setStyle(\"-fx-background-color: #BDBDBD;-fx-font-weight: bold\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fileMenu.getItems().addAll(quit);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Menu helpMenu = new Menu(\"Help\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("MenuItem about =new MenuItem(\"About\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("about.setOnAction(o->{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ModalDialog imformation=new ModalDialog(primaryStage);//创建弹窗");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("helpMenu.getItems().addAll(about);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Menu theme = new Menu(\"theme\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("MenuItem dark = new MenuItem(\"Dark\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("dark.setOnAction(o->{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//            textArea.setStyle(\"-fx-background-color: gray;-fx-font-weight: bold;-fx-font-family: Consolas;\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("vBox.setStyle(\"-fx-background-color: gray; -fx-font-weight: bold\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("choiceBox.setStyle(\"-fx-background-color: white\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("yaml_view.setStyle(\"-fx-background-color: white\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Evaluation_editButton.setStyle(\"-fx-background-color: white\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("table_view.setStyle(\"-fx-background-color: white\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("load.setStyle(\"-fx-background-color: blue\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("theme.getItems().addAll(dark);");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("menuBar.getMenus().addAll(fileMenu,helpMenu,theme);");
    _builder.newLine();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("borderpane.setTop(menuBar);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//        borderpane.setBottom(textField);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("borderpane.setCenter(vBox_status);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("borderpane.setRight(vBox);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Scene scene=new Scene(borderpane, 800, 400);");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("stagesss.setScene(scene);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("stagesss.initStyle(StageStyle.DECORATED);//设置窗口风格:白色背景，带有最小化/最大化/关闭等有操作系统平台装饰(默认设置)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("stagesss.show();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("stagesss.setTitle(\"                                                                               \"");
    _builder.newLine();
    _builder.append("                    \t\t");
    _builder.append("+ \"          Initial data generation\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("private static Text[] createHighlightedText(String yamlString) {");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("String[] lines = yamlString.split(\"\\n\");");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("List<Text> highlightedTextList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("for (int i = 0; i < lines.length; i++) {");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("String line = lines[i];");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("String[] parts = line.split(\": \");");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("if (parts.length > 1) {");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("Text keyText = new Text(parts[0] + \": \");");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("keyText.setStyle(\"-fx-fill: darkcyan;\");");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("highlightedTextList.add(keyText);");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("Text valueText = new Text(parts[1] + \"\\n\");");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("valueText.setStyle(\"-fx-fill: #2F4F4F;\");");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("highlightedTextList.add(valueText);");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("Text text = new Text(line + \"\\n\");//-fx-font-weight: bold;");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("text.setStyle(\"-fx-fill: black;\");");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("highlightedTextList.add(text);");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("return highlightedTextList.toArray(new Text[0]);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("private void updateStyles(TextArea textArea) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String content = textArea.getText();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String[] lines = content.split(\"\\n\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("StringBuilder styledText = new StringBuilder();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (String line : lines) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("String[] parts = line.split(\": \");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (parts.length > 1) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 高亮键");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("styledText.append(\"-fx-fill: darkcyan;\").append(parts[0]).append(\": \");");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 高亮值");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("styledText.append(\"-fx-fill: #2F4F4F;\").append(parts[1]).append(\"\\n\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("styledText.append(\"-fx-fill: black;\").append(line).append(\"\\n\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 目前TextArea不支持富文本显示， 你可以用自定义控件模拟富文本的效果");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("//    \tOpenAiSpeaker.openAiKey = ProxyPortArea_openAiKey.getText();    \t");
    _builder.newLine();
    _builder.append("//    \tOpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("//    \tif(textArea_returnData!=\"\") {");
    _builder.newLine();
    _builder.append("//    \t\tString return_evaluation = \"\";");
    _builder.newLine();
    _builder.append("//    \t\treturn_evaluation =  op.GPT4o_Evaluation_ReturnMessage(textArea_returnData); \t");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("//\t\t      while( return_evaluation != \"\") {");
    _builder.newLine();
    _builder.append("//            \tprimaryStage123.close();");
    _builder.newLine();
    _builder.append("//            \tstagesss.getScene().getRoot().setDisable(false);");
    _builder.newLine();
    _builder.append("//\t\t      }");
    _builder.newLine();
    _builder.append("//            Evaluation_result_textArea.setText(return_evaluation);");
    _builder.newLine();
    _builder.append("//            ");
    _builder.newLine();
    _builder.append("//    \t}else {");
    _builder.newLine();
    _builder.append("//    \t\tAlert alert = new Alert(Alert.AlertType.INFORMATION);");
    _builder.newLine();
    _builder.append("//            alert.setContentText(\"The data is empty, please generate it first!\");");
    _builder.newLine();
    _builder.append("//            alert.show();");
    _builder.newLine();
    _builder.append("//    \t}  ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("// 创建显示 ProgressIndicator 和请求接口的函数");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private void showProgressIndicatorAndRequest() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 创建一个 ProgressIndicator，并设置其进度为 -1（无限循环）");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ProgressIndicator progressIndicator = new ProgressIndicator();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("progressIndicator.setProgress(-1);  // 无限进度动画");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 创建一个 StackPane，并将 ProgressIndicator 放在其中");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("StackPane stackPane = new StackPane(progressIndicator);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("stackPane.setPrefWidth(120);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("stackPane.setAlignment(Pos.CENTER);  // 设置 ProgressIndicator 居中");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 创建标签，提示用户等待");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Label generationLabel = new Label(\"It takes some time to evaluate, please wait a moment...\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("generationLabel.setPrefHeight(20);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("generationLabel.setPrefWidth(400);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("generationLabel.setPadding(new Insets(20, 0, 0, 0));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("generationLabel.setAlignment(Pos.CENTER);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 将 ProgressIndicator 和标签添加到 VBox 中");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("VBox sceneVBox = new VBox(10);  // 10px 的间距");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("sceneVBox.getChildren().addAll(stackPane, generationLabel);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("sceneVBox.setPadding(new Insets(15, 0, 0, 0));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("sceneVBox.setAlignment(Pos.CENTER);  // 设置 VBox 中心对齐");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 创建新的场景并显示到新窗口中");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Scene scene = new Scene(sceneVBox, 400, 280);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Stage progressStage = new Stage();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("progressStage.setTitle(\"Evaluation\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("progressStage.setScene(scene);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("progressStage.show();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 创建后台任务来模拟请求接口并获取响应");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Task<Void> task = new Task<Void>() {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("protected Void call() throws Exception {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 模拟接口请求的耗时操作 (例如：等待 4 秒)");
    _builder.newLine();
    _builder.append("                \t");
    _builder.newLine();
    _builder.append("                \t");
    _builder.append("if(textArea_returnData!=\"\") {");
    _builder.newLine();
    _builder.append("                \t\t");
    _builder.append("String return_evaluation = \"\";");
    _builder.newLine();
    _builder.append("                    \t");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("                \t\t");
    _builder.append("return_evaluation =  op.GPT4o_Evaluation_ReturnMessage(textArea_returnData);");
    _builder.newLine();
    _builder.append("                \t\t");
    _builder.append("Evaluation_result_textArea.setText(return_evaluation);");
    _builder.newLine();
    _builder.append("                \t");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("                \t\t");
    _builder.append("Alert alert = new Alert(Alert.AlertType.INFORMATION);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("alert.setContentText(\"The data is empty, please generate it first!\");");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("alert.show();");
    _builder.newLine();
    _builder.append("                \t");
    _builder.append("}  ");
    _builder.newLine();
    _builder.append("                \t");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 接口请求成功时返回");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("protected void succeeded() {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 当任务成功时，取消进度条动画并关闭窗口");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("progressStage.close();  // 关闭进度条窗口");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("protected void failed() {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 如果任务失败，也可以处理取消进度条的逻辑");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("progressStage.close();  // 关闭进度条窗口");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("System.out.println(\"Request failed.\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 在后台线程中启动任务");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("new Thread(task).start();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("// 创建显示 ProgressIndicator 和请求接口的函数");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private void showProgressIndicatorAndRequest_Regenerate() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 创建一个 ProgressIndicator，并设置其进度为 -1（无限循环）");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ProgressIndicator progressIndicator = new ProgressIndicator();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("progressIndicator.setProgress(-1);  // 无限进度动画");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 创建一个 StackPane，并将 ProgressIndicator 放在其中");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("StackPane stackPane = new StackPane(progressIndicator);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("stackPane.setPrefWidth(120);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("stackPane.setAlignment(Pos.CENTER);  // 设置 ProgressIndicator 居中");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 创建标签，提示用户等待");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Label generationLabel = new Label(\"It takes some time to generate, please wait a moment...\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("generationLabel.setPrefHeight(20);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("generationLabel.setPrefWidth(400);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("generationLabel.setPadding(new Insets(20, 0, 0, 0));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("generationLabel.setAlignment(Pos.CENTER);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 将 ProgressIndicator 和标签添加到 VBox 中");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("VBox sceneVBox = new VBox(10);  // 10px 的间距");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("sceneVBox.getChildren().addAll(stackPane, generationLabel);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("sceneVBox.setPadding(new Insets(15, 0, 0, 0));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("sceneVBox.setAlignment(Pos.CENTER);  // 设置 VBox 中心对齐");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 创建新的场景并显示到新窗口中");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Scene scene = new Scene(sceneVBox, 400, 280);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Stage progressStage = new Stage();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("progressStage.setTitle(\"Regenerate\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("progressStage.setScene(scene);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("progressStage.show();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 创建后台任务来模拟请求接口并获取响应");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Task<Void> task = new Task<Void>() {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("protected Void call() throws Exception {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 模拟接口请求的耗时操作 (例如：等待 4 秒)");
    _builder.newLine();
    _builder.append("                \t");
    _builder.newLine();
    _builder.append("                \t");
    _builder.newLine();
    _builder.append("                \t\t");
    _builder.append("String return_n = \"\";");
    _builder.newLine();
    _builder.append("                    \t");
    _builder.append("OpenAiSpeaker op = new OpenAiSpeaker();");
    _builder.newLine();
    _builder.append("                    \t");
    _builder.append("return_n =  op.GPT4o_Chat_ReturnMessage(Totalstr_Prompt); \t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("                    \t");
    _builder.append("// 定义正则表达式模式，匹配可能的 YAML 数据块");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Pattern pattern = Pattern.compile(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t    ");
    _builder.append("\"(?s)(?:```yaml|---)?\\\\s*(.*?)\\\\s*(?:```|---|$)\", Pattern.CASE_INSENSITIVE);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Matcher matcher = pattern.matcher(return_n);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (matcher.find()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t    ");
    _builder.append("String yamlData = matcher.group(1).trim();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t    ");
    _builder.append("// 使用正则表达式去除包裹在键名和简单值周围的引号，包括单引号、双引号和三引号");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t    ");
    _builder.append("return_n = yamlData.replaceAll(\"([\'\\\"]{1,3})([^\'\\\"]*?)\\\\1\", \"$2\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t            ");
    _builder.append("System.out.println(\"提取的 YAML 数据（已去除包裹的引号）：\");");
    _builder.newLine();
    _builder.append("\t\t\t\t        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t            ");
    _builder.append("System.out.println(\"未找到 YAML 数据。\");");
    _builder.newLine();
    _builder.append("\t\t\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t \t\t\t\t");
    _builder.append("int str_int_number = 0;");
    _builder.newLine();
    _builder.append("\t\t\t \t\t\t\t");
    _builder.append("int  countstr = 0;");
    _builder.newLine();
    _builder.append("\t\t\t \t\t\t\t");
    _builder.append("ObservableList<EntityNumber> allEntities = SettingTable.getItems();");
    _builder.newLine();
    _builder.append("\t\t\t \t\t\t\t");
    _builder.append("for (EntityNumber entity : allEntities) {");
    _builder.newLine();
    _builder.append("\t\t\t \t\t\t\t\t");
    _builder.append("Totalstr_Prompt = Totalstr_Prompt  + entity.getName() + \": \" + entity.getNumber() + \", \"+entity.getName()+\"note:(\" + entity.getCharacter()+ \"), \";");
    _builder.newLine();
    _builder.append("\t\t\t \t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t \t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t \t\t\t\t");
    _builder.append("System.out.println(\"Totalstr_Prompt: \"+Totalstr_Prompt);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("HashMap<String, Integer> returnEntityNumber_Totalstr =  ReturnEntityNumber(Totalstr_Prompt);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("textArea_returnData = EntityManager.YamlFilter(return_n, returnEntityNumber_Totalstr , 1,\"\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"最终返回: \\r\\n \"+textArea_returnData);\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} catch (JsonProcessingException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Platform.runLater(() -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("OutFileString(textArea_returnData.toString(),\"D:/test_chat.yaml\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("generatedData = textArea_returnData;");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("File file = new File(\"D:/test_chat.yaml\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("Allmapper = EntityManager.loadFile(file,2);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.append("Set<String> keys = Allmapper.keySet();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.append("ObservableList<String> dataAllString = FXCollections.observableArrayList(keys);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.append("leftTable.setItems(FXCollections.observableArrayList(dataAllString));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.append("rightTable.refresh();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.append("statusLabel.setText(\"                                           \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t\t");
    _builder.append("+ \"        Current State：Generation is complete!\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t        \t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (IOException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 接口请求成功时返回");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("protected void succeeded() {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 当任务成功时，取消进度条动画并关闭窗口");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("progressStage.close();  // 关闭进度条窗口");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("protected void failed() {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// 如果任务失败，也可以处理取消进度条的逻辑");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("progressStage.close();  // 关闭进度条窗口");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("System.out.println(\"Request failed.\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// 在后台线程中启动任务");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("new Thread(task).start();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("public static String file2String(final File file) throws IOException {");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("if (file.exists()) {");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("byte[] data = new byte[(int) file.length()];");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("boolean result;");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("FileInputStream inputStream = null;");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("inputStream = new FileInputStream(file);");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("int len = inputStream.read(data);");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("result = len == data.length;");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("if (inputStream != null) {");
    _builder.newLine();
    _builder.append("    \t                ");
    _builder.append("inputStream.close();");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("if (result) {");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("return new String(data);");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("class ModalDialog{");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("Button Quit;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("public ModalDialog(final  Stage Dialog){");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("Quit=new Button(\"Quit\");");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("Label label = new Label(\"\");");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("label.setWrapText(true);//控制自动换行");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("VBox vBox = new VBox(10);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("vBox.getChildren().addAll(label,Quit);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("vBox.setAlignment(Pos.CENTER);//使vBox居中");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("final Stage stage = new Stage();");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("stage.initOwner(Dialog);//指定所属的父窗口");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("stage.setTitle(\"About\");");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("stage.initModality(Modality.APPLICATION_MODAL);//指定窗口的状态:就是在关掉这个窗口之前无法操作主程序");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("Quit.setOnAction(o->stage.close());");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("Scene scene = new Scene(vBox);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("stage.setScene(scene);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("stage.setWidth(400);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("stage.setHeight(300);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("stage.show();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public static void main(String[]args)");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("launch(args);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("protected class EntityNumber {");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("/* all primary attributes */");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("private String Name;");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("/* all references */");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("private int Number; ");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("private String Character; ");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("/* all get and set functions */");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("public String getName() {");
    _builder.newLine();
    _builder.append("\t    \t    \t\t");
    _builder.append("return Name;");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("public void setName(String name) {");
    _builder.newLine();
    _builder.append("\t    \t    \t\t");
    _builder.append("this.Name = name;");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("public String getCharacter() {");
    _builder.newLine();
    _builder.append("\t    \t    \t\t");
    _builder.append("return Character;");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("public void setCharacter(String character) {");
    _builder.newLine();
    _builder.append("\t    \t    \t\t");
    _builder.append("this.Character = character;");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("/* all functions for reference*/");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("public int getNumber() {");
    _builder.newLine();
    _builder.append("\t    \t    \t\t");
    _builder.append("return Number;");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("public void setNumber(int number) {");
    _builder.newLine();
    _builder.append("\t    \t    \t\t");
    _builder.append("this.Number = number;");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.newLine();
    _builder.append("\t    \t    \t");
    _builder.newLine();
    _builder.append("\t    \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    \t    ");
    _builder.newLine();
    _builder.append("\t    \t    ");
    _builder.append("public static class Data {");
    _builder.newLine();
    _builder.append("\t    \t    \t        ");
    _builder.append("private final int quantity;");
    _builder.newLine();
    _builder.append("\t    \t    \t        ");
    _builder.append("private final String time;");
    _builder.newLine();
    _builder.append("\t    \t    ");
    _builder.newLine();
    _builder.append("\t    \t    \t        ");
    _builder.append("public Data(int quantity, String time) {");
    _builder.newLine();
    _builder.append("\t    \t    \t            ");
    _builder.append("this.quantity = quantity;");
    _builder.newLine();
    _builder.append("\t    \t    \t            ");
    _builder.append("this.time = time;");
    _builder.newLine();
    _builder.append("\t    \t    \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    \t    ");
    _builder.newLine();
    _builder.append("\t    \t    \t        ");
    _builder.append("public int getQuantity() {");
    _builder.newLine();
    _builder.append("\t    \t    \t            ");
    _builder.append("return quantity;");
    _builder.newLine();
    _builder.append("\t    \t    \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    \t    ");
    _builder.newLine();
    _builder.append("\t    \t    \t        ");
    _builder.append("public String getTime() {");
    _builder.newLine();
    _builder.append("\t    \t    \t            ");
    _builder.append("return time;");
    _builder.newLine();
    _builder.append("\t    \t    \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    \t    \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    \t    ");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("public static HashMap<String, Integer> ReturnEntityNumber(String entityNumber_String)");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("    \t    \t");
    _builder.append("HashMap<String, Integer> entities_Number_int = new HashMap<>();");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("Pattern pattern = Pattern.compile(\"(\\\\w+):\\\\s*(\\\\d+)\");");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("Matcher matcher = pattern.matcher(entityNumber_String);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("while (matcher.find()) {");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("String entity = matcher.group(1);");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("int value = Integer.parseInt(matcher.group(2));");
    _builder.newLine();
    _builder.append("    \t            ");
    _builder.append("entities_Number_int.put(entity, value);");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("return entities_Number_int;");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
  
  public String setOpenAiSpeaker(final Iterable<Entity> sEntity, final Iterable<Entity> ssEntity, final Iterable<Contract> sContract) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package gui;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.theokanning.openai.OpenAiService;");
    _builder.newLine();
    _builder.append("import com.theokanning.openai.completion.CompletionRequest;");
    _builder.newLine();
    _builder.append("import com.theokanning.openai.completion.chat.ChatCompletionRequest;");
    _builder.newLine();
    _builder.append("import com.theokanning.openai.completion.chat.ChatCompletionResult;");
    _builder.newLine();
    _builder.append("import com.theokanning.openai.completion.chat.ChatMessage;");
    _builder.newLine();
    _builder.append("import com.theokanning.openai.completion.chat.ChatMessageRole;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import cn.hutool.core.util.ObjectUtil;");
    _builder.newLine();
    _builder.append("import cn.hutool.json.JSONUtil;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.BufferedWriter;");
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.FileNotFoundException;");
    _builder.newLine();
    _builder.append("import java.io.FileOutputStream;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.OutputStream;");
    _builder.newLine();
    _builder.append("import java.io.OutputStreamWriter;");
    _builder.newLine();
    _builder.append("import java.time.Duration;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.yaml.snakeyaml.Yaml;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class OpenAiSpeaker {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static String openAiKey= \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static String PropertyKey= \"0\";");
    _builder.newLine();
    _builder.append("//\t\tprotected OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(60));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static void main(String ...args){");
    _builder.newLine();
    _builder.append("\t\t    \t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t     \t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("static String entitySetting = \"\"");
    _builder.newLine();
    {
      for(final Entity entity : ssEntity) {
        _builder.append("+ \"");
        String _name = entity.getName();
        _builder.append(_name);
        _builder.append(": (\"");
        _builder.newLineIfNotEmpty();
        {
          EList<Attribute> _attributes = entity.getAttributes();
          for(final Attribute attribute : _attributes) {
            {
              if ((((((!Objects.equal(this.compileType(attribute.getType()), "int")) && (!Objects.equal(this.compileType(attribute.getType()), "boolean"))) && (!Objects.equal(this.compileType(attribute.getType()), "float"))) && (!Objects.equal(this.compileType(attribute.getType()), "LocalDate"))) && (!Objects.equal(this.compileType(attribute.getType()), "String")))) {
                _builder.append("+ \"");
                String _name_1 = attribute.getName();
                _builder.append(_name_1);
                _builder.append("(");
                {
                  EList<EnumItem> _element = this.getElement(attribute.getType());
                  for(final EnumItem element : _element) {
                    _builder.append(" ");
                    String _name_2 = element.getName();
                    _builder.append(_name_2);
                    _builder.append(", ");
                  }
                }
                _builder.append("), \"");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("+ \"");
                String _name_3 = attribute.getName();
                _builder.append(_name_3);
                _builder.append("(");
                String _compileType = this.compileType(attribute.getType());
                _builder.append(_compileType);
                _builder.append("), \"");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t    \t");
        _builder.newLine();
        _builder.append("\t    \t");
        _builder.newLine();
        _builder.append("\t   \t ");
        _builder.append("+ \");\"");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t     \t");
    _builder.newLine();
    _builder.append("public static String Chat_ReturnMessage(String str){");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.newLine();
    _builder.append("\t    \t\t");
    _builder.append("if(!PropertyKey.equals(\"0\")) {");
    _builder.newLine();
    _builder.append("\t\t    \t\t");
    _builder.append("System.setProperty(\"http.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("System.setProperty(\"http.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("System.setProperty(\"https.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("System.setProperty(\"https.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("List<ChatMessage> chatMessages=new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),");
    _builder.newLine();
    _builder.append("\t\t        \t\t");
    _builder.append("\"You are a helpful assistant.\"");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("));");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append(".model(\"gpt-3.5-turbo\")");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append(".messages(chatMessages)");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append(".frequencyPenalty(0D)");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append(".presencePenalty(0D)");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append(".temperature(0D)");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append(".topP(0D)");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append(".maxTokens(3000)");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append(".build();");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("String input2 = \"Generate entity examples of the system based on these entity information, \"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"Try to generate reasonable and realistic data, \"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"please generate the number of entity instances according to the given values: \"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ str");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"you only need to generate the ones in the square brackets, \"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"and you don\'t need to generate the ones not listed, \"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"and the attribute fields of the entity are initial capitalized, \"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"And the generated value of the attribute field cannot be outside the type range of the attribute field: \"");
    _builder.newLine();
    _builder.append(" \t   \t\t ");
    _builder.append("+ \"int: The maximum length cannot exceed 8 digits; and 0 cannot be used as the beginning;\"");
    _builder.newLine();
    _builder.append(" \t   \t\t ");
    _builder.append("+ \"boolean:true and false; \"");
    _builder.newLine();
    _builder.append(" \t   \t\t ");
    _builder.append("+ \"float: The maximum length cannot exceed 8 digits; \"");
    _builder.newLine();
    _builder.append(" \t   \t\t ");
    _builder.append("+ \"LocalDate: 0001-01-01 to 9999-12-31. \\r\\n\"\t   \t\t ");
    _builder.newLine();
    _builder.append(" \t   \t\t ");
    _builder.append("+ \"and the entity is returned in the format of a yaml file, \"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"and please note that the entity information in the generated data is unique and cannot be repeated. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"Below is all the entity information given, please generate according to the number of entities above, \"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"no need to generate more than the others. \"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ entitySetting");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"The yaml data is in this format: \\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"Item: \\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"- Barcode: 123455690\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"  Name: Backpack\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"  Price: 49.99\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"  StockNumber: 20\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"  OrderPrice: 39.99\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"- Barcode: 127895489\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"  Name: apple\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"  Price: 49.99\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"  StockNumber: 20\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"  OrderPrice: 39.99\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"the following cases cannot occur:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"1. Data with the same name cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"2. Data with the same ID cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"3. Entity\'s name with letters can not appear, for example \\\"Item 1\\\", \\\"Store 2\\\", \\\" Supplier 3\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"4. Entity\'s name with numbers can not appear, for example \\\"Item A\\\", \\\"Store B\\\", \\\" Supplier C\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"5. Double quotes can not appear.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append(";");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("System.out.println(\"Chat_ReturnMessage: \"+input2);");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input2));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("chatCompletionRequest.setMessages(chatMessages);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("String generatedData = chatCompletionResult.getChoices().get(0).getMessage().getContent();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("System.out.println(generatedData);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("return generatedData;");
    _builder.newLine();
    _builder.append("    \t\t\t\t    \t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}//OutFile");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public static String Large_Chat_ReturnMessage(String str3, int intStr3){");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.newLine();
    _builder.append("\t\t    \t\t");
    _builder.append("if(!PropertyKey.equals(\"0\")) {");
    _builder.newLine();
    _builder.append("\t\t\t    \t\t");
    _builder.append("System.setProperty(\"http.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t\t\t\t        ");
    _builder.append("System.setProperty(\"http.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t\t\t        ");
    _builder.append("System.setProperty(\"https.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t\t\t\t        ");
    _builder.append("System.setProperty(\"https.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("List<ChatMessage> chatMessages=new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("//\"\"");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("String SYSTEM_input = \"You are a helpful assistant. \"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append(";");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("SYSTEM_input");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".model(\"gpt-3.5-turbo\")");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".messages(chatMessages)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".frequencyPenalty(0D)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".presencePenalty(0D)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".temperature(1D)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".topP(1D)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".maxTokens(3000)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".build();");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("double a=0; double b=0;");
    _builder.newLine();
    _builder.append("   \t\t\t       ");
    _builder.append("if(intStr3 >=200) {");
    _builder.newLine();
    _builder.append("   \t\t\t    \t   ");
    _builder.append("a = (intStr3*2) / 40; //取整");
    _builder.newLine();
    _builder.append("   \t\t\t    \t   ");
    _builder.append("b = (intStr3*2) % 40; //取余");
    _builder.newLine();
    _builder.append("   \t\t\t       ");
    _builder.append("}else if(intStr3 <200 && intStr3 >= 120) {");
    _builder.newLine();
    _builder.append("   \t\t\t    \t   ");
    _builder.append("a = (intStr3*1.5) / 40; //取整");
    _builder.newLine();
    _builder.append("   \t\t\t    \t   ");
    _builder.append("b = (intStr3*1.5) % 40; //取余");
    _builder.newLine();
    _builder.append("   \t\t\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t\t       ");
    _builder.append("else if(intStr3 <120 && intStr3 >= 80) {");
    _builder.newLine();
    _builder.append("   \t\t\t    \t   ");
    _builder.append("a = (intStr3*1.2) / 40; //取整");
    _builder.newLine();
    _builder.append("   \t\t\t    \t   ");
    _builder.append("b = (intStr3*1.2) % 40; //取余");
    _builder.newLine();
    _builder.append("   \t\t\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t\t       ");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("   \t\t\t    \t   ");
    _builder.append("a = intStr3/ 40; //取整");
    _builder.newLine();
    _builder.append("   \t\t\t    \t   ");
    _builder.append("b = intStr3 % 40; //取余");
    _builder.newLine();
    _builder.append("   \t\t\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t       ");
    _builder.append("String DataString = str3+\":\\r\\n\"+ \"\";");
    _builder.newLine();
    _builder.append("\t\t\t       ");
    _builder.newLine();
    _builder.append("\t\t\t       ");
    _builder.append("System.out.println(\"a and b：\"+ a +\" \"+ b);");
    _builder.newLine();
    _builder.append("\t\t\t       ");
    _builder.append("if(a != 0) ");
    _builder.newLine();
    _builder.append("\t\t\t       ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t    \t   ");
    _builder.append("String input_1 = \"You are a professional data generator, \"");
    _builder.newLine();
    _builder.append("\t\t\t\t  \t\t\t\t");
    _builder.append("+ \"and you must generate the required quantity according to the requirements:\"");
    _builder.newLine();
    _builder.append("\t\t\t\t  \t\t\t\t");
    _builder.append("+ \"Generate 40 entity examples of the system based on these entity information. \"");
    _builder.newLine();
    _builder.append("\t\t\t\t  \t\t\t\t");
    _builder.append("+ \"Try to generate reasonable and realistic data: \"");
    _builder.newLine();
    _builder.append("\t\t\t\t         \t\t");
    _builder.append("+ \"First, The generated value of the attribute field cannot be outside the type range of the attribute field: \"");
    _builder.newLine();
    _builder.append("\t\t\t\t         \t\t");
    _builder.append("+ \"int: The maximum length cannot exceed 8 digits, and 0 cannot be used as the beginning; \"");
    _builder.newLine();
    _builder.append("\t\t\t\t         \t\t");
    _builder.append("+ \"boolean:true and false; \"");
    _builder.newLine();
    _builder.append("\t\t\t\t         \t\t");
    _builder.append("+ \"float: The maximum length cannot exceed 8 digits; \"");
    _builder.newLine();
    _builder.append("\t\t\t\t         \t\t");
    _builder.append("+ \"LocalDate: 0001-01-01 to 9999-12-31. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t         \t\t");
    _builder.append("+ \"Second, The attribute fields of the entity are initial capitalized. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t         \t\t");
    _builder.append("+ \"Third, The preceding entity name is not required, the entity name must be omited.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t         \t\t");
    _builder.append("+ \"Fourth, The entity data  is directly  returned in the format of a yaml file, and the template of the generated data as follows (Please omit the entity  name) : \"");
    _builder.newLine();
    _builder.append("\t\t\t\t         \t\t");
    _builder.append("+ \"- Xxx: xxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t  \t\t        ");
    _builder.append("+ \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t  \t\t        ");
    _builder.append("+ \"  Xxx:  xxx xx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t  \t\t        ");
    _builder.append("+ \"- Xxx: xxxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t  \t\t        ");
    _builder.append("+ \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t  \t\t        ");
    _builder.append("+ \"  Xxx:  xxx xx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t ");
    _builder.append("+ \"And fifth, the following cases cannot occur:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t ");
    _builder.append("+ \"1. Data with the same name cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t ");
    _builder.append("+ \"2. Data with the same ID cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t ");
    _builder.append("+ \"3. Entity\'s name with letters can not appear, for example \\\"Item 1\\\", \\\"Store 2\\\", \\\" Supplier 3\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t ");
    _builder.append("+ \"4. Entity\'s name with numbers can not appear, for example \\\"Item A\\\", \\\"Store B\\\", \\\" Supplier C\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t ");
    _builder.append("+ \"5. Double quotes can not appear.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t   \t\t ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("+ \"The following is to give all the entity information, \"");
    _builder.newLine();
    _builder.append("\t\t\t\t  \t\t        ");
    _builder.append("+ \"please do not generate all of them, please follow my request: \"");
    _builder.newLine();
    _builder.append("\t\t\t\t  \t\t        ");
    _builder.append("+ \"1. select \"+ str3+ \"entity information from these entity information to generate, just generate the \"+str3+\" example. \"");
    _builder.newLine();
    _builder.append("\t\t\t\t  \t\t        ");
    _builder.append("+ \"2. The number is 40 samples, the 40 of the entity quantity cannot be more or less and cannot be omitted:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t  \t\t        ");
    _builder.append("+ entitySetting;");
    _builder.newLine();
    _builder.append("\t\t\t\t   \t   ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input_1));");
    _builder.newLine();
    _builder.append("\t\t\t\t   \t   ");
    _builder.append("for(int i= 1; i<=a; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t   \t\t   \t   ");
    _builder.append("System.out.println(i +\": ...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t           ");
    _builder.append("chatCompletionRequest.setMessages(chatMessages);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t           ");
    _builder.append("ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t           ");
    _builder.append("String generatedData1 = chatCompletionResult.getChoices().get(0).getMessage().getContent();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t           ");
    _builder.append("int count = countChar(generatedData1);");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t           ");
    _builder.append("System.out.println(\"success：\" + i*40+\", check_count: \"+ count+\" yaml\");");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t           ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t           ");
    _builder.append("Yaml yaml = new Yaml();");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t           ");
    _builder.append("List<String> yamlList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t       ");
    _builder.append("Iterable<Object> object;");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t       ");
    _builder.append("object = yaml.loadAll(generatedData1);");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t       \t");
    _builder.append("object.forEach(y -> {");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t       \t\t");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t       \t        ");
    _builder.append("if (ObjectUtil.isNotNull(y)) {");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t       \t            ");
    _builder.append("yamlList.add(JSONUtil.toJsonStr(y));");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t       \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t       \t   ");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t       \t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t       \t");
    _builder.append("DataString = DataString +\"\\r\\n\" + generatedData1 +\"\\r\\n\";");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t           ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t       \t        ");
    _builder.append("// 处理异常");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t       \t        ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t       \t        ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t       \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t       \t    ");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t       \t    ");
    _builder.newLine();
    _builder.append("\t\t\t\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t       ");
    _builder.newLine();
    _builder.append("\t\t\t   \t");
    _builder.append("if(b !=0) ");
    _builder.newLine();
    _builder.append("\t\t\t   \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t   \t\t");
    _builder.append("String input_2 = \"You are a professional data generator, \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ \"and you must generate the required quantity according to the requirements:\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ \"Generate \"+ b+ \" entity examples of the system based on these entity information. \"");
    _builder.newLine();
    _builder.append("\t\t\t     \t\t");
    _builder.append("+ \"Try to generate reasonable and realistic data: \"");
    _builder.newLine();
    _builder.append("\t\t         \t\t");
    _builder.append("+ \"First, The generated value of the attribute field cannot be outside the type range of the attribute field: \"");
    _builder.newLine();
    _builder.append("\t\t\t         \t\t");
    _builder.append("+ \"int: The maximum length cannot exceed 8 digits, and 0 cannot be used as the beginning; \"");
    _builder.newLine();
    _builder.append("\t\t\t         \t\t");
    _builder.append("+ \"boolean:true and false; \"");
    _builder.newLine();
    _builder.append("\t\t\t         \t\t");
    _builder.append("+ \"float: The maximum length cannot exceed 8 digits; \"");
    _builder.newLine();
    _builder.append("\t\t\t         \t\t");
    _builder.append("+ \"LocalDate: 0001-01-01 to 9999-12-31. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t         \t\t");
    _builder.append("+ \"Second, The attribute fields of the entity are initial capitalized. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t         \t\t");
    _builder.append("+ \"Third, The preceding entity name is not required, the entity name must be omited.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t         \t\t");
    _builder.append("+ \"Fourth, The entity data  is directly  returned in the format of a yaml file, and the template of the generated data as follows (Please omit the entity  name) : \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        ");
    _builder.append("+ \"- Xxx: xxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        ");
    _builder.append("+ \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        ");
    _builder.append("+ \"  Xxx:  xxx xx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        ");
    _builder.append("+ \"- Xxx: xxxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        ");
    _builder.append("+ \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        ");
    _builder.append("+ \"  Xxx:  xxx xx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"And fifth, the following cases cannot occur:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"1. Data with the same name cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"2. Data with the same ID cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"3. Entity\'s name with letters can not appear, for example \\\"Item 1\\\", \\\"Store 2\\\", \\\" Supplier 3\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"4. Entity\'s name with numbers can not appear, for example \\\"Item A\\\", \\\"Store B\\\", \\\" Supplier C\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"5. Double quotes can not appear.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"The following is to give all the entity information, \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        ");
    _builder.append("+ \"please do not generate all of them, please follow my request: \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        ");
    _builder.append("+ \"1. select \"+ str3 + \"entity information from these entity information to generate, just generate the \"+str3+\" example. \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        ");
    _builder.append("+ \"2. The number is \"+ b + \" samples, the \"+ b + \" of the entity quantity cannot be more or less and cannot be omitted:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t        ");
    _builder.append("+ entitySetting;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"Last generation: \"+b+\" ...\\r\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t   \t");
    _builder.append("chatMessages.remove(chatMessages.size()-1);");
    _builder.newLine();
    _builder.append("\t\t\t   \t");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input_2));");
    _builder.newLine();
    _builder.append("\t\t\t   \t");
    _builder.append("chatCompletionRequest.setMessages(chatMessages);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("String generatedData_input_2 = chatCompletionResult.getChoices().get(0).getMessage().getContent();");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.append("Yaml yaml = new Yaml();");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.append("List<String> yamlList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t\t       ");
    _builder.append("Iterable<Object> object;");
    _builder.newLine();
    _builder.append("\t\t\t\t       ");
    _builder.append("object = yaml.loadAll(generatedData_input_2);");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t");
    _builder.append("object.forEach(y -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t        ");
    _builder.append("if (ObjectUtil.isNotNull(y)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t            ");
    _builder.append("yamlList.add(JSONUtil.toJsonStr(y));");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t   ");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(\"Last\"+b+\": \\r\\n\" + generatedData_input_2);");
    _builder.newLine();
    _builder.append("\t\t\t\t    ");
    _builder.append("int count = countChar(generatedData_input_2);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(\"Last generation check count:\"+ count+\" yaml\");");
    _builder.newLine();
    _builder.append("\t\t\t       \t");
    _builder.append("DataString = DataString +\"\\r\\n\" + generatedData_input_2 +\"\\r\\n\";");
    _builder.newLine();
    _builder.append("\t\t           ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t       \t        ");
    _builder.append("// 处理异常");
    _builder.newLine();
    _builder.append("\t\t       \t        ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t       \t        ");
    _builder.append("System.out.println(\"错误数据：\"+generatedData_input_2);");
    _builder.newLine();
    _builder.append("\t\t       \t        ");
    _builder.append("System.out.println(\"this time is exception, skip, generate：\" + (intStr3-b));");
    _builder.newLine();
    _builder.append("\t\t       \t        ");
    _builder.newLine();
    _builder.append("\t\t       \t        ");
    _builder.append("return DataString;  ");
    _builder.newLine();
    _builder.append("\t\t       \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(\"All generation：\" + intStr3);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.newLine();
    _builder.append("\t\t\t   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t       \t    ");
    _builder.append("return DataString;  \t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}//OutFile");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static String GPT4o_Chat_ReturnMessage(String str){");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.newLine();
    _builder.append("\t\t    \t\t");
    _builder.append("if(!PropertyKey.equals(\"0\")) {");
    _builder.newLine();
    _builder.append("\t\t\t    \t\t");
    _builder.append("System.setProperty(\"http.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t\t\t\t        ");
    _builder.append("System.setProperty(\"http.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t\t\t        ");
    _builder.append("System.setProperty(\"https.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t\t\t\t        ");
    _builder.append("System.setProperty(\"https.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("List<ChatMessage> chatMessages=new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("\"You are a helpful assistant.\"");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("));");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".model(\"gpt-4o\")");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".messages(chatMessages)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".frequencyPenalty(0D)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".presencePenalty(0D)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".temperature(0D)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".topP(0D)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".maxTokens(10000)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".build();");
    _builder.newLine();
    _builder.append("\t\t\t       ");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("String input2 = \"Generate entity examples of the system based on these entity information, \"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"Try to generate reasonable and realistic data, \"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"please generate the number of entity instances according to the given values: \"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ str");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"you only need to generate the ones in the square brackets, \"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"and you don\'t need to generate the ones not listed, \"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"and the attribute fields of the entity are initial capitalized, \"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"and the format “ ```Entity Data``` ” is not allowed, only the entity data needs to be returned. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"And the generated value of the attribute field cannot be outside the type range of the attribute field: \"");
    _builder.newLine();
    _builder.append("\t\t\t   \t\t ");
    _builder.append("+ \"int: The maximum length cannot exceed 8 digits; and 0 cannot be used as the beginning;\"");
    _builder.newLine();
    _builder.append("\t\t\t   \t\t ");
    _builder.append("+ \"boolean:true and false; \"");
    _builder.newLine();
    _builder.append("\t\t\t   \t\t ");
    _builder.append("+ \"float: The maximum length cannot exceed 8 digits; \"");
    _builder.newLine();
    _builder.append("\t\t\t   \t\t ");
    _builder.append("+ \"LocalDate: 0001-01-01 to 9999-12-31. \\r\\n\"\t   \t\t ");
    _builder.newLine();
    _builder.append("\t\t\t   \t\t ");
    _builder.append("+ \"and the entity is returned in the format of a yaml file, \"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"and please note that the entity information in the generated data is unique and cannot be repeated. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"Below is all the entity information given, please generate according to the number of entities above, \"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"no need to generate more than the others. \"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ entitySetting");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"The yaml data is in this format: \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"Item: \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"- Barcode: 123455690\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"  Name: Backpack\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"  Price: 49.99\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"  StockNumber: 20\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"  OrderPrice: 39.99\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"- Barcode: 127895489\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"  Name: apple\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"  Price: 49.99\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"  StockNumber: 20\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append("+ \"  OrderPrice: 39.99\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ \"And fifth, the following cases cannot occur:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ \"1. Data with the same name cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ \"2. Data with the same ID cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ \"3. Entity\'s name with letters can not appear, for example \\\"Item 1\\\", \\\"Store 2\\\", \\\" Supplier 3\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ \"4. Entity\'s name with numbers can not appear, for example \\\"Item A\\\", \\\"Store B\\\", \\\" Supplier C\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ \"5. Double quotes can not appear.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.append(";");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.newLine();
    _builder.append("\t\t\t     ");
    _builder.append("System.out.println(\"GPT-4o Prompt: \"+input2);");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input2));");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("chatCompletionRequest.setMessages(chatMessages);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("String generatedData = chatCompletionResult.getChoices().get(0).getMessage().getContent();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("System.out.println(generatedData);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("return generatedData;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t    \t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}//OutFile");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public static String GPT4_Chat_ReturnMessage(String str){");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("if(!PropertyKey.equals(\"0\")) {");
    _builder.newLine();
    _builder.append("\t    \t\t");
    _builder.append("System.setProperty(\"http.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("System.setProperty(\"http.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("System.setProperty(\"https.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("System.setProperty(\"https.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("List<ChatMessage> chatMessages=new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),");
    _builder.newLine();
    _builder.append("\t        \t\t");
    _builder.append("\"You are a helpful assistant.\"");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".model(\"gpt-4\")");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".messages(chatMessages)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".frequencyPenalty(0D)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".presencePenalty(0D)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".temperature(0D)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".topP(0D)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".maxTokens(5000)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".build();");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("String input2 = \"Generate entity examples of the system based on these entity information, \"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"Try to generate reasonable and realistic data, \"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"please generate the number of entity instances according to the given values: \"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ str");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"you only need to generate the ones in the square brackets, \"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"and you don\'t need to generate the ones not listed, \"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"and the attribute fields of the entity are initial capitalized, \"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"and the format “ ```Entity Data``` ” is not allowed, only the entity data needs to be returned. \\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"And the generated value of the attribute field cannot be outside the type range of the attribute field: \"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"int: The maximum length cannot exceed 8 digits; and 0 cannot be used as the beginning;\"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"boolean:true and false; \"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"float: The maximum length cannot exceed 8 digits; \"");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"LocalDate: 0001-01-01 to 9999-12-31. \\r\\n\"\t   \t\t ");
    _builder.newLine();
    _builder.append("\t   \t\t ");
    _builder.append("+ \"and the entity is returned in the format of a yaml file, \"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"and please note that the entity information in the generated data is unique and cannot be repeated. \\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"Below is all the entity information given, please generate according to the number of entities above, \"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"no need to generate more than the others. \"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ entitySetting");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"The yaml data is in this format: \\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"Item: \\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"- Barcode: 123455690\\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"  Name: Backpack\\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"  Price: 49.99\\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"  StockNumber: 20\\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"  OrderPrice: 39.99\\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"- Barcode: 127895489\\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"  Name: apple\\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"  Price: 49.99\\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"  StockNumber: 20\\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append("+ \"  OrderPrice: 39.99\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"And fifth, the following cases cannot occur:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"1. Data with the same name cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"2. Data with the same ID cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"3. Entity\'s name with letters can not appear, for example \\\"Item 1\\\", \\\"Store 2\\\", \\\" Supplier 3\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"4. Entity\'s name with numbers can not appear, for example \\\"Item A\\\", \\\"Store B\\\", \\\" Supplier C\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"5. Double quotes can not appear.\\r\\n\"");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.append(";");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("System.out.println(\"GPT-4 prompt: \"+input2);");
    _builder.newLine();
    _builder.append("   \t\t ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input2));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("chatCompletionRequest.setMessages(chatMessages);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String generatedData = chatCompletionResult.getChoices().get(0).getMessage().getContent();");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println(generatedData);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return generatedData;");
    _builder.newLine();
    _builder.append("\t\t\t\t    \t\t");
    _builder.newLine();
    _builder.append("}//OutFile");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public static String GPT4o_Evaluation_ReturnMessage(String str){");
    _builder.newLine();
    _builder.append("\t\t    \t");
    _builder.newLine();
    _builder.append("\t\t    \t\t");
    _builder.append("if(!PropertyKey.equals(\"0\")) {");
    _builder.newLine();
    _builder.append("\t\t\t    \t\t");
    _builder.append("System.setProperty(\"http.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t\t\t\t        ");
    _builder.append("System.setProperty(\"http.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t\t\t        ");
    _builder.append("System.setProperty(\"https.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t\t\t\t        ");
    _builder.append("System.setProperty(\"https.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("List<ChatMessage> chatMessages=new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("\"You are a helpful assistant.\"");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("));");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".model(\"gpt-4o\")");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".messages(chatMessages)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".frequencyPenalty(0D)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".presencePenalty(0D)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".temperature(0D)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".topP(0D)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".maxTokens(10000)");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append(".build();");
    _builder.newLine();
    _builder.append("\t\t\t       ");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("String input2 = \"Using my proposed evaluation dimensions and metrics to assess these data.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"evaluation Steps:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Step 1: Score each of the evaluation indicators using the following evaluation rules.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"The evaluation rule is a 5-point scale, using the \\\"Number of Entities Covered\\\" as an example.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"5 points: The data cover all entities and there are enough of each.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"4 points: The data covers most entities, but the number of entities is sufficient.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"3 points: The data covers most of the entities, but there are some omissions in the number of entities generated.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"2 points: The data covers a basic range of entities and there are omissions in the number of entities generated.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"1 point: The data covers very few entities and the number of entities generated is small.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"0 points: The data does not cover any entities or the data is not available at all.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"From high to low, a score of 5 indicates that the data fully meets the requirements of the evaluation indicators, a score of 1 indicates that the data rarely meets the requirements of the evaluation indicators, and a score of 0 indicates that the data does not meet the requirements of the evaluation indicators at all and is not available.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Step 2: Multiply the score of each evaluation indicator with its corresponding weight.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Step 3: Calculate the total score by adding up the scores of all evaluation indicators.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"The following evaluation dimensions and evaluation indicators are generated for the evaluation data: Evaluation Dimensions, Weights, Evaluation Indicators, Indicator Meanings\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Quality Completeness 15% Number of Entities Coverage 10% Check whether the number of various entities (e.g., items, categories, suppliers, shoppers, etc.) in the generated data is sufficient and covers all possible scenarios.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\t\t\tMissing Entity Attributes 5% Are all the necessary attributes of each entity populated (e.g., item name, price, quantity in stock, etc.), are there any missing values in the data, and the percentage of missing values.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\tAccuracy\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Accuracy 27% Outlier Rate 7% For numeric data (e.g. price, weight), check for illogical outliers.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\t\t\tTruthfulness 20%\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Reasonableness Check if the data is realistic enough to simulate a real scenario.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\tConsistency\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Consistency 10% Entity Consistency 6% Consistency in the representation of the same entity in different places (e.g., different tables or different systems).\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\t\t\tFormat Consistency 2% Consistency in the formatting of dates and times.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\t\t\tUnits Consistency 2% Whether currency, units, size, etc. are standardized.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\tRelevance\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Relevance 10% Relationship accuracy rate\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\tCheck that relationships between different entities are correct (e.g., merchandise to supplier).\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\tDiversity\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Diversity 10% Diversity rate Checks that the data is diverse to ensure that the prototype can handle a variety of scenarios (e.g., various merchandise categories, different suppliers, etc.).\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\tScalability\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Scalability 8% Scale Size 5% Whether the size of the dataset is sufficient to simulate a real-world scenario.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\t\t\tDuplication 3% Whether there are a lot of duplicates or non-essential data.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\tExpandability\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Expandability 5% Expansion rate Check whether the data structure is easy to add or modify in the future.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\tUsability\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Usability 5% Queryability Rate Whether the data is easy to query, read, and understand.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\tTimeliness\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Timeliness 5% Freshness Rate How close the last update date of the data is to the current date.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\tSecurity\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"Security 5% Leakage rate Whether there is leakage of sensitive information, such as private customer information. Whether data is properly encrypted or desensitized.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"The data to be evaluated is:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ str");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("+ \"\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("System.out.println(\"GPT-4o Evaluation Prompt: \"+input2);");
    _builder.newLine();
    _builder.append("\t\t   \t\t ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input2));");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("chatCompletionRequest.setMessages(chatMessages);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("String generatedData = chatCompletionResult.getChoices().get(0).getMessage().getContent();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("System.out.println(generatedData);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("return generatedData;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t    \t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}//OutFile");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static String GPT4o_Large_Chat_ReturnMessage(String str3, int intStr3){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(!PropertyKey.equals(\"0\")) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.setProperty(\"http.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("System.setProperty(\"http.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("System.setProperty(\"https.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("System.setProperty(\"https.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("List<ChatMessage> chatMessages=new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("//\"\"");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("String SYSTEM_input = \"You are a helpful assistant. \"");
    _builder.newLine();
    _builder.append("\t    \t\t");
    _builder.append(";");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),");
    _builder.newLine();
    _builder.append("\t    \t\t");
    _builder.append("SYSTEM_input");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("));");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append(".model(\"gpt-4o\")");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append(".messages(chatMessages)");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append(".frequencyPenalty(0D)");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append(".presencePenalty(0D)");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append(".temperature(1D)");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append(".topP(1D)");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append(".maxTokens(10000)");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append(".build();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("double a=0; double b=0;");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("if(intStr3 >=200) {");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("a = (intStr3*2) / 40; //取整");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("b = (intStr3*2) % 40; //取余");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("}else if(intStr3 <200 && intStr3 >= 120) {");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("a = (intStr3*1.5) / 40; //取整");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("b = (intStr3*1.5) % 40; //取余");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("else if(intStr3 <120 && intStr3 >= 80) {");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("a = (intStr3*1.2) / 40; //取整");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("b = (intStr3*1.2) % 40; //取余");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("a = intStr3/ 40; //取整");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("b = intStr3 % 40; //取余");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("String DataString = str3+\":\\r\\n\"+ \"\";");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("System.out.println(\"a and b：\"+ a +\" \"+ b);");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("if(a != 0) ");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("String input_1 = \"You are a professional data generator, \"");
    _builder.newLine();
    _builder.append("\t  \t\t\t\t");
    _builder.append("+ \"and you must generate the required quantity according to the requirements:\"");
    _builder.newLine();
    _builder.append("\t  \t\t\t\t");
    _builder.append("+ \"Generate 40 entity examples of the system based on these entity information, \"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//  \t\t\t\t+ \"the format “ ```yaml Entity Data``` ” is not allowed, only the entity data needs to be returned, \"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//  \t\t\t\t+ \"for example: \"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//  \t\t\t\t+ \"- Xxx: xxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//  \t\t        + \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//  \t\t        + \"  Xxx:  xxx xx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//  \t\t        + \"- Xxx: xxxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//  \t\t        + \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//  \t\t        + \"  Xxx:  xxx xx.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t  \t\t\t\t");
    _builder.append("+ \"Try to generate reasonable and realistic data: \"");
    _builder.newLine();
    _builder.append("\t         \t\t");
    _builder.append("+ \"First, the generated value of the attribute field cannot be outside the type range of the attribute field: \"");
    _builder.newLine();
    _builder.append("\t         \t\t");
    _builder.append("+ \"int: the maximum length cannot exceed 8 digits, and 0 cannot be used as the beginning; \"");
    _builder.newLine();
    _builder.append("\t         \t\t");
    _builder.append("+ \"boolean:true and false; \"");
    _builder.newLine();
    _builder.append("\t         \t\t");
    _builder.append("+ \"float: the maximum length cannot exceed 8 digits; \"");
    _builder.newLine();
    _builder.append("\t         \t\t");
    _builder.append("+ \"LocalDate: 0001-01-01 to 9999-12-31. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t         \t\t");
    _builder.append("+ \"Second, the attribute fields of the entity are initial capitalized. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t         \t\t");
    _builder.append("+ \"Third, the preceding entity name is not required, the entity name must be omited.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ \"Fourth, the following cases cannot occur:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"1. Data with the same name cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"2. Data with the same ID cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"3. Entity\'s name with letters can not appear, for example \\\"Item 1\\\", \\\"Store 2\\\", \\\" Supplier 3\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"4. Entity\'s name with numbers can not appear, for example \\\"Item A\\\", \\\"Store B\\\", \\\" Supplier C\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"5. Double quotes can not appear.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"6. The return format starts with \\\"```yaml\\\".\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t ");
    _builder.append("+ \"Fifth, the entity data is directly  returned in the format of a yaml file, and the template of the generated data as follows (Please omit the entity  name and any other words) : \"");
    _builder.newLine();
    _builder.append("\t         \t\t");
    _builder.append("+ \"- Xxx: xxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t  \t\t        ");
    _builder.append("+ \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t  \t\t        ");
    _builder.append("+ \"  Xxx:  xxx xx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t  \t\t        ");
    _builder.append("+ \"- Xxx: xxxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t  \t\t        ");
    _builder.append("+ \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t  \t\t        ");
    _builder.append("+ \"  Xxx:  xxx xx.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t   \t\t ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ \"The following is to give all the entity information, \"");
    _builder.newLine();
    _builder.append("\t  \t\t        ");
    _builder.append("+ \"please do not generate all of them, please follow my request: \"");
    _builder.newLine();
    _builder.append("\t  \t\t        ");
    _builder.append("+ \"1. select \"+ str3+ \"entity information from these entity information to generate, just generate the \"+str3+\" example. \"");
    _builder.newLine();
    _builder.append("\t  \t\t        ");
    _builder.append("+ \"2. The number is 40 samples, the 40 of the entity quantity cannot be more or less and cannot be omitted:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t  \t\t        ");
    _builder.append("+ entitySetting;");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("System.out.println(\"GPT-4o Large Prompt\"+input_1);");
    _builder.newLine();
    _builder.append("\t   \t   ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input_1));");
    _builder.newLine();
    _builder.append("\t   \t   ");
    _builder.append("for(int i= 1; i<=a; i++) {");
    _builder.newLine();
    _builder.append("\t   \t\t   \t   ");
    _builder.append("System.out.println(i +\": ...\");");
    _builder.newLine();
    _builder.append("\t\t           ");
    _builder.append("chatCompletionRequest.setMessages(chatMessages);");
    _builder.newLine();
    _builder.append("\t\t           ");
    _builder.append("ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);");
    _builder.newLine();
    _builder.append("\t\t           ");
    _builder.append("String generatedData1 = chatCompletionResult.getChoices().get(0).getMessage().getContent();");
    _builder.newLine();
    _builder.append("\t\t           ");
    _builder.append("int count = countChar(generatedData1);");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.append("System.out.println(\"success：\" + i*40+\", check_count: \"+ count+\" yaml\");");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.append("if(generatedData1.startsWith(\"-\")) {");
    _builder.newLine();
    _builder.append("\t\t\t        \t   ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t           ");
    _builder.append("Yaml yaml = new Yaml();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t           ");
    _builder.append("List<String> yamlList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       ");
    _builder.append("Iterable<Object> object;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       ");
    _builder.append("object = yaml.loadAll(generatedData1);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t");
    _builder.append("object.forEach(y -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t        ");
    _builder.append("if (ObjectUtil.isNotNull(y)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t            ");
    _builder.append("yamlList.add(JSONUtil.toJsonStr(y));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t   ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t       \t");
    _builder.append("DataString = DataString +\"\\r\\n\" + generatedData1 +\"\\r\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t           ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t        ");
    _builder.append("// 处理异常");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t        ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t        ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t\t\t        \t   ");
    _builder.append("int startReturn = generatedData1.indexOf(\"-\");");
    _builder.newLine();
    _builder.append("\t\t\t        \t   ");
    _builder.append("String substring = generatedData1.substring(startReturn);");
    _builder.newLine();
    _builder.append("\t\t\t        \t   ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t           ");
    _builder.append("Yaml yaml = new Yaml();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t           ");
    _builder.append("List<String> yamlList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       ");
    _builder.append("Iterable<Object> object;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       ");
    _builder.append("object = yaml.loadAll(substring);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t");
    _builder.append("object.forEach(y -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t        ");
    _builder.append("if (ObjectUtil.isNotNull(y)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t            ");
    _builder.append("yamlList.add(JSONUtil.toJsonStr(y));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t   ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t       \t");
    _builder.append("DataString = DataString +\"\\r\\n\" + substring +\"\\r\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t           ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t        ");
    _builder.append("// 处理异常");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t        ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t        ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("\t\t\t\t       \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t        \t   ");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(b !=0) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String input_2 = \"You are a professional data generator, \"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \"and you must generate the required quantity according to the requirements:\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \"Generate \"+ b+ \" entity examples of the system based on these entity information. \"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \"the format “ ```Entity Data``` ” is not allowed, only the entity data needs to be returned.\"");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("+ \"Try to generate reasonable and realistic data: \"");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("+ \"First, The generated value of the attribute field cannot be outside the type range of the attribute field: \"");
    _builder.newLine();
    _builder.append("\t     \t\t");
    _builder.append("+ \"int: The maximum length cannot exceed 8 digits, and 0 cannot be used as the beginning; \"");
    _builder.newLine();
    _builder.append("\t     \t\t");
    _builder.append("+ \"boolean:true and false; \"");
    _builder.newLine();
    _builder.append("\t     \t\t");
    _builder.append("+ \"float: The maximum length cannot exceed 8 digits; \"");
    _builder.newLine();
    _builder.append("\t     \t\t");
    _builder.append("+ \"LocalDate: 0001-01-01 to 9999-12-31. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("+ \"Second, The attribute fields of the entity are initial capitalized. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("+ \"Third, The preceding entity name is not required, the entity name must be omited.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"Fourth, the following cases cannot occur:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"1. Data with the same name cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"2. Data with the same ID cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"3. Entity\'s name with letters can not appear, for example \\\"Item 1\\\", \\\"Store 2\\\", \\\" Supplier 3\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"4. Entity\'s name with numbers can not appear, for example \\\"Item A\\\", \\\"Store B\\\", \\\" Supplier C\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"5. Double quotes can not appear.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"6. The return format starts with \\\"```yaml\\\".\"");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("+ \"Fifth, the entity data is directly  returned in the format of a yaml file, and the template of the generated data as follows (Please omit the entity  name and any other words) : \"");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("+ \"- Xxx: xxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("+ \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("+ \"  Xxx:  xxx xx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("+ \"- Xxx: xxxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("+ \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("+ \"  Xxx:  xxx xx.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("+ \"The following is to give all the entity information, \"");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("+ \"please do not generate all of them, please follow my request: \"");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("+ \"1. select \"+ str3 + \"entity information from these entity information to generate, just generate the \"+str3+\" example. \"");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("+ \"2. The number is \"+ b + \" samples, the \"+ b + \" of the entity quantity cannot be more or less and cannot be omitted:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("+ entitySetting;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"Last generation: \"+b+\" ...\\r\\n\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("chatMessages.remove(chatMessages.size()-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input_2));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("chatCompletionRequest.setMessages(chatMessages);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String generatedData_input_2 = chatCompletionResult.getChoices().get(0).getMessage().getContent();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("if(generatedData_input_2.startsWith(\"-\")) {");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("Yaml yaml = new Yaml();");
    _builder.newLine();
    _builder.append("\t           ");
    _builder.append("List<String> yamlList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("Iterable<Object> object;");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("object = yaml.loadAll(generatedData_input_2);");
    _builder.newLine();
    _builder.append("\t\t       \t");
    _builder.append("object.forEach(y -> {");
    _builder.newLine();
    _builder.append("\t\t       \t\t");
    _builder.newLine();
    _builder.append("\t\t       \t        ");
    _builder.append("if (ObjectUtil.isNotNull(y)) {");
    _builder.newLine();
    _builder.append("\t\t       \t            ");
    _builder.append("yamlList.add(JSONUtil.toJsonStr(y));");
    _builder.newLine();
    _builder.append("\t\t       \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t       \t   ");
    _builder.newLine();
    _builder.append("\t\t       \t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Last\"+b+\": \\r\\n\" + generatedData_input_2);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("int count = countChar(generatedData_input_2);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Last generation check count:\"+ count+\" yaml\");");
    _builder.newLine();
    _builder.append("\t       \t");
    _builder.append("DataString = DataString +\"\\r\\n\" + generatedData_input_2 +\"\\r\\n\";");
    _builder.newLine();
    _builder.append("\t       \t");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("int startReturn = generatedData_input_2.indexOf(\"-\");");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("String substring = generatedData_input_2.substring(startReturn);");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("Yaml yaml = new Yaml();");
    _builder.newLine();
    _builder.append("\t           ");
    _builder.append("List<String> yamlList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("Iterable<Object> object;");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("object = yaml.loadAll(substring);");
    _builder.newLine();
    _builder.append("\t\t       \t");
    _builder.append("object.forEach(y -> {");
    _builder.newLine();
    _builder.append("\t\t       \t\t");
    _builder.newLine();
    _builder.append("\t\t       \t        ");
    _builder.append("if (ObjectUtil.isNotNull(y)) {");
    _builder.newLine();
    _builder.append("\t\t       \t            ");
    _builder.append("yamlList.add(JSONUtil.toJsonStr(y));");
    _builder.newLine();
    _builder.append("\t\t       \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t       \t   ");
    _builder.newLine();
    _builder.append("\t\t       \t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"Last\"+b+\": \\r\\n\" + substring);");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("int count = countChar(substring);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"Last generation check count:\"+ count+\" yaml\");");
    _builder.newLine();
    _builder.append("\t\t       \t");
    _builder.append("DataString = DataString +\"\\r\\n\" + substring +\"\\r\\n\";");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("// 处理异常");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("System.out.println(\"错误数据：\"+generatedData_input_2);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("System.out.println(\"this time is exception, skip, generate：\" + (intStr3-b));");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("return DataString;  ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"All generation：\" + intStr3);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("return DataString;  \t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}//OutFile");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public static String GPT4_Large_Chat_ReturnMessage(String str3, int intStr3){");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("if(!PropertyKey.equals(\"0\")) {");
    _builder.newLine();
    _builder.append("\t    \t\t");
    _builder.append("System.setProperty(\"http.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("System.setProperty(\"http.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("System.setProperty(\"https.proxyHost\", \"127.0.0.1\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("System.setProperty(\"https.proxyPort\", PropertyKey);");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("List<ChatMessage> chatMessages=new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("//\"\"");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("String SYSTEM_input = \"You are a helpful assistant. \"");
    _builder.newLine();
    _builder.append("\t        \t\t");
    _builder.append(";");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),");
    _builder.newLine();
    _builder.append("\t        \t\t");
    _builder.append("SYSTEM_input");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("));");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".model(\"gpt-4\")");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".messages(chatMessages)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".frequencyPenalty(0D)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".presencePenalty(0D)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".temperature(1D)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".topP(1D)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".maxTokens(5000)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append(".build();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("double a=0; double b=0;");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("if(intStr3 >=200) {");
    _builder.newLine();
    _builder.append("\t\t    \t   ");
    _builder.append("a = (intStr3*2) / 40; //取整");
    _builder.newLine();
    _builder.append("\t\t    \t   ");
    _builder.append("b = (intStr3*2) % 40; //取余");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("}else if(intStr3 <200 && intStr3 >= 120) {");
    _builder.newLine();
    _builder.append("\t\t    \t   ");
    _builder.append("a = (intStr3*1.5) / 40; //取整");
    _builder.newLine();
    _builder.append("\t\t    \t   ");
    _builder.append("b = (intStr3*1.5) % 40; //取余");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("else if(intStr3 <120 && intStr3 >= 80) {");
    _builder.newLine();
    _builder.append("\t\t    \t   ");
    _builder.append("a = (intStr3*1.2) / 40; //取整");
    _builder.newLine();
    _builder.append("\t\t    \t   ");
    _builder.append("b = (intStr3*1.2) % 40; //取余");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t    \t   ");
    _builder.append("a = intStr3/ 40; //取整");
    _builder.newLine();
    _builder.append("\t\t    \t   ");
    _builder.append("b = intStr3 % 40; //取余");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("String DataString = str3+\":\\r\\n\"+ \"\";");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("System.out.println(\"a and b：\"+ a +\" \"+ b);");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("if(a != 0) ");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("String input_1 = \"You are a professional data generator, \"");
    _builder.newLine();
    _builder.append("\t\t  \t\t\t\t");
    _builder.append("+ \"and you must generate the required quantity according to the requirements:\"");
    _builder.newLine();
    _builder.append("\t\t  \t\t\t\t");
    _builder.append("+ \"Generate 40 entity examples of the system based on these entity information, \"");
    _builder.newLine();
    _builder.append("//\t\t  \t\t\t\t+ \"the format “ ```yaml Entity Data``` ” is not allowed, only the entity data needs to be returned, \"");
    _builder.newLine();
    _builder.append("//\t\t  \t\t\t\t+ \"for example: \"");
    _builder.newLine();
    _builder.append("//\t\t  \t\t\t\t+ \"- Xxx: xxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t  \t\t        + \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t  \t\t        + \"  Xxx:  xxx xx\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t  \t\t        + \"- Xxx: xxxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t  \t\t        + \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("//\t\t  \t\t        + \"  Xxx:  xxx xx.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t  \t\t\t\t");
    _builder.append("+ \"Try to generate reasonable and realistic data: \"");
    _builder.newLine();
    _builder.append("\t\t         \t\t");
    _builder.append("+ \"First, the generated value of the attribute field cannot be outside the type range of the attribute field: \"");
    _builder.newLine();
    _builder.append("\t\t         \t\t");
    _builder.append("+ \"int: the maximum length cannot exceed 8 digits, and 0 cannot be used as the beginning; \"");
    _builder.newLine();
    _builder.append("\t\t         \t\t");
    _builder.append("+ \"boolean:true and false; \"");
    _builder.newLine();
    _builder.append("\t\t         \t\t");
    _builder.append("+ \"float: the maximum length cannot exceed 8 digits; \"");
    _builder.newLine();
    _builder.append("\t\t         \t\t");
    _builder.append("+ \"LocalDate: 0001-01-01 to 9999-12-31. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t         \t\t");
    _builder.append("+ \"Second, the attribute fields of the entity are initial capitalized. \\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t         \t\t");
    _builder.append("+ \"Third, the preceding entity name is not required, the entity name must be omited.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"Fourth, the following cases cannot occur:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ \"1. Data with the same name cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ \"2. Data with the same ID cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ \"3. Entity\'s name with letters can not appear, for example \\\"Item 1\\\", \\\"Store 2\\\", \\\" Supplier 3\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ \"4. Entity\'s name with numbers can not appear, for example \\\"Item A\\\", \\\"Store B\\\", \\\" Supplier C\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ \"5. Double quotes can not appear.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ \"6. The return format starts with \\\"```yaml\\\".\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t ");
    _builder.append("+ \"Fifth, the entity data is directly  returned in the format of a yaml file, and the template of the generated data as follows (Please omit the entity  name and any other words) : \"");
    _builder.newLine();
    _builder.append("\t\t         \t\t");
    _builder.append("+ \"- Xxx: xxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t  \t\t        ");
    _builder.append("+ \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t  \t\t        ");
    _builder.append("+ \"  Xxx:  xxx xx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t  \t\t        ");
    _builder.append("+ \"- Xxx: xxxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t  \t\t        ");
    _builder.append("+ \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t  \t\t        ");
    _builder.append("+ \"  Xxx:  xxx xx.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t   \t\t ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"The following is to give all the entity information, \"");
    _builder.newLine();
    _builder.append("\t\t  \t\t        ");
    _builder.append("+ \"please do not generate all of them, please follow my request: \"");
    _builder.newLine();
    _builder.append("\t\t  \t\t        ");
    _builder.append("+ \"1. select \"+ str3+ \"entity information from these entity information to generate, just generate the \"+str3+\" example. \"");
    _builder.newLine();
    _builder.append("\t\t  \t\t        ");
    _builder.append("+ \"2. The number is 40 samples, the 40 of the entity quantity cannot be more or less and cannot be omitted:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t  \t\t        ");
    _builder.append("+ entitySetting;");
    _builder.newLine();
    _builder.append("\t    \t   ");
    _builder.append("System.out.println(\"GPT-4 Large Prompt: \"+input_1);");
    _builder.newLine();
    _builder.append("\t\t   \t   ");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input_1));");
    _builder.newLine();
    _builder.append("\t\t   \t   ");
    _builder.append("for(int i= 1; i<=a; i++) {");
    _builder.newLine();
    _builder.append("\t\t   \t\t   \t   ");
    _builder.append("System.out.println(i +\": ...\");");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.append("chatCompletionRequest.setMessages(chatMessages);");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.append("ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.append("String generatedData1 = chatCompletionResult.getChoices().get(0).getMessage().getContent();");
    _builder.newLine();
    _builder.append("\t\t\t           ");
    _builder.append("int count = countChar(generatedData1);");
    _builder.newLine();
    _builder.append("\t\t\t\t           ");
    _builder.append("System.out.println(\"success：\" + i*40+\", check_count: \"+ count+\" yaml\");");
    _builder.newLine();
    _builder.append("\t\t\t\t           ");
    _builder.newLine();
    _builder.append("\t\t\t\t           ");
    _builder.newLine();
    _builder.append("\t\t\t\t           ");
    _builder.append("if(generatedData1.startsWith(\"-\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t   ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t           ");
    _builder.append("Yaml yaml = new Yaml();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t           ");
    _builder.append("List<String> yamlList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       ");
    _builder.append("Iterable<Object> object;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       ");
    _builder.append("object = yaml.loadAll(generatedData1);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t");
    _builder.append("object.forEach(y -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t        ");
    _builder.append("if (ObjectUtil.isNotNull(y)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t            ");
    _builder.append("yamlList.add(JSONUtil.toJsonStr(y));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t   ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t");
    _builder.append("DataString = DataString +\"\\r\\n\" + generatedData1 +\"\\r\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t           ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t       \t        ");
    _builder.append("// 处理异常");
    _builder.newLine();
    _builder.append("\t\t\t\t\t       \t        ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t       \t        ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t       \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t           ");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t   ");
    _builder.append("int startReturn = generatedData1.indexOf(\"-\");");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t   ");
    _builder.append("String substring = generatedData1.substring(startReturn);");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t   ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t           ");
    _builder.append("Yaml yaml = new Yaml();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t           ");
    _builder.append("List<String> yamlList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       ");
    _builder.append("Iterable<Object> object;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       ");
    _builder.append("object = yaml.loadAll(substring);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t");
    _builder.append("object.forEach(y -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t        ");
    _builder.append("if (ObjectUtil.isNotNull(y)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t            ");
    _builder.append("yamlList.add(JSONUtil.toJsonStr(y));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t   ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t       \t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t       \t");
    _builder.append("DataString = DataString +\"\\r\\n\" + substring +\"\\r\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t           ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t       \t        ");
    _builder.append("// 处理异常");
    _builder.newLine();
    _builder.append("\t\t\t\t\t       \t        ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t       \t        ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t       \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t        \t   ");
    _builder.newLine();
    _builder.append("\t\t\t\t           ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t           ");
    _builder.newLine();
    _builder.append("\t\t\t\t           ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.newLine();
    _builder.append("\t   \t");
    _builder.append("if(b !=0) ");
    _builder.newLine();
    _builder.append("\t   \t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t   \t\t");
    _builder.append("String input_2 = \"You are a professional data generator, \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ \"and you must generate the required quantity according to the requirements:\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ \"Generate \"+ b+ \" entity examples of the system based on these entity information. \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ \"the format “ ```Entity Data``` ” is not allowed, only the entity data needs to be returned.\"");
    _builder.newLine();
    _builder.append("\t     \t\t");
    _builder.append("+ \"Try to generate reasonable and realistic data: \"");
    _builder.newLine();
    _builder.append("         \t\t");
    _builder.append("+ \"First, The generated value of the attribute field cannot be outside the type range of the attribute field: \"");
    _builder.newLine();
    _builder.append("\t         \t\t");
    _builder.append("+ \"int: The maximum length cannot exceed 8 digits, and 0 cannot be used as the beginning; \"");
    _builder.newLine();
    _builder.append("\t         \t\t");
    _builder.append("+ \"boolean:true and false; \"");
    _builder.newLine();
    _builder.append("\t         \t\t");
    _builder.append("+ \"float: The maximum length cannot exceed 8 digits; \"");
    _builder.newLine();
    _builder.append("\t         \t\t");
    _builder.append("+ \"LocalDate: 0001-01-01 to 9999-12-31. \\r\\n\"");
    _builder.newLine();
    _builder.append("         \t\t");
    _builder.append("+ \"Second, The attribute fields of the entity are initial capitalized. \\r\\n\"");
    _builder.newLine();
    _builder.append("         \t\t");
    _builder.append("+ \"Third, The preceding entity name is not required, the entity name must be omited.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \"Fourth, the following cases cannot occur:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \"1. Data with the same name cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \"2. Data with the same ID cannot appear;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \"3. Entity\'s name with letters can not appear, for example \\\"Item 1\\\", \\\"Store 2\\\", \\\" Supplier 3\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \"4. Entity\'s name with numbers can not appear, for example \\\"Item A\\\", \\\"Store B\\\", \\\" Supplier C\\\" and so on;\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \"5. Double quotes can not appear.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \"6. The return format starts with \\\"```yaml\\\".\"");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("+ \"Fifth, the entity data is directly  returned in the format of a yaml file, and the template of the generated data as follows (Please omit the entity  name and any other words) : \"");
    _builder.newLine();
    _builder.append("\t     \t\t");
    _builder.append("+ \"- Xxx: xxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("+ \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("+ \"  Xxx:  xxx xx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("+ \"- Xxx: xxxxxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("+ \"  Xxx: xxx\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("+ \"  Xxx:  xxx xx.\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \"The following is to give all the entity information, \"");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("+ \"please do not generate all of them, please follow my request: \"");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("+ \"1. select \"+ str3 + \"entity information from these entity information to generate, just generate the \"+str3+\" example. \"");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("+ \"2. The number is \"+ b + \" samples, the \"+ b + \" of the entity quantity cannot be more or less and cannot be omitted:\\r\\n\"");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("+ entitySetting;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Last generation: \"+b+\" ...\\r\\n\");");
    _builder.newLine();
    _builder.append("\t   \t");
    _builder.append("chatMessages.remove(chatMessages.size()-1);");
    _builder.newLine();
    _builder.append("\t   \t");
    _builder.append("chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input_2));");
    _builder.newLine();
    _builder.append("\t   \t");
    _builder.append("chatCompletionRequest.setMessages(chatMessages);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String generatedData_input_2 = chatCompletionResult.getChoices().get(0).getMessage().getContent();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("        \t");
    _builder.newLine();
    _builder.append("\t           ");
    _builder.append("if(generatedData_input_2.startsWith(\"-\")) {");
    _builder.newLine();
    _builder.append("\t        \t   ");
    _builder.newLine();
    _builder.append("\t        \t   ");
    _builder.append("Yaml yaml = new Yaml();");
    _builder.newLine();
    _builder.append("\t\t           ");
    _builder.append("List<String> yamlList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t       ");
    _builder.append("Iterable<Object> object;");
    _builder.newLine();
    _builder.append("\t\t\t       ");
    _builder.append("object = yaml.loadAll(generatedData_input_2);");
    _builder.newLine();
    _builder.append("\t\t\t       \t");
    _builder.append("object.forEach(y -> {");
    _builder.newLine();
    _builder.append("\t\t\t       \t\t");
    _builder.newLine();
    _builder.append("\t\t\t       \t        ");
    _builder.append("if (ObjectUtil.isNotNull(y)) {");
    _builder.newLine();
    _builder.append("\t\t\t       \t            ");
    _builder.append("yamlList.add(JSONUtil.toJsonStr(y));");
    _builder.newLine();
    _builder.append("\t\t\t       \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t       \t   ");
    _builder.newLine();
    _builder.append("\t\t\t       \t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"Last\"+b+\": \\r\\n\" + generatedData_input_2);");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("int count = countChar(generatedData_input_2);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"Last generation check count:\"+ count+\" yaml\");");
    _builder.newLine();
    _builder.append("\t\t       \t");
    _builder.append("DataString = DataString +\"\\r\\n\" + generatedData_input_2 +\"\\r\\n\";");
    _builder.newLine();
    _builder.append("\t\t       \t");
    _builder.newLine();
    _builder.append("\t           ");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t        \t   ");
    _builder.append("int startReturn = generatedData_input_2.indexOf(\"-\");");
    _builder.newLine();
    _builder.append("\t        \t   ");
    _builder.append("String substring = generatedData_input_2.substring(startReturn);");
    _builder.newLine();
    _builder.append("\t        \t   ");
    _builder.newLine();
    _builder.append("\t        \t   ");
    _builder.append("Yaml yaml = new Yaml();");
    _builder.newLine();
    _builder.append("\t\t           ");
    _builder.append("List<String> yamlList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t       ");
    _builder.append("Iterable<Object> object;");
    _builder.newLine();
    _builder.append("\t\t\t       ");
    _builder.append("object = yaml.loadAll(substring);");
    _builder.newLine();
    _builder.append("\t\t\t       \t");
    _builder.append("object.forEach(y -> {");
    _builder.newLine();
    _builder.append("\t\t\t       \t\t");
    _builder.newLine();
    _builder.append("\t\t\t       \t        ");
    _builder.append("if (ObjectUtil.isNotNull(y)) {");
    _builder.newLine();
    _builder.append("\t\t\t       \t            ");
    _builder.append("yamlList.add(JSONUtil.toJsonStr(y));");
    _builder.newLine();
    _builder.append("\t\t\t       \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t       \t   ");
    _builder.newLine();
    _builder.append("\t\t\t       \t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(\"Last\"+b+\": \\r\\n\" + substring);");
    _builder.newLine();
    _builder.append("\t\t\t\t    ");
    _builder.append("int count = countChar(substring);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(\"Last generation check count:\"+ count+\" yaml\");");
    _builder.newLine();
    _builder.append("\t\t\t       \t");
    _builder.append("DataString = DataString +\"\\r\\n\" + substring +\"\\r\\n\";");
    _builder.newLine();
    _builder.append("\t        \t   ");
    _builder.newLine();
    _builder.append("\t           ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t           ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t          ");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("       \t        ");
    _builder.append("// 处理异常");
    _builder.newLine();
    _builder.append("       \t        ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("       \t        ");
    _builder.append("System.out.println(\"错误数据：\"+generatedData_input_2);");
    _builder.newLine();
    _builder.append("       \t        ");
    _builder.append("System.out.println(\"this time is exception, skip, generate：\" + (intStr3-b));");
    _builder.newLine();
    _builder.append("       \t        ");
    _builder.newLine();
    _builder.append("       \t        ");
    _builder.append("return DataString;  ");
    _builder.newLine();
    _builder.append("       \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"All generation：\" + intStr3);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("\t   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t    ");
    _builder.append("return DataString;  \t\t");
    _builder.newLine();
    _builder.append("}//OutFile");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public static void OutFileString(String cu,String filePath) throws IOException {");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("String a = cu.toString();");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("OutputStream os = null;");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("OutputStreamWriter ops = null;");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("BufferedWriter bw = null;");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("File f1 = new File(filePath);");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("if(!f1.exists()) {");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t");
    _builder.append("f1.getParentFile().mkdirs();");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t");
    _builder.append("os = new FileOutputStream(f1);");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t");
    _builder.append("ops = new OutputStreamWriter(os);");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t");
    _builder.append("bw = new BufferedWriter(ops);");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t");
    _builder.append("bw.write(a);");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t");
    _builder.append("bw.newLine();");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t");
    _builder.append("bw.flush();");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("catch(FileNotFoundException e){");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("catch(IOException e) {");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.newLine();
    _builder.append("\t    \t\t\t");
    _builder.append("System.out.println(\" Modify successfulString!!!\");");
    _builder.newLine();
    _builder.append("\t    \t\t");
    _builder.newLine();
    _builder.append("\t    \t\t");
    _builder.append("}//OutFile");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public static int countChar(String str) {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("int count = 0;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("char c = \'-\';");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("for (int i = 0; i < str.length(); i++) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("if (str.charAt(i) == c) {");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("if (str.charAt(i + 1) == \' \') {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("count++;");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("return count;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
  
  public String setYamlFilter(final Iterable<Entity> sEntity, final Iterable<Entity> ssEntity, final Iterable<Contract> sContract) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("public static String YamlFilter(String str, HashMap<String, Integer> numberentities, int return_Code, String returnString) throws JsonMappingException, JsonProcessingException");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Yaml yaml = new Yaml();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String yamlData =str;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int count = countChar(yamlData);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"check： \"+ count+\"  yaml\");    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<String> yamlList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Iterable<Object> object;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("object = yaml.loadAll(yamlData);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("object.forEach(y -> {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("if (ObjectUtil.isNotNull(y)) {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("yamlList.add(JSONUtil.toJsonStr(y));");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("JSONObject rootObject = new JSONObject(yamlList.get(0).toString());");
    _builder.newLine();
    _builder.newLine();
    {
      for(final Entity entity : sEntity) {
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("String ");
        String _name = entity.getName();
        _builder.append(_name, "\t\t    ");
        _builder.append("_filtereddata = \"");
        String _name_1 = entity.getName();
        _builder.append(_name_1, "\t\t    ");
        _builder.append(":\\r\\n\" +\"\";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    \t   ");
        _builder.append("if (rootObject.has(\"");
        String _name_2 = entity.getName();
        _builder.append(_name_2, "    \t   ");
        _builder.append("\") )");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t   ");
        _builder.append("{");
        _builder.newLine();
        _builder.append("    \t   \t");
        _builder.append("JSONArray dataArray");
        String _name_3 = entity.getName();
        _builder.append(_name_3, "    \t   \t");
        _builder.append(" = rootObject.getJSONArray(\"");
        String _name_4 = entity.getName();
        _builder.append(_name_4, "    \t   \t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t   \t");
        _builder.append("// 筛选出不重复的 Barcode 和 Name");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    \t   \t");
        String _name_5 = entity.getName();
        _builder.append(_name_5, "    \t   \t");
        _builder.append(" iii");
        String _name_6 = entity.getName();
        _builder.append(_name_6, "    \t   \t");
        _builder.append(" = new ");
        String _name_7 = entity.getName();
        _builder.append(_name_7, "    \t   \t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t   \t");
        _builder.newLine();
        {
          boolean _isNullOrEmpty = IterableExtensions.isNullOrEmpty(entity.getAttributes());
          boolean _not = (!_isNullOrEmpty);
          if (_not) {
            {
              int _size = entity.getAttributes().size();
              boolean _greaterEqualsThan = (_size >= 2);
              if (_greaterEqualsThan) {
                _builder.append("    \t   \t");
                _builder.append("Set<String> ");
                String _name_8 = entity.getName();
                _builder.append(_name_8, "    \t   \t");
                _builder.append("_");
                String _name_9 = entity.getAttributes().get(0).getName();
                _builder.append(_name_9, "    \t   \t");
                _builder.append("Set = new HashSet<String>();");
                _builder.newLineIfNotEmpty();
                _builder.append("    \t   \t");
                _builder.append("Set<String> ");
                String _name_10 = entity.getName();
                _builder.append(_name_10, "    \t   \t");
                _builder.append("_");
                String _name_11 = entity.getAttributes().get(1).getName();
                _builder.append(_name_11, "    \t   \t");
                _builder.append("Set = new HashSet<String>();");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("    \t   \t");
                _builder.append("Set<String> ");
                String _name_12 = entity.getName();
                _builder.append(_name_12, "    \t   \t");
                _builder.append("_");
                String _name_13 = entity.getAttributes().get(0).getName();
                _builder.append(_name_13, "    \t   \t");
                _builder.append("Set = new HashSet<String>();");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.newLine();
        _builder.append("\t           ");
        _builder.append("for(int i = 0; i < dataArray");
        String _name_14 = entity.getName();
        _builder.append(_name_14, "\t           ");
        _builder.append(".length(); i++) ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t           ");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t           \t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t           \t\t");
        _builder.append("JSONObject sonObject");
        String _name_15 = entity.getName();
        _builder.append(_name_15, "\t           \t\t");
        _builder.append(" = dataArray");
        String _name_16 = entity.getName();
        _builder.append(_name_16, "\t           \t\t");
        _builder.append(".getJSONObject(i);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t        \t   ");
        _builder.newLine();
        {
          boolean _isNullOrEmpty_1 = IterableExtensions.isNullOrEmpty(entity.getAttributes());
          boolean _not_1 = (!_isNullOrEmpty_1);
          if (_not_1) {
            {
              int _size_1 = entity.getAttributes().size();
              boolean _greaterEqualsThan_1 = (_size_1 >= 2);
              if (_greaterEqualsThan_1) {
                _builder.append("String ");
                String _name_17 = entity.getName();
                _builder.append(_name_17);
                _builder.append("_");
                String _name_18 = entity.getAttributes().get(0).getName();
                _builder.append(_name_18);
                _builder.append("Str = String.valueOf(sonObject");
                String _name_19 = entity.getName();
                _builder.append(_name_19);
                _builder.append(".get(\"");
                String _name_20 = entity.getAttributes().get(0).getName();
                _builder.append(_name_20);
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
                _builder.append("\t   \t    \t   \t\t");
                _builder.append("String ");
                String _name_21 = entity.getName();
                _builder.append(_name_21, "\t   \t    \t   \t\t");
                _builder.append("_");
                String _name_22 = entity.getAttributes().get(1).getName();
                _builder.append(_name_22, "\t   \t    \t   \t\t");
                _builder.append("Str = String.valueOf(sonObject");
                String _name_23 = entity.getName();
                _builder.append(_name_23, "\t   \t    \t   \t\t");
                _builder.append(".get(\"");
                String _name_24 = entity.getAttributes().get(1).getName();
                _builder.append(_name_24, "\t   \t    \t   \t\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t   \t    \t   \t");
                _builder.append("String ");
                String _name_25 = entity.getName();
                _builder.append(_name_25, "\t   \t    \t   \t");
                _builder.append("_");
                String _name_26 = entity.getAttributes().get(0).getName();
                _builder.append(_name_26, "\t   \t    \t   \t");
                _builder.append("Str = String.valueOf(sonObject");
                String _name_27 = entity.getName();
                _builder.append(_name_27, "\t   \t    \t   \t");
                _builder.append(".get(\"");
                String _name_28 = entity.getAttributes().get(0).getName();
                _builder.append(_name_28, "\t   \t    \t   \t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t   \t");
        _builder.newLine();
        _builder.append("\t   \t\t\t\t\t   \t");
        _builder.newLine();
        {
          boolean _isNullOrEmpty_2 = IterableExtensions.isNullOrEmpty(entity.getAttributes());
          boolean _not_2 = (!_isNullOrEmpty_2);
          if (_not_2) {
            _builder.append("\t   \t");
            _builder.newLine();
            {
              int _size_2 = entity.getAttributes().size();
              boolean _greaterEqualsThan_2 = (_size_2 >= 2);
              if (_greaterEqualsThan_2) {
                _builder.append("if (!");
                String _name_29 = entity.getName();
                _builder.append(_name_29);
                _builder.append("_");
                String _name_30 = entity.getAttributes().get(0).getName();
                _builder.append(_name_30);
                _builder.append("Set.contains(");
                String _name_31 = entity.getName();
                _builder.append(_name_31);
                _builder.append("_");
                String _name_32 = entity.getAttributes().get(0).getName();
                _builder.append(_name_32);
                _builder.append("Str.toLowerCase()) ");
                _builder.newLineIfNotEmpty();
                _builder.append("\t ");
                _builder.append(") ");
                _builder.newLine();
                _builder.append("\t\t\t\t\t   \t\t");
                _builder.append("{");
                _builder.newLine();
                _builder.append("\t");
                _builder.newLine();
                {
                  EList<Attribute> _attributes = entity.getAttributes();
                  for(final Attribute attribute : _attributes) {
                    {
                      String _compileType = this.compileType(attribute.getType());
                      boolean _equals = Objects.equal(_compileType, "int");
                      if (_equals) {
                        _builder.append("try {");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("iii");
                        String _name_33 = entity.getName();
                        _builder.append(_name_33, "\t");
                        _builder.append(".set");
                        String _name_34 = attribute.getName();
                        _builder.append(_name_34, "\t");
                        _builder.append("(Integer.valueOf( String.valueOf(sonObject");
                        String _name_35 = entity.getName();
                        _builder.append(_name_35, "\t");
                        _builder.append(".get(\"");
                        String _name_36 = attribute.getName();
                        _builder.append(_name_36, "\t");
                        _builder.append("\")) ));");
                        _builder.newLineIfNotEmpty();
                        _builder.append("   \t\t\t\t\t\t\t\t\t    ");
                        _builder.append("} catch (NumberFormatException e) {");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("System.out.println(\"当前输入的字符串超过类型限制，随机生成填入！\");");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("Random rand = new Random();");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("int minDigits = 2; // 最小位数");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("int maxDigits = 8; // 最大位数");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("iii");
                        String _name_37 = entity.getName();
                        _builder.append(_name_37, "   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append(".set");
                        String _name_38 = attribute.getName();
                        _builder.append(_name_38, "   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("(Integer.valueOf(randomNumber ));");
                        _builder.newLineIfNotEmpty();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("e.printStackTrace();");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t    ");
                        _builder.append("}catch (JSONException e) {");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("System.out.println(\"JSONObject [");
                        String _name_39 = attribute.getName();
                        _builder.append(_name_39, "   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("]没找到，出现异常，随机生成填入！\");");
                        _builder.newLineIfNotEmpty();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("Random rand = new Random();");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("int minDigits = 2; // 最小位数");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("int maxDigits = 8; // 最大位数");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("iii");
                        String _name_40 = entity.getName();
                        _builder.append(_name_40, "   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append(".set");
                        String _name_41 = attribute.getName();
                        _builder.append(_name_41, "   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("(Integer.valueOf(randomNumber ));");
                        _builder.newLineIfNotEmpty();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("e.printStackTrace();");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t    ");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t    ");
                        _builder.append("catch (Exception e) {");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("System.out.println(\"出现未知异常，随机生成填入！\");");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("Random rand = new Random();");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("int minDigits = 2; // 最小位数");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("int maxDigits = 8; // 最大位数");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("iii");
                        String _name_42 = entity.getName();
                        _builder.append(_name_42, "   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append(".set");
                        String _name_43 = attribute.getName();
                        _builder.append(_name_43, "   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("(Integer.valueOf(randomNumber ));");
                        _builder.newLineIfNotEmpty();
                        _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                        _builder.append("e.printStackTrace();");
                        _builder.newLine();
                        _builder.append("   \t\t\t\t\t\t\t\t\t    ");
                        _builder.append("}");
                        _builder.newLine();
                      } else {
                        String _compileType_1 = this.compileType(attribute.getType());
                        boolean _equals_1 = Objects.equal(_compileType_1, "boolean");
                        if (_equals_1) {
                          _builder.append("try {");
                          _builder.newLine();
                          _builder.append("       ");
                          _builder.append("iii");
                          String _name_44 = entity.getName();
                          _builder.append(_name_44, "       ");
                          _builder.append(".set");
                          String _name_45 = attribute.getName();
                          _builder.append(_name_45, "       ");
                          _builder.append("(Boolean.parseBoolean(sonObject");
                          String _name_46 = entity.getName();
                          _builder.append(_name_46, "       ");
                          _builder.append(".get(\"");
                          String _name_47 = attribute.getName();
                          _builder.append(_name_47, "       ");
                          _builder.append("\").toString() ));");
                          _builder.newLineIfNotEmpty();
                          _builder.append("    ");
                          _builder.append("} catch (Exception e) {");
                          _builder.newLine();
                          _builder.append("        ");
                          _builder.append("// handle the exception");
                          _builder.newLine();
                          _builder.append("        ");
                          _builder.append("System.out.println(\"发生了未知错误，随机生成填入！\");");
                          _builder.newLine();
                          _builder.append("        ");
                          _builder.append("iii");
                          String _name_48 = entity.getName();
                          _builder.append(_name_48, "        ");
                          _builder.append(".set");
                          String _name_49 = attribute.getName();
                          _builder.append(_name_49, "        ");
                          _builder.append("(Boolean.parseBoolean(\"false\" ));");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("e.printStackTrace();");
                          _builder.newLine();
                          _builder.append("        ");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("}");
                          _builder.newLine();
                        } else {
                          String _compileType_2 = this.compileType(attribute.getType());
                          boolean _equals_2 = Objects.equal(_compileType_2, "float");
                          if (_equals_2) {
                            _builder.append("try {");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("iii");
                            String _name_50 = entity.getName();
                            _builder.append(_name_50, "\t");
                            _builder.append(".set");
                            String _name_51 = attribute.getName();
                            _builder.append(_name_51, "\t");
                            _builder.append("(Float.parseFloat(sonObject");
                            String _name_52 = entity.getName();
                            _builder.append(_name_52, "\t");
                            _builder.append(".get(\"");
                            String _name_53 = attribute.getName();
                            _builder.append(_name_53, "\t");
                            _builder.append("\").toString()));");
                            _builder.newLineIfNotEmpty();
                            _builder.append("} catch (ArithmeticException e) {");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("System.out.println(\"yaml不能为0，随机生成填入！\");");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("e.printStackTrace();");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("Random rand = new Random();");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("float randomFloat = rand.nextFloat();");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("iii");
                            String _name_54 = entity.getName();
                            _builder.append(_name_54, "    ");
                            _builder.append(".set");
                            String _name_55 = attribute.getName();
                            _builder.append(_name_55, "    ");
                            _builder.append("(randomFloat);");
                            _builder.newLineIfNotEmpty();
                            _builder.append("    ");
                            _builder.newLine();
                            _builder.append("} catch (NumberFormatException e) {");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("System.out.println(\"yaml数字格式不正确，随机生成填入！\");");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("e.printStackTrace();");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("Random rand = new Random();");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("float randomFloat = rand.nextFloat();");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("iii");
                            String _name_56 = entity.getName();
                            _builder.append(_name_56, "    ");
                            _builder.append(".set");
                            String _name_57 = attribute.getName();
                            _builder.append(_name_57, "    ");
                            _builder.append("(randomFloat);");
                            _builder.newLineIfNotEmpty();
                            _builder.append("    ");
                            _builder.newLine();
                            _builder.append("} catch (Exception e) {");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("System.out.println(\"发生了未知异常，随机生成填入！\");");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("e.printStackTrace();");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("Random rand = new Random();");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("float randomFloat = rand.nextFloat();");
                            _builder.newLine();
                            _builder.append("    ");
                            _builder.append("iii");
                            String _name_58 = entity.getName();
                            _builder.append(_name_58, "    ");
                            _builder.append(".set");
                            String _name_59 = attribute.getName();
                            _builder.append(_name_59, "    ");
                            _builder.append("(randomFloat);");
                            _builder.newLineIfNotEmpty();
                            _builder.append("}");
                            _builder.newLine();
                          } else {
                            String _compileType_3 = this.compileType(attribute.getType());
                            boolean _equals_3 = Objects.equal(_compileType_3, "LocalDate");
                            if (_equals_3) {
                              _builder.append("String inputDate");
                              String _name_60 = attribute.getName();
                              _builder.append(_name_60);
                              _builder.append(" = sonObject");
                              String _name_61 = entity.getName();
                              _builder.append(_name_61);
                              _builder.append(".get(\"");
                              String _name_62 = attribute.getName();
                              _builder.append(_name_62);
                              _builder.append("\").toString();");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t");
                              _builder.append("try {");
                              _builder.newLine();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("Instant instant = Instant.ofEpochMilli(Long.parseLong(inputDate");
                              String _name_63 = attribute.getName();
                              _builder.append(_name_63, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("));");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("LocalDate localDate");
                              String _name_64 = entity.getName();
                              _builder.append(_name_64, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append(" = instant.atZone(ZoneId.systemDefault()).toLocalDate();");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("iii");
                              String _name_65 = entity.getName();
                              _builder.append(_name_65, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append(".set");
                              String _name_66 = attribute.getName();
                              _builder.append(_name_66, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("(localDate");
                              String _name_67 = entity.getName();
                              _builder.append(_name_67, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append(");");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t");
                              _builder.append("} catch (DateTimeParseException e) {");
                              _builder.newLine();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t\t");
                              _builder.append("System.out.println(\"发生了DateTimeParseException异常，随机生成填入！\");");
                              _builder.newLine();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("long startEpochDay");
                              String _name_68 = entity.getName();
                              _builder.append(_name_68, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append(" = LocalDate.of(2020, 1, 1).toEpochDay();");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t   \t\t\t\t\t\t\t\t        ");
                              _builder.append("long endEpochDay");
                              String _name_69 = entity.getName();
                              _builder.append(_name_69, "\t   \t\t\t\t\t\t\t\t        ");
                              _builder.append(" = LocalDate.of(2030, 1, 1).toEpochDay();");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t   \t\t\t\t\t\t\t\t        ");
                              _builder.append("long randomDay");
                              String _name_70 = entity.getName();
                              _builder.append(_name_70, "\t   \t\t\t\t\t\t\t\t        ");
                              _builder.append(" = ThreadLocalRandom.current().nextLong(startEpochDay");
                              String _name_71 = entity.getName();
                              _builder.append(_name_71, "\t   \t\t\t\t\t\t\t\t        ");
                              _builder.append(", endEpochDay");
                              String _name_72 = entity.getName();
                              _builder.append(_name_72, "\t   \t\t\t\t\t\t\t\t        ");
                              _builder.append(");");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("LocalDate randomDate");
                              String _name_73 = entity.getName();
                              _builder.append(_name_73, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append(" = LocalDate.ofEpochDay(randomDay");
                              String _name_74 = entity.getName();
                              _builder.append(_name_74, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append(");");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("iii");
                              String _name_75 = entity.getName();
                              _builder.append(_name_75, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append(".set");
                              String _name_76 = attribute.getName();
                              _builder.append(_name_76, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("(randomDate");
                              String _name_77 = entity.getName();
                              _builder.append(_name_77, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append(");");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                              _builder.newLine();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t");
                              _builder.append("}catch (Exception e) {");
                              _builder.newLine();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("System.out.println(\"发生了未知异常，随机生成填入！\");");
                              _builder.newLine();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("long startEpochDay");
                              String _name_78 = entity.getName();
                              _builder.append(_name_78, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append(" = LocalDate.of(2020, 1, 1).toEpochDay();");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t   \t\t\t\t\t\t\t\t        ");
                              _builder.append("long endEpochDay");
                              String _name_79 = entity.getName();
                              _builder.append(_name_79, "\t   \t\t\t\t\t\t\t\t        ");
                              _builder.append(" = LocalDate.of(2030, 1, 1).toEpochDay();");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t   \t\t\t\t\t\t\t\t        ");
                              _builder.append("long randomDay");
                              String _name_80 = entity.getName();
                              _builder.append(_name_80, "\t   \t\t\t\t\t\t\t\t        ");
                              _builder.append(" = ThreadLocalRandom.current().nextLong(startEpochDay");
                              String _name_81 = entity.getName();
                              _builder.append(_name_81, "\t   \t\t\t\t\t\t\t\t        ");
                              _builder.append(", endEpochDay");
                              String _name_82 = entity.getName();
                              _builder.append(_name_82, "\t   \t\t\t\t\t\t\t\t        ");
                              _builder.append(");");
                              _builder.newLineIfNotEmpty();
                              _builder.newLine();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("LocalDate randomDate");
                              String _name_83 = entity.getName();
                              _builder.append(_name_83, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append(" = LocalDate.ofEpochDay(randomDay");
                              String _name_84 = entity.getName();
                              _builder.append(_name_84, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append(");");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("iii");
                              String _name_85 = entity.getName();
                              _builder.append(_name_85, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append(".set");
                              String _name_86 = attribute.getName();
                              _builder.append(_name_86, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("(randomDate");
                              String _name_87 = entity.getName();
                              _builder.append(_name_87, "   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append(");");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                              _builder.newLine();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                              _builder.newLine();
                              _builder.append("   \t\t\t\t\t\t\t\t\t\t");
                              _builder.append("}");
                              _builder.newLine();
                            } else {
                              String _compileType_4 = this.compileType(attribute.getType());
                              boolean _equals_4 = Objects.equal(_compileType_4, "String");
                              if (_equals_4) {
                                _builder.append("iii");
                                String _name_88 = entity.getName();
                                _builder.append(_name_88);
                                _builder.append(".set");
                                String _name_89 = attribute.getName();
                                _builder.append(_name_89);
                                _builder.append("(sonObject");
                                String _name_90 = entity.getName();
                                _builder.append(_name_90);
                                _builder.append(".get(\"");
                                String _name_91 = attribute.getName();
                                _builder.append(_name_91);
                                _builder.append("\").toString());");
                                _builder.newLineIfNotEmpty();
                              } else {
                                _builder.append("iii");
                                String _name_92 = entity.getName();
                                _builder.append(_name_92);
                                _builder.append(".set");
                                String _name_93 = attribute.getName();
                                _builder.append(_name_93);
                                _builder.append("(");
                                String _compileType_5 = this.compileType(attribute.getType());
                                _builder.append(_compileType_5);
                                _builder.append(".");
                                String _name_94 = this.getOneElement(attribute.getType()).getName();
                                _builder.append(_name_94);
                                _builder.append(");");
                                _builder.newLineIfNotEmpty();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("   \t\t\t\t            \t");
                _builder.newLine();
                _builder.append("   \t\t\t\t            \t");
                String _name_95 = entity.getName();
                _builder.append(_name_95, "   \t\t\t\t            \t");
                _builder.append("_filtereddata = ");
                String _name_96 = entity.getName();
                _builder.append(_name_96, "   \t\t\t\t            \t");
                _builder.append("_filtereddata +\"\\r\\n\" + ");
                String _name_97 = entity.getName();
                _builder.append(_name_97, "   \t\t\t\t            \t");
                _builder.append("ToString(iii");
                String _name_98 = entity.getName();
                _builder.append(_name_98, "   \t\t\t\t            \t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("   \t\t\t\t            \t");
                _builder.newLine();
                _builder.append("   \t\t\t\t            \t");
                String _name_99 = entity.getName();
                _builder.append(_name_99, "   \t\t\t\t            \t");
                _builder.append("_");
                String _name_100 = entity.getAttributes().get(0).getName();
                _builder.append(_name_100, "   \t\t\t\t            \t");
                _builder.append("Set.add(");
                String _name_101 = entity.getName();
                _builder.append(_name_101, "   \t\t\t\t            \t");
                _builder.append("_");
                String _name_102 = entity.getAttributes().get(0).getName();
                _builder.append(_name_102, "   \t\t\t\t            \t");
                _builder.append("Str.toLowerCase());");
                _builder.newLineIfNotEmpty();
                _builder.append("   \t\t\t\t            \t");
                String _name_103 = entity.getName();
                _builder.append(_name_103, "   \t\t\t\t            \t");
                _builder.append("_");
                String _name_104 = entity.getAttributes().get(1).getName();
                _builder.append(_name_104, "   \t\t\t\t            \t");
                _builder.append("Set.add(");
                String _name_105 = entity.getName();
                _builder.append(_name_105, "   \t\t\t\t            \t");
                _builder.append("_");
                String _name_106 = entity.getAttributes().get(1).getName();
                _builder.append(_name_106, "   \t\t\t\t            \t");
                _builder.append("Str.toLowerCase());");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t");
                _builder.newLine();
              } else {
                _builder.append("if (!");
                String _name_107 = entity.getName();
                _builder.append(_name_107);
                _builder.append("_");
                String _name_108 = entity.getAttributes().get(0).getName();
                _builder.append(_name_108);
                _builder.append("Set.contains(");
                String _name_109 = entity.getName();
                _builder.append(_name_109);
                _builder.append("_");
                String _name_110 = entity.getAttributes().get(0).getName();
                _builder.append(_name_110);
                _builder.append("Str.toLowerCase()) ) ");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t   \t\t");
                _builder.append("{");
                _builder.newLine();
                {
                  String _compileType_6 = this.compileType(entity.getAttributes().get(0).getType());
                  boolean _equals_5 = Objects.equal(_compileType_6, "int");
                  if (_equals_5) {
                    _builder.append("try {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("iii");
                    String _name_111 = entity.getName();
                    _builder.append(_name_111, "\t");
                    _builder.append(".set");
                    String _name_112 = entity.getAttributes().get(0).getName();
                    _builder.append(_name_112, "\t");
                    _builder.append("(Integer.valueOf( String.valueOf(sonObject");
                    String _name_113 = entity.getName();
                    _builder.append(_name_113, "\t");
                    _builder.append(".get(\"");
                    String _name_114 = entity.getAttributes().get(0).getName();
                    _builder.append(_name_114, "\t");
                    _builder.append("\")) ));");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t\t\t\t\t    ");
                    _builder.append("} catch (NumberFormatException e) {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("System.out.println(\"当前输入的字符串超过类型限制，随机生成填入！\");");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("Random rand = new Random();");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("int minDigits = 2; // 最小位数");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("int maxDigits = 8; // 最大位数");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("iii");
                    String _name_115 = entity.getName();
                    _builder.append(_name_115, "\t\t\t\t\t\t\t\t        ");
                    _builder.append(".set");
                    String _name_116 = entity.getAttributes().get(0).getName();
                    _builder.append(_name_116, "\t\t\t\t\t\t\t\t        ");
                    _builder.append("(Integer.valueOf(randomNumber ));");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("e.printStackTrace();");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t    ");
                    _builder.append("}catch (JSONException e) {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("System.out.println(\"JSONObject [");
                    String _name_117 = entity.getAttributes().get(0).getName();
                    _builder.append(_name_117, "\t\t\t\t\t\t\t\t        ");
                    _builder.append("]没找到，随机生成填入！\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("Random rand = new Random();");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("int minDigits = 2; // 最小位数");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("int maxDigits = 8; // 最大位数");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("iii");
                    String _name_118 = entity.getName();
                    _builder.append(_name_118, "\t\t\t\t\t\t\t\t        ");
                    _builder.append(".set");
                    String _name_119 = entity.getAttributes().get(0).getName();
                    _builder.append(_name_119, "\t\t\t\t\t\t\t\t        ");
                    _builder.append("(Integer.valueOf(randomNumber ));");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("e.printStackTrace();");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t    ");
                    _builder.append("}catch (Exception e) {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("System.out.println(\"出现未知异常，随机生成填入！\");");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("Random rand = new Random();");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("int minDigits = 2; // 最小位数");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("int maxDigits = 8; // 最大位数");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("iii");
                    String _name_120 = entity.getName();
                    _builder.append(_name_120, "\t\t\t\t\t\t\t\t        ");
                    _builder.append(".set");
                    String _name_121 = entity.getAttributes().get(0).getName();
                    _builder.append(_name_121, "\t\t\t\t\t\t\t\t        ");
                    _builder.append("(Integer.valueOf(randomNumber ));");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t\t\t\t\t        ");
                    _builder.append("e.printStackTrace();");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t\t\t    ");
                    _builder.append("}");
                    _builder.newLine();
                  } else {
                    String _compileType_7 = this.compileType(entity.getAttributes().get(0).getType());
                    boolean _equals_6 = Objects.equal(_compileType_7, "boolean");
                    if (_equals_6) {
                      _builder.append("try {");
                      _builder.newLine();
                      _builder.append("   \t\t\t\t\t\t\t\t\t       ");
                      _builder.append("iii");
                      String _name_122 = entity.getName();
                      _builder.append(_name_122, "   \t\t\t\t\t\t\t\t\t       ");
                      _builder.append(".set");
                      String _name_123 = entity.getAttributes().get(0).getName();
                      _builder.append(_name_123, "   \t\t\t\t\t\t\t\t\t       ");
                      _builder.append("(Boolean.parseBoolean(sonObject");
                      String _name_124 = entity.getName();
                      _builder.append(_name_124, "   \t\t\t\t\t\t\t\t\t       ");
                      _builder.append(".get(\"");
                      String _name_125 = entity.getAttributes().get(0).getName();
                      _builder.append(_name_125, "   \t\t\t\t\t\t\t\t\t       ");
                      _builder.append("\").toString() ));");
                      _builder.newLineIfNotEmpty();
                      _builder.append("   \t\t\t\t\t\t\t\t\t    ");
                      _builder.append("} catch (Exception e) {");
                      _builder.newLine();
                      _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                      _builder.append("// handle the exception");
                      _builder.newLine();
                      _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                      _builder.append("System.out.println(\"发生了未知错误，随机生成填入！\");");
                      _builder.newLine();
                      _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                      _builder.append("iii");
                      String _name_126 = entity.getName();
                      _builder.append(_name_126, "   \t\t\t\t\t\t\t\t\t        ");
                      _builder.append(".set");
                      String _name_127 = entity.getAttributes().get(0).getName();
                      _builder.append(_name_127, "   \t\t\t\t\t\t\t\t\t        ");
                      _builder.append("(Boolean.parseBoolean(\"false\" ));");
                      _builder.newLineIfNotEmpty();
                      _builder.append("   \t\t\t\t\t\t\t\t\t        ");
                      _builder.append("e.printStackTrace();   \t\t\t\t\t\t\t\t\t    ");
                      _builder.newLine();
                      _builder.append("   \t\t\t\t\t\t\t\t\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t\t\t\t\t\t\t\t");
                      _builder.newLine();
                    } else {
                      String _compileType_8 = this.compileType(entity.getAttributes().get(0).getType());
                      boolean _equals_7 = Objects.equal(_compileType_8, "float");
                      if (_equals_7) {
                        _builder.append("try {");
                        _builder.newLine();
                        _builder.append("   \t");
                        _builder.append("iii");
                        String _name_128 = entity.getName();
                        _builder.append(_name_128, "   \t");
                        _builder.append(".set");
                        String _name_129 = entity.getAttributes().get(0).getName();
                        _builder.append(_name_129, "   \t");
                        _builder.append("(Float.parseFloat(sonObject");
                        String _name_130 = entity.getName();
                        _builder.append(_name_130, "   \t");
                        _builder.append(".get(\"");
                        String _name_131 = entity.getAttributes().get(0).getName();
                        _builder.append(_name_131, "   \t");
                        _builder.append("\").toString()));");
                        _builder.newLineIfNotEmpty();
                        _builder.append("} catch (ArithmeticException e) {");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("System.out.println(\"yaml不能为0，随机生成填入！\");");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("e.printStackTrace();");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("Random rand = new Random();");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("float randomFloat = rand.nextFloat();");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("iii");
                        String _name_132 = entity.getName();
                        _builder.append(_name_132, "    ");
                        _builder.append(".set");
                        String _name_133 = entity.getAttributes().get(0).getName();
                        _builder.append(_name_133, "    ");
                        _builder.append("(randomFloat);");
                        _builder.newLineIfNotEmpty();
                        _builder.append("    ");
                        _builder.newLine();
                        _builder.append("} catch (NumberFormatException e) {");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("System.out.println(\"yaml数字格式不正确，随机生成填入！\");");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("e.printStackTrace();");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("Random rand = new Random();");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("float randomFloat = rand.nextFloat();");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("iii");
                        String _name_134 = entity.getName();
                        _builder.append(_name_134, "    ");
                        _builder.append(".set");
                        String _name_135 = entity.getAttributes().get(0).getName();
                        _builder.append(_name_135, "    ");
                        _builder.append("(randomFloat);");
                        _builder.newLineIfNotEmpty();
                        _builder.append("    ");
                        _builder.newLine();
                        _builder.append("} catch (Exception e) {");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("System.out.println(\"发生了未知异常，随机生成填入！\");");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("e.printStackTrace();");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("Random rand = new Random();");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("float randomFloat = rand.nextFloat();");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("iii");
                        String _name_136 = entity.getName();
                        _builder.append(_name_136, "    ");
                        _builder.append(".set");
                        String _name_137 = entity.getAttributes().get(0).getName();
                        _builder.append(_name_137, "    ");
                        _builder.append("(randomFloat);");
                        _builder.newLineIfNotEmpty();
                        _builder.append("}");
                        _builder.newLine();
                      } else {
                        String _compileType_9 = this.compileType(entity.getAttributes().get(0).getType());
                        boolean _equals_8 = Objects.equal(_compileType_9, "LocalDate");
                        if (_equals_8) {
                          _builder.append("String inputDate");
                          String _name_138 = entity.getAttributes().get(0).getName();
                          _builder.append(_name_138);
                          _builder.append(" = sonObject");
                          String _name_139 = entity.getName();
                          _builder.append(_name_139);
                          _builder.append(".get(\"");
                          String _name_140 = entity.getAttributes().get(0).getName();
                          _builder.append(_name_140);
                          _builder.append("\").toString();");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t\t\t\t\t\t\t");
                          _builder.append("try {");
                          _builder.newLine();
                          _builder.append("\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("Instant instant = Instant.ofEpochMilli(Long.parseLong(inputDate");
                          String _name_141 = entity.getAttributes().get(0).getName();
                          _builder.append(_name_141, "\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("));");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("LocalDate localDate");
                          String _name_142 = entity.getName();
                          _builder.append(_name_142, "\t\t\t\t\t\t\t\t\t    ");
                          _builder.append(" = instant.atZone(ZoneId.systemDefault()).toLocalDate();");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("iii");
                          String _name_143 = entity.getName();
                          _builder.append(_name_143, "\t\t\t\t\t\t\t\t\t    ");
                          _builder.append(".set");
                          String _name_144 = entity.getAttributes().get(0).getName();
                          _builder.append(_name_144, "\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("(localDate");
                          String _name_145 = entity.getName();
                          _builder.append(_name_145, "\t\t\t\t\t\t\t\t\t    ");
                          _builder.append(");");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t\t\t\t\t\t\t");
                          _builder.append("} catch (DateTimeParseException e) {");
                          _builder.newLine();
                          _builder.append("\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("System.out.println(\"发生了DateTimeParseException异常，随机生成填入！\");");
                          _builder.newLine();
                          _builder.append("\t\t\t\t\t\t\t\t\t    ");
                          _builder.newLine();
                          _builder.append("\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("long startEpochDay");
                          String _name_146 = entity.getName();
                          _builder.append(_name_146, "\t\t\t\t\t\t\t\t\t    ");
                          _builder.append(" = LocalDate.of(2020, 1, 1).toEpochDay();");
                          _builder.newLineIfNotEmpty();
                          _builder.append("   \t\t\t\t\t\t\t\t        ");
                          _builder.append("long endEpochDay");
                          String _name_147 = entity.getName();
                          _builder.append(_name_147, "   \t\t\t\t\t\t\t\t        ");
                          _builder.append(" = LocalDate.of(2030, 1, 1).toEpochDay();");
                          _builder.newLineIfNotEmpty();
                          _builder.append("   \t\t\t\t\t\t\t\t        ");
                          _builder.append("long randomDay");
                          String _name_148 = entity.getName();
                          _builder.append(_name_148, "   \t\t\t\t\t\t\t\t        ");
                          _builder.append(" = ThreadLocalRandom.current().nextLong(startEpochDay");
                          String _name_149 = entity.getName();
                          _builder.append(_name_149, "   \t\t\t\t\t\t\t\t        ");
                          _builder.append(", endEpochDay");
                          String _name_150 = entity.getName();
                          _builder.append(_name_150, "   \t\t\t\t\t\t\t\t        ");
                          _builder.append(");");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("LocalDate randomDate");
                          String _name_151 = entity.getName();
                          _builder.append(_name_151, "\t\t\t\t\t\t\t\t\t    ");
                          _builder.append(" = LocalDate.ofEpochDay(randomDay");
                          String _name_152 = entity.getName();
                          _builder.append(_name_152, "\t\t\t\t\t\t\t\t\t    ");
                          _builder.append(");");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("iii");
                          String _name_153 = entity.getName();
                          _builder.append(_name_153, "\t\t\t\t\t\t\t\t\t    ");
                          _builder.append(".set");
                          String _name_154 = entity.getAttributes().get(0).getName();
                          _builder.append(_name_154, "\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("(randomDate");
                          String _name_155 = entity.getName();
                          _builder.append(_name_155, "\t\t\t\t\t\t\t\t\t    ");
                          _builder.append(");");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                          _builder.newLine();
                          _builder.append("\t\t\t\t\t\t\t\t\t");
                          _builder.append("}catch (Exception e) {");
                          _builder.newLine();
                          _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("System.out.println(\"发生了未知异常，随机生成填入！\");");
                          _builder.newLine();
                          _builder.append("   \t\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("long startEpochDay");
                          String _name_156 = entity.getName();
                          _builder.append(_name_156, "   \t\t\t\t\t\t\t\t\t\t    ");
                          _builder.append(" = LocalDate.of(2020, 1, 1).toEpochDay();");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t\t\t\t\t\t\t        ");
                          _builder.append("long endEpochDay");
                          String _name_157 = entity.getName();
                          _builder.append(_name_157, "\t\t\t\t\t\t\t\t\t        ");
                          _builder.append(" = LocalDate.of(2030, 1, 1).toEpochDay();");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t\t\t\t\t\t\t        ");
                          _builder.append("long randomDay");
                          String _name_158 = entity.getName();
                          _builder.append(_name_158, "\t\t\t\t\t\t\t\t\t        ");
                          _builder.append(" = ThreadLocalRandom.current().nextLong(startEpochDay");
                          String _name_159 = entity.getName();
                          _builder.append(_name_159, "\t\t\t\t\t\t\t\t\t        ");
                          _builder.append(", endEpochDay");
                          String _name_160 = entity.getName();
                          _builder.append(_name_160, "\t\t\t\t\t\t\t\t\t        ");
                          _builder.append(");");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("LocalDate randomDate");
                          String _name_161 = entity.getName();
                          _builder.append(_name_161, "\t\t\t\t\t\t\t\t\t\t    ");
                          _builder.append(" = LocalDate.ofEpochDay(randomDay");
                          String _name_162 = entity.getName();
                          _builder.append(_name_162, "\t\t\t\t\t\t\t\t\t\t    ");
                          _builder.append(");");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("iii");
                          String _name_163 = entity.getName();
                          _builder.append(_name_163, "\t\t\t\t\t\t\t\t\t\t    ");
                          _builder.append(".set");
                          String _name_164 = entity.getAttributes().get(0).getName();
                          _builder.append(_name_164, "\t\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("(randomDate");
                          String _name_165 = entity.getName();
                          _builder.append(_name_165, "\t\t\t\t\t\t\t\t\t\t    ");
                          _builder.append(");");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t\t\t\t\t\t\t\t    ");
                          _builder.append("System.out.println(\"错误消息：\" + e.getMessage());");
                          _builder.newLine();
                          _builder.append("   \t\t\t\t\t\t\t\t\t");
                          _builder.append("}");
                          _builder.newLine();
                        } else {
                          String _compileType_10 = this.compileType(entity.getAttributes().get(0).getType());
                          boolean _equals_9 = Objects.equal(_compileType_10, "String");
                          if (_equals_9) {
                            _builder.append("iii");
                            String _name_166 = entity.getName();
                            _builder.append(_name_166);
                            _builder.append(".set");
                            String _name_167 = entity.getAttributes().get(0).getName();
                            _builder.append(_name_167);
                            _builder.append("(sonObject");
                            String _name_168 = entity.getName();
                            _builder.append(_name_168);
                            _builder.append(".get(\"");
                            String _name_169 = entity.getAttributes().get(0).getName();
                            _builder.append(_name_169);
                            _builder.append("\").toString());");
                            _builder.newLineIfNotEmpty();
                          } else {
                            _builder.append("iii");
                            String _name_170 = entity.getName();
                            _builder.append(_name_170);
                            _builder.append(".set");
                            String _name_171 = entity.getAttributes().get(0).getName();
                            _builder.append(_name_171);
                            _builder.append("(");
                            String _compileType_11 = this.compileType(entity.getAttributes().get(0).getType());
                            _builder.append(_compileType_11);
                            _builder.append(".");
                            String _name_172 = this.getOneElement(entity.getAttributes().get(0).getType()).getName();
                            _builder.append(_name_172);
                            _builder.append(");");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.newLine();
                _builder.newLine();
                _builder.append("\t");
                _builder.newLine();
                _builder.append("   \t\t\t\t            \t");
                String _name_173 = entity.getName();
                _builder.append(_name_173, "   \t\t\t\t            \t");
                _builder.append("_filtereddata = ");
                String _name_174 = entity.getName();
                _builder.append(_name_174, "   \t\t\t\t            \t");
                _builder.append("_filtereddata +\"\\r\\n\" + ");
                String _name_175 = entity.getName();
                _builder.append(_name_175, "   \t\t\t\t            \t");
                _builder.append("ToString(iii");
                String _name_176 = entity.getName();
                _builder.append(_name_176, "   \t\t\t\t            \t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("   \t\t\t\t            \t");
                String _name_177 = entity.getName();
                _builder.append(_name_177, "   \t\t\t\t            \t");
                _builder.append("_");
                String _name_178 = entity.getAttributes().get(0).getName();
                _builder.append(_name_178, "   \t\t\t\t            \t");
                _builder.append("Set.add(");
                String _name_179 = entity.getName();
                _builder.append(_name_179, "   \t\t\t\t            \t");
                _builder.append("_");
                String _name_180 = entity.getAttributes().get(0).getName();
                _builder.append(_name_180, "   \t\t\t\t            \t");
                _builder.append("Str.toLowerCase());\t\t\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t   \t\t");
                _builder.newLine();
              }
            }
            _builder.append("\t   \t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("\t   \t ");
        _builder.append("} catch (JSONException e) {");
        _builder.newLine();
        _builder.append("\t      \t        ");
        _builder.append("// 处理异常");
        _builder.newLine();
        _builder.append("\t      \t        ");
        _builder.append("e.printStackTrace();");
        _builder.newLine();
        _builder.append("\t      \t        ");
        _builder.append("System.out.println(\"JSONException，skip...\");");
        _builder.newLine();
        _builder.append("\t      \t        ");
        _builder.append("continue;");
        _builder.newLine();
        _builder.append("\t      \t    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t   \t    ");
        _builder.append("}   \t");
        _builder.newLine();
        _builder.append("\t   \t    ");
        _builder.append("int counts_");
        String _name_181 = entity.getName();
        _builder.append(_name_181, "\t   \t    ");
        _builder.append(" = countChar(");
        String _name_182 = entity.getName();
        _builder.append(_name_182, "\t   \t    ");
        _builder.append("_filtereddata);");
        _builder.newLineIfNotEmpty();
        _builder.append("System.out.println(\"de-duplication，");
        String _name_183 = entity.getName();
        _builder.append(_name_183);
        _builder.append("：check \"+ counts_");
        String _name_184 = entity.getName();
        _builder.append(_name_184);
        _builder.append("+\"  yaml\");\t");
        _builder.newLineIfNotEmpty();
        _builder.append("            ");
        _builder.append("int ");
        String _name_185 = entity.getName();
        _builder.append(_name_185, "            ");
        _builder.append("Value = numberentities.get(\"");
        String _name_186 = entity.getName();
        _builder.append(_name_186, "            ");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("            ");
        _builder.append("int ");
        String _name_187 = entity.getName();
        _builder.append(_name_187, "            ");
        _builder.append("RemainNumber = ");
        String _name_188 = entity.getName();
        _builder.append(_name_188, "            ");
        _builder.append("Value - counts_");
        String _name_189 = entity.getName();
        _builder.append(_name_189, "            ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("            ");
        _builder.append("if(");
        String _name_190 = entity.getName();
        _builder.append(_name_190, "            ");
        _builder.append("RemainNumber > 0) ");
        _builder.newLineIfNotEmpty();
        _builder.append("            ");
        _builder.append("{");
        _builder.newLine();
        _builder.append("            \t");
        _builder.append("System.out.println(\"Totyal generate：\"+ ");
        String _name_191 = entity.getName();
        _builder.append(_name_191, "            \t");
        _builder.append("Value+\"，now：\"+ ");
        String _name_192 = entity.getName();
        _builder.append(_name_192, "            \t");
        _builder.append("RemainNumber+\"  yaml \\r\\n\");\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t        \t");
        _builder.append("if(");
        String _name_193 = entity.getName();
        _builder.append(_name_193, "\t        \t");
        _builder.append("RemainNumber > 0 && ");
        String _name_194 = entity.getName();
        _builder.append(_name_194, "\t        \t");
        _builder.append("RemainNumber <10) ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t            ");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t            \t");
        String _name_195 = entity.getName();
        _builder.append(_name_195, "\t            \t");
        _builder.append("RemainNumber = 10;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t            ");
        _builder.append("}else if(");
        String _name_196 = entity.getName();
        _builder.append(_name_196, "\t            ");
        _builder.append("RemainNumber >= 10 && ");
        String _name_197 = entity.getName();
        _builder.append(_name_197, "\t            ");
        _builder.append("RemainNumber <=30)");
        _builder.newLineIfNotEmpty();
        _builder.append("\t            ");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t            \t");
        String _name_198 = entity.getName();
        _builder.append(_name_198, "\t            \t");
        _builder.append("RemainNumber = 30;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t            ");
        _builder.append("}else{}");
        _builder.newLine();
        _builder.append("\t            ");
        _builder.newLine();
        _builder.append("            \t");
        _builder.append("String ");
        String _name_199 = entity.getName();
        _builder.append(_name_199, "            \t");
        _builder.append("RemainChatReturn = gui.OpenAiSpeaker.Large_Chat_ReturnMessage(\"");
        String _name_200 = entity.getName();
        _builder.append(_name_200, "            \t");
        _builder.append("\",");
        String _name_201 = entity.getName();
        _builder.append(_name_201, "            \t");
        _builder.append("RemainNumber);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("            \t");
        _builder.newLine();
        _builder.append("            \t");
        _builder.append("int int_");
        String _name_202 = entity.getName();
        _builder.append(_name_202, "            \t");
        _builder.append("_RemainNumber = ");
        String _name_203 = entity.getName();
        _builder.append(_name_203, "            \t");
        _builder.append("RemainChatReturn.indexOf(\"-\");");
        _builder.newLineIfNotEmpty();
        _builder.append("            \t");
        _builder.append("if(int_");
        String _name_204 = entity.getName();
        _builder.append(_name_204, "            \t");
        _builder.append("_RemainNumber >=0) {");
        _builder.newLineIfNotEmpty();
        _builder.append("            \t\t");
        _builder.append("String new_sub_");
        String _name_205 = entity.getName();
        _builder.append(_name_205, "            \t\t");
        _builder.append("_RemainNumber = ");
        String _name_206 = entity.getName();
        _builder.append(_name_206, "            \t\t");
        _builder.append("RemainChatReturn.substring(int_");
        String _name_207 = entity.getName();
        _builder.append(_name_207, "            \t\t");
        _builder.append("_RemainNumber);");
        _builder.newLineIfNotEmpty();
        _builder.append("            \t\t");
        String _name_208 = entity.getName();
        _builder.append(_name_208, "            \t\t");
        _builder.append("_filtereddata = ");
        String _name_209 = entity.getName();
        _builder.append(_name_209, "            \t\t");
        _builder.append("_filtereddata +\"\\r\\n\"+ new_sub_");
        String _name_210 = entity.getName();
        _builder.append(_name_210, "            \t\t");
        _builder.append("_RemainNumber;");
        _builder.newLineIfNotEmpty();
        _builder.append("            \t");
        _builder.append("}else {");
        _builder.newLine();
        _builder.append("            \t\t");
        String _name_211 = entity.getName();
        _builder.append(_name_211, "            \t\t");
        _builder.append("_filtereddata = ");
        String _name_212 = entity.getName();
        _builder.append(_name_212, "            \t\t");
        _builder.append("_filtereddata +\"\\r\\n\"+ ");
        String _name_213 = entity.getName();
        _builder.append(_name_213, "            \t\t");
        _builder.append("RemainChatReturn;");
        _builder.newLineIfNotEmpty();
        _builder.append("            \t");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("               ");
        String _name_214 = entity.getName();
        _builder.append(_name_214, "               ");
        _builder.append("_filtereddata = EntityManager.YamlFilter(");
        String _name_215 = entity.getName();
        _builder.append(_name_215, "               ");
        _builder.append("_filtereddata, numberentities, 2 ,\"");
        String _name_216 = entity.getName();
        _builder.append(_name_216, "               ");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("            ");
        _builder.append("}else{");
        _builder.newLine();
        _builder.append("            \t");
        _builder.append("System.out.println(\"yes，");
        String _name_217 = entity.getName();
        _builder.append(_name_217, "            \t");
        _builder.append("RemainNumber < 0：\"+");
        String _name_218 = entity.getName();
        _builder.append(_name_218, "            \t");
        _builder.append("RemainNumber);");
        _builder.newLineIfNotEmpty();
        _builder.append("            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("            ");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String setEntityToYamlStringFilter(final Iterable<Entity> sEntity, final Iterable<Entity> ssEntity, final Iterable<Entity> sssEntity, final Iterable<Contract> sContract) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.append("String filtereddata = \"\"  ");
    _builder.newLine();
    {
      for(final Entity entity : sEntity) {
        _builder.append("\t\t");
        _builder.append("+ ");
        String _name = entity.getName();
        _builder.append(_name, "\t\t");
        _builder.append("_filtereddata");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int counts_filtereddata = countChar(filtereddata);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"De-duplication，total check： \"+ counts_filtereddata+\"  yaml\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(return_Code == 1) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return filtereddata;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(return_Code == 2) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("switch (returnString) {");
    _builder.newLine();
    {
      for(final Entity entity_1 : ssEntity) {
        _builder.append("\t\t\t    ");
        _builder.append("case \"");
        String _name_1 = entity_1.getName();
        _builder.append(_name_1, "\t\t\t    ");
        _builder.append("\":");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t    ");
        _builder.append("\t");
        _builder.append("return ");
        String _name_2 = entity_1.getName();
        _builder.append(_name_2, "\t\t\t    \t");
        _builder.append("_filtereddata;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t    ");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      for(final Entity entity_2 : sssEntity) {
        _builder.append("public static String ");
        String _name_3 = entity_2.getName();
        _builder.append(_name_3);
        _builder.append("ToString(");
        String _name_4 = entity_2.getName();
        _builder.append(_name_4);
        _builder.append(" ");
        String _name_5 = entity_2.getName();
        _builder.append(_name_5);
        _builder.append("Str) ");
        _builder.newLineIfNotEmpty();
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t        \t");
        _builder.append("String template = \"- \\r\\n\"");
        _builder.newLine();
        {
          EList<Attribute> _attributes = entity_2.getAttributes();
          for(final Attribute attribute : _attributes) {
            {
              String _compileType = this.compileType(attribute.getType());
              boolean _equals = Objects.equal(_compileType, "int");
              if (_equals) {
                _builder.append("+\"  ");
                String _name_6 = attribute.getName();
                _builder.append(_name_6);
                _builder.append(": %s\\n\" ");
                _builder.newLineIfNotEmpty();
              } else {
                String _compileType_1 = this.compileType(attribute.getType());
                boolean _equals_1 = Objects.equal(_compileType_1, "boolean");
                if (_equals_1) {
                  _builder.append("+\"  ");
                  String _name_7 = attribute.getName();
                  _builder.append(_name_7);
                  _builder.append(": %s\\n\" \t");
                  _builder.newLineIfNotEmpty();
                } else {
                  String _compileType_2 = this.compileType(attribute.getType());
                  boolean _equals_2 = Objects.equal(_compileType_2, "float");
                  if (_equals_2) {
                    _builder.append("+\"  ");
                    String _name_8 = attribute.getName();
                    _builder.append(_name_8);
                    _builder.append(": %.2f\\n\" ");
                    _builder.newLineIfNotEmpty();
                  } else {
                    String _compileType_3 = this.compileType(attribute.getType());
                    boolean _equals_3 = Objects.equal(_compileType_3, "LocalDate");
                    if (_equals_3) {
                      _builder.append("+\"  ");
                      String _name_9 = attribute.getName();
                      _builder.append(_name_9);
                      _builder.append(": %s\\n\" ");
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _compileType_4 = this.compileType(attribute.getType());
                      boolean _equals_4 = Objects.equal(_compileType_4, "String");
                      if (_equals_4) {
                        _builder.append("+\"  ");
                        String _name_10 = attribute.getName();
                        _builder.append(_name_10);
                        _builder.append(": %s\\n\" ");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("+\"  ");
                        String _name_11 = attribute.getName();
                        _builder.append(_name_11);
                        _builder.append(": %s\\n\" ");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
            _builder.append("\t            \t");
          }
        }
        _builder.append("+\"\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t        \t");
        _builder.newLine();
        _builder.append("\t        \t");
        _builder.append("return String.format(");
        _builder.newLine();
        _builder.append("\t        \t");
        _builder.append("template, ");
        _builder.newLine();
        {
          EList<Attribute> _attributes_1 = entity_2.getAttributes();
          for(final Attribute attribute_1 : _attributes_1) {
            String _name_12 = entity_2.getName();
            _builder.append(_name_12);
            _builder.append("Str.get");
            String _name_13 = attribute_1.getName();
            _builder.append(_name_13);
            _builder.append("(), ");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t        \t");
        _builder.append("\"\");");
        _builder.newLine();
        _builder.append("\t\t ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public static int countChar(String str) {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("int count = 0;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("char c = \'-\';");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("for (int i = 0; i < str.length(); i++) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("if (str.charAt(i) == c) {");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("if (str.charAt(i + 1) == \' \') {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("count++;");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("return count;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
