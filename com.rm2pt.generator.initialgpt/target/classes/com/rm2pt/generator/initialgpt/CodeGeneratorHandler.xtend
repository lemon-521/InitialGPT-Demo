/*
 * RM2PT Generator Runtime
 * generated by RM2PT v1.3.0
 */		
package com.rm2pt.generator.initialgpt

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.IHandler;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.util.URI;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.ui.handlers.HandlerUtil;
import org.eclipse.xtext.ui.resource.IResourceSetProvider;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.xtext.builder.EclipseResourceFileSystemAccess2
import org.eclipse.xtext.generator.GeneratorContext
import org.eclipse.jface.text.TextSelection
import java.io.File
import java.io.FileInputStream
import java.io.FileNotFoundException
import java.io.IOException
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Platform

class CodeGeneratorHandler extends AbstractHandler implements IHandler {
	
	@Inject
    com.rm2pt.generator.initialgpt.CodeGenerator generator;
 
    @Inject
    Provider<EclipseResourceFileSystemAccess2> fileAccessProvider;
    
     
    @Inject
    IResourceSetProvider resourceSetProvider;
	
	override execute(ExecutionEvent event) throws ExecutionException {
		
		var selection = HandlerUtil.getCurrentSelection(event);
		
		//select requirement model file			 
		if (selection instanceof IStructuredSelection) {
			      	 	
			var structuredSelection = selection as IStructuredSelection;
			          			            
			var firstElement = structuredSelection.getFirstElement();
			            
			if (firstElement instanceof IFile) 
				firstElement.generateCode         	
		
		 //select requirement model file editor					                
		 } else if (selection instanceof TextSelection) {
		 		var activeEditor = HandlerUtil.getActiveEditor(event);
		 		val file = activeEditor.editorInput.getAdapter(IFile)
		 		
		 		file.generateCode
		 }
        
         return null;
      }
      File fxmlfile;
      File pomfile;
      byte[] b;
	  FileInputStream fis = null;
	  
	  
      def generateCode(IFile file) {

				//file belonged project
				var project = file.getProject();

				System.out.println("project: "+ project.name);
				//check whether have src-gen folder, if not, create this folder
				var srcGenFolder = project.getFolder("src-gen");
				if (!srcGenFolder.exists()) {
					try {
				    	srcGenFolder.create(true, true, new NullProgressMonitor());
				    } catch (CoreException e) {
				    	return null;
				    }
				}
			 
			 	//generate file steam 
			    val EclipseResourceFileSystemAccess2 fsa = fileAccessProvider.get();
			    fsa.project = project
			    fsa.outputPath = "src-gen"
			    fsa.monitor = new NullProgressMonitor()
			                 
			    //get source file resource 
			    val uri = URI.createPlatformResourceURI(file.getFullPath().toString(), true);
			    
			    var rs = resourceSetProvider.get(project);
			    var r = rs.getResource(uri, true);
			                
			    //generate codes
//			    generator.doGenerate(r, fsa, new GeneratorContext(), project.name); 
			    
			    
			    
			    
			    
//			    
//			    var path =  this.getClass().getClassLoader().getResource("cocome.remodel").getPath();
//			   
//			    
//			    System.out.println(path);
			   
//			    System.out.println(file.getFullPath());
//			    System.out.println(file.getParent());
//			    System.out.println(file.getParent().getParent());
//			    System.out.println(file.getParent().getParent().getParent());
			    
//			    fxmlfile = new File(project.getFullPath().toString() + "Prototype/src-gen/gui/Prototype.fxml");
//			    
//			     
//			     System.out.println("filefxml.getAbsolutePath(): "+ pomfile.getAbsolutePath().toString());
//			    
//
//			    System.out.println("b: "+ b.toString());
//			    
//			    System.out.println();
//			    System.out.println();
//			    System.out.println();
			    
			    
			    
			    
			    
			    
			    
			    
			    
//			    System.out.println("uri: "+ uri.toString());
//			    
//			   System.out.println("file.getFullPath().toString(): "+ file.getFullPath().toString());
//			   
//			   System.out.println("project.getFullPath(): "+ project.getFullPath().toString());
			   
			   
//			   System.out.println("fxmlfile: "+ fxmlfile.toString);
			    
			    
	
			    
			    
			    System.out.println( "\n getlocation: " +Platform.getLocation());
			    
			    
			    
			    SetController.setLoadfxml(Platform.getLocation().toString,project.name);
				SetController.setpom(Platform.getLocation().toString,project.name);
			    SetController.setBlock(
			    	Platform.getLocation().toString,
			    	project.name,
			    	generator.doGenerate(r, fsa, new GeneratorContext(), project.name)
			    );
			    
			    SetController.setLoadEntityManager(
			    	Platform.getLocation().toString,project.name,
			    	generator.doGenerate1(r, fsa, new GeneratorContext(), project.name)
			    );
			    SetController.setpomEntity(Platform.getLocation().toString,project.name);
			    SetController.setChatClient(
			    	Platform.getLocation().toString,project.name,
			    	generator.doGenerate_ChatClient(r, fsa, new GeneratorContext(), project.name)
			   );
			   SetController.setOpenAiSpeaker(
			    	Platform.getLocation().toString,project.name,
			    	generator.doGenerate_OpenAiSpeaker(r, fsa, new GeneratorContext(), project.name)
			   );
			    
//			    System.out.println( "\n uri: " +uri);

//			    file.findPrototypeProject
			    
			    
      }
	
	  override isEnabled() {
        return true;
   	  }


}
