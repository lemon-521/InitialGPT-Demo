/*
 * RM2PT Generator Runtime
 * generated by RM2PT v1.3.0
 */		
package com.rm2pt.generator.initialgpt

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import net.mydreamy.requirementmodel.rEMODEL.Entity
import net.mydreamy.requirementmodel.rEMODEL.PrimitiveTypeCS
import net.mydreamy.requirementmodel.rEMODEL.EnumEntity
import net.mydreamy.requirementmodel.rEMODEL.EntityType
import net.mydreamy.requirementmodel.rEMODEL.TypeCS


import org.eclipse.emf.ecore.EObject



import net.mydreamy.requirementmodel.rEMODEL.Service
import net.mydreamy.requirementmodel.rEMODEL.Parameter
import net.mydreamy.requirementmodel.rEMODEL.Contract
import net.mydreamy.requirementmodel.rEMODEL.LogicFormulaExpCS
import net.mydreamy.requirementmodel.rEMODEL.OCLExpressionCS
import net.mydreamy.requirementmodel.rEMODEL.IteratorExpCS
import net.mydreamy.requirementmodel.rEMODEL.PropertyCallExpCS
import net.mydreamy.requirementmodel.rEMODEL.AtomicExpression
import net.mydreamy.requirementmodel.rEMODEL.VariableExpCS

import net.mydreamy.requirementmodel.rEMODEL.Attribute
import org.eclipse.emf.common.util.EList

import org.eclipse.core.resources.IFile
import net.mydreamy.requirementmodel.rEMODEL.EnumItem

class CodeGenerator extends AbstractGenerator{

	EObject root;
	CharSequence  _generate;
	
//	LogicFormulaExpCS logicFormulaExpCS;
//	OCLExpressionCS oclExpressionCS
//	
//
//	Entity eattribute
	EList<Attribute> lattribute
	
	
	
	
//	Iterable<Service> sService
	Iterable<Entity> sEntity
	Iterable<Entity> ssEntity
	Iterable<Contract> sContract
	
	
	Iterable<Entity> sssEntity
	Iterable<Contract> sssContract
	
	Iterable<Entity> sssssEntity
	Iterable<Contract> sssssContract
	
	
	
//	Parameter sParameter
//	Entity eeeTest
//	Service service

	String s
//	EList<String> Sattribute
	IFile file
	
	Iterable<Entity> sEnumEntity
	
	

	
	def String doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context, String projectName) {
		
		
		for (e : resource.allContents.toIterable.filter(typeof(Entity))) 
		{
			for (e1 : resource.allContents.toIterable.filter(typeof(Entity))) 
			{
				root = resource.getContents().get(0);
				fsa.generateFile("../../"+ projectName +"Prototype/src-gen/entities/"+e1.name +"JsonUtils.java", e1.compileJsonUtils)
			}	

		}
		
		//生成controller的自动化
		root = resource.getContents().get(0);

		sEntity = resource.allContents.toIterable.filter(typeof(Entity));
		sContract = resource.allContents.toIterable.filter(typeof(Contract));
		



//		try {
//			Runtime.getRuntime().exec("cmd /c start chrome"  ); 
//		} catch (IOException e1) { 
//			e1.printStackTrace();
//		}

		return sEntity.setloadfile(sContract).toString();
//		System.out.println("project: "+ sEntity.setloadfile(sContract,sContract).toString());
	
	}
		def compileButton(Entity entity) { 
	'''
		
    			+ "«entity.name»: ("
    		   	«FOR attribute : entity.attributes»
    		   		«IF attribute.type.compileType != "int" 
    		   			&& attribute.type.compileType != "boolean" 
    		   			&& attribute.type.compileType != "float"
    		   			&& attribute.type.compileType != "LocalDate"
    		   			&& attribute.type.compileType != "String"»
    		   			+ "«attribute.name»(«FOR element : attribute.type.getElement» «element.name», «ENDFOR»)"
    				«ELSE»
    					+ "«attribute.name»(«attribute.type.compileType»), "«ENDIF»«ENDFOR»+ ");"
            	;      
			fun(input2);
        	circle = new Circle();
        	circle.setCenterX(50);
            circle.setCenterY(150);
            circle.setRadius(30);
            circle.setStroke(Color.BLACK);
            circle.setFill(Color.LIGHTGREEN);
            borderpane.getChildren().add(circle);
            // 创建路径转变，其实坐标为(50, 150)，终点坐标为(350, 150)
            pathTransition = new PathTransition(Duration.millis(5000), new Line(180, 150, 480, 150), circle);
            pathTransition.setCycleCount(Animation.INDEFINITE);
            pathTransition.play();

			primaryStage_Generation_Setting.fireEvent(
        			new javafx.stage.WindowEvent(primaryStage_Generation_Setting, javafx.stage.WindowEvent.WINDOW_CLOSE_REQUEST)
        	);
        });
	'''
	}
	
	def compileEntity(Entity entity) { 
	'''
			package entities;
			
			import services.impl.StandardOPs;
			import java.util.List;
			import java.util.LinkedList;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.time.LocalDate;
			import java.io.Serializable;
			import java.lang.reflect.Method;
			
			public class «entity.name»«IF entity.superEntity !== null» extends «entity.superEntity.name» «ENDIF» implements Serializable {
				
				/* all primary attributes */
				«FOR attribute : entity.attributes»
					private «attribute.type.compileType» «attribute.name»;
				«ENDFOR»
			}
		'''
	}
	
	
	def compileJsonUtils(Entity entity) { 
		
	'''
			package entities;
			
			import org.json.JSONObject;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Random;
			import java.util.concurrent.ThreadLocalRandom;
			import java.time.Instant;
			import java.time.LocalDate;
			import java.time.ZoneId;
			import java.time.format.DateTimeParseException;
			import java.util.ArrayList;
			import com.google.gson.JsonObject;
			import com.google.gson.JsonParser;
			
			
			import org.json.JSONArray;
			import org.json.JSONException;
			
			public class «entity.name»JsonUtils{
				
				
				public static List<«entity.name»> getJsonList(String json) {
				    	List<HashMap<String, Object>> dataList;
				    	List<«entity.name»> list«entity.name» = new ArrayList<>();
				    	   dataList = new ArrayList<>();
				    	   
				    	   try {
				    	   	
«««				    	   	JsonObject respJson=new JsonParser().parse(json).getAsJsonObject();
«««				    	   	
«««				    	   	System.out.println(respJson);
«««				    	   	
«««				    	   	   JSONObject rootObject = new JSONObject(respJson.toString());
				
«««				            JSONArray dataArray = rootObject.getJSONArray("«entity.name»");
							JSONArray dataArray= new JSONArray(json);
			
				            for (int i = 0; i < dataArray.length(); i++) {
				
				   JSONObject sonObject = dataArray.getJSONObject(i);
				  

				   «FOR attribute : entity.attributes»
				   	String «attribute.name»Str = String.valueOf(sonObject.get("«attribute.name»"));
				   «ENDFOR»
			
						                
			        HashMap<String, Object> map = new HashMap<>(); 
					«FOR attribute : entity.attributes»
						map.put("«attribute.name»", «attribute.name»Str);
						«ENDFOR»
				
				                dataList.add(map);
				}
				«IF !entity.reference.empty»
						    	      	        
   				   		JSONArray dataArray«entity.name» = new JSONArray(dataList);
						for(int n = 0; n < dataArray«entity.name».length(); n++ ) 
						{
							JSONObject sonObject«entity.name» = dataArray«entity.name».getJSONObject(n);
							«entity.name» iii«entity.name» = new «entity.name»();
	   			«FOR attribute : entity.attributes»
	                	«IF attribute.type.compileType == "int"»
							try {
								iii«entity.name».set«attribute.name»(Integer.valueOf( String.valueOf(sonObject«entity.name».get("«attribute.name»")) ));
						    } catch (NumberFormatException e) {
						        System.out.println("当前输入的字符串超过类型限制，随机生成填入！");
						        Random rand = new Random();
						        int minDigits = 2; // 最小位数
						        int maxDigits = 8; // 最大位数
						        int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数
						        int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字
						        iii«entity.name».set«attribute.name»(Integer.valueOf(randomNumber ));
						        e.printStackTrace();
						    }catch (JSONException e) {
						        System.out.println("JSONObject [«attribute.name»]没找到，出现异常，随机生成填入！");
						        Random rand = new Random();
						        int minDigits = 2; // 最小位数
						        int maxDigits = 8; // 最大位数
						        int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数
						        int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字
						        iii«entity.name».set«attribute.name»(Integer.valueOf(randomNumber ));
						        e.printStackTrace();
						    }
						    catch (Exception e) {
						        System.out.println("出现未知异常，随机生成填入！");
						        Random rand = new Random();
						        int minDigits = 2; // 最小位数
						        int maxDigits = 8; // 最大位数
						        int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数
						        int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字
						        iii«entity.name».set«attribute.name»(Integer.valueOf(randomNumber ));
						        e.printStackTrace();
						    }
						«ELSEIF attribute.type.compileType == "boolean"»
	«««   										iii«entity.name».set«attribute.name»(Boolean.parseBoolean(sonObject«entity.name».get("«attribute.name»").toString() ));
								try {
								       iii«entity.name».set«attribute.name»(Boolean.parseBoolean(sonObject«entity.name».get("«attribute.name»").toString() ));
								    } catch (Exception e) {
								        // handle the exception
								        System.out.println("发生了未知错误，随机生成填入！");
								        iii«entity.name».set«attribute.name»(Boolean.parseBoolean("false" ));
								        e.printStackTrace();
								        
								    }
						«ELSEIF attribute.type.compileType == "float"»   										
								try {
									iii«entity.name».set«attribute.name»(Float.parseFloat(sonObject«entity.name».get("«attribute.name»").toString()));
								} catch (ArithmeticException e) {
								    System.out.println("yaml不能为0，随机生成填入！");
								    System.out.println("错误消息：" + e.getMessage());
								    e.printStackTrace();
								    Random rand = new Random();
								    float randomFloat = rand.nextFloat();
								    iii«entity.name».set«attribute.name»(randomFloat);
								    
								} catch (NumberFormatException e) {
								    System.out.println("yaml数字格式不正确，随机生成填入！");
								    System.out.println("错误消息：" + e.getMessage());
								    e.printStackTrace();
								    Random rand = new Random();
								    float randomFloat = rand.nextFloat();
								    iii«entity.name».set«attribute.name»(randomFloat);
								    
								} catch (Exception e) {
								    System.out.println("发生了未知异常，随机生成填入！");
								    System.out.println("错误消息：" + e.getMessage());
								    e.printStackTrace();
								    Random rand = new Random();
								    float randomFloat = rand.nextFloat();
								    iii«entity.name».set«attribute.name»(randomFloat);
								}
						«ELSEIF attribute.type.compileType == "LocalDate"»
	«««								DateTimeFormatter.ofPattern(DatePattern.NORM_DATE_PATTERN));
							String inputDate«attribute.name» = sonObject«entity.name».get("«attribute.name»").toString();
							try {
							    Instant instant = Instant.ofEpochMilli(Long.parseLong(inputDate«attribute.name»));
							    LocalDate localDate«entity.name» = instant.atZone(ZoneId.systemDefault()).toLocalDate();
							    iii«entity.name».set«attribute.name»(localDate«entity.name»);
							} catch (DateTimeParseException e) {
								System.out.println("发生了DateTimeParseException异常，随机生成填入！");
							    long startEpochDay«entity.name» = LocalDate.of(2020, 1, 1).toEpochDay();
						        long endEpochDay«entity.name» = LocalDate.of(2030, 1, 1).toEpochDay();
						        long randomDay«entity.name» = ThreadLocalRandom.current().nextLong(startEpochDay«entity.name», endEpochDay«entity.name»);
							    LocalDate randomDate«entity.name» = LocalDate.ofEpochDay(randomDay«entity.name»);
							    iii«entity.name».set«attribute.name»(randomDate«entity.name»);
							    System.out.println("错误消息：" + e.getMessage());
							}catch (Exception e) {
							    System.out.println("发生了未知异常，随机生成填入！");
							    long startEpochDay«entity.name» = LocalDate.of(2020, 1, 1).toEpochDay();
						        long endEpochDay«entity.name» = LocalDate.of(2030, 1, 1).toEpochDay();
						        long randomDay«entity.name» = ThreadLocalRandom.current().nextLong(startEpochDay«entity.name», endEpochDay«entity.name»);
	
							    LocalDate randomDate«entity.name» = LocalDate.ofEpochDay(randomDay«entity.name»);
							    iii«entity.name».set«attribute.name»(randomDate«entity.name»);
							    System.out.println("错误消息：" + e.getMessage());
							    
							}
						«ELSEIF attribute.type.compileType == "String"»
							iii«entity.name».set«attribute.name»(sonObject«entity.name».get("«attribute.name»").toString());
						«ELSE»
							iii«entity.name».set«attribute.name»(«attribute.type.compileType».«attribute.type.getOneElement.name»);
						«ENDIF»
	            	«ENDFOR»
	            			list«entity.name».add(iii«entity.name»);
						}
				«ENDIF»
				 
				
				
				return list«entity.name»;
				
				} catch (JSONException e) {
				    e.printStackTrace();
				}
				return null;
				}	
		}	
						
			'''
	}
	
//	Service service, Entity entity
	def setloadfile(Iterable<Entity> sEntity, Iterable<Contract> sContract) 
	{ 
	'''
			«FOR contract : sContract»
				«IF contract.op.parameter.empty != true && contract.def !=null»
					
						 		
«««				 		Button «contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_file=new Button(); 
«««				 		«contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_file.setText("LoadFromFile"); 
«««				 		«contract.op.name»_content.add(«contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_file);
«««				 		«contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_file.setMinWidth(Region.USE_PREF_SIZE);
«««				 		GridPane.setConstraints(«contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_file,2,0);
					
						Button «contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_State=new Button();
						«contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_State.setText("LoadFromState");
						«contract.op.name»_content.add(«contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_State);
						 «contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_State.setMinWidth(Region.USE_PREF_SIZE);
						GridPane.setConstraints(«contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_State,2,0);
						
						Button «contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_reset_t=new Button();
						«contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_reset_t.setText("InputReset");
						«contract.op.name»_content.add(«contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_reset_t);
						 «contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_reset_t.setMinWidth(Region.USE_PREF_SIZE);
						GridPane.setConstraints(«contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_reset_t,2,1); 
						
			
					«contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_State.setOnMouseClicked((e) -> {
						List<«contract.def.variable.get(0).type.compileType»> rs = EntityManager.getAllInstancesOf("«contract.def.variable.get(0).type.compileType»") ;
						int index=(int)(Math.random() * rs.size());
					«FOR parameter : contract.op.parameter»
			
							«IF !judgeType(parameter.type.compileType)»
								«System.out.println(parameter.name+".type: " + parameter.type.compileType)»
								«FOR attribute : contract.def.variable.get(0).type.getentity.getattributess»
			 	 					«IF	parameter.name.equalsIgnoreCase(attribute.name)»	
			 	 						
			 	 						for(int i = 0; i < «contract.op.name»_«parameter.name»_cb.getItems().size(); i++ ) 
										{
											if(rs.get(index).get«attribute.name»().toString() == «contract.op.name»_«parameter.name»_cb.getItems().get(i)) 
											{
												«contract.op.name»_«parameter.name»_cb.getSelectionModel().select(i);
											}
										}
			 	 					«ENDIF»
			 	 				«ENDFOR»
«««								for(int i = 0; i < «contract.op.name»_«parameter.name»_cb.getItems().size(); i++ ) 
«««								{
«««									if(rs.get(index).get«parameter.type.compileType»().toString() == «contract.op.name»_«parameter.name»_cb.getItems().get(i)) 
«««									{
«««										«contract.op.name»_«parameter.name»_cb.getSelectionModel().select(i);
«««									}
«««								}
								«ELSEIF contract.def.variable.get(0).initExpression
		     						.atomicexp.leftside.exp.atomicexp.rightside.symbol.toString == parameter.name»
									«contract.op.name»_«parameter.name»_t.setText(String.valueOf(rs.get(index).get«contract.def.variable.get(0).initExpression.atomicexp.leftside.exp.atomicexp.leftside.attribute»()));
								«ELSEIF parameter.name  == "quantity"»
									int indexStockNumber=(int)(Math.random()*rs.get(index).getStockNumber());
									«contract.op.name»_«parameter.name»_t.setText(String.valueOf(indexStockNumber));
									
								«ELSE»				 
									«FOR attribute : contract.def.variable.get(0).type.getentity.getattributess»
										«IF	parameter.name.equalsIgnoreCase(attribute.name)»	
											«contract.op.name»_«parameter.name»_t.setText(String.valueOf(rs.get(index).get«attribute.name»()));
										«ENDIF»
									«ENDFOR»
								«ENDIF»	
								
					«ENDFOR»
			
			
						
						      refreshAll();
						}
						);
			
			
«««					 	// file button click-testing
«««			 	 		«contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_file.setOnMouseClicked((e) -> {
«««			 	 			File file = new File(yamlPath);
«««			 	 			Yaml yaml = new Yaml();
«««			 	 			System.out.println("come in yaml");
«««			 	 			if (file != null) {
«««			 	 				try {
«««			 	 					Object obj =yaml.load(new FileInputStream(file));
«««			 	 					List listdata =  new ArrayList<>();	                
«««			 	 					listdata = «contract.def.variable.get(0).type.compileType»JsonUtils.getJsonList(obj.toString());
«««			 	 					JSONArray jn = new JSONArray(listdata);
«««			 	 					ObservableList<String> options = FXCollections.observableArrayList();
«««			 	 					for(int i = 0; i < listdata.size() ; i++) {
«««			 	 						JSONObject jo =  (JSONObject) jn.get(i);
«««			 	 						options.add(jo.getString("Name"));
«««			 	 					}
«««			 	 					System.out.println("options："+options.toString());
«««			 	 					
«««			 	 					int index=(int)(Math.random()*listdata.size());
«««			 	 					JSONObject jo =  (JSONObject) jn.get(index);
«««			 	 		
«««			 	 		«FOR parameter : contract.op.parameter»
«««			 	 			«IF !judgeType(parameter.type.compileType)»
«««			 	 				«System.out.println(parameter.name+".type: " + parameter.type.compileType)»
«««			 	 				«FOR attribute : contract.def.variable.get(0).type.getentity.getattributess»
«««			 	 					«IF	parameter.name.equalsIgnoreCase(attribute.name)»	
««««««			 	 						«contract.op.name»_«parameter.name»_t.setText(String.valueOf(jo.getString("«attribute.name»")));
«««			 	 						for(int i = 0; i < «contract.op.name»_«parameter.name»_cb.getItems().size(); i++ ) 
«««										{
«««											if(jo.getString("«attribute.name»").toString() == «contract.op.name»_«parameter.name»_cb.getItems().get(i)) 
«««											{
«««												«contract.op.name»_«parameter.name»_cb.getSelectionModel().select(i);
«««											}
«««										}
«««			 	 					«ENDIF»
«««			 	 				«ENDFOR»
««««««			 	 				for(int i = 0; i < «contract.op.name»_«parameter.name»_cb.getItems().size(); i++ ) 
««««««								{
««««««									if(jo.getString("«parameter.type.compileType»").toString() == «contract.op.name»_«parameter.name»_cb.getItems().get(i)) 
««««««									{
««««««										«contract.op.name»_«parameter.name»_cb.getSelectionModel().select(i);
««««««									}
««««««								}
«««								
«««			 	 			«ELSEIF parameter.name == "quantity"»
«««			 	 				int indexStockNumber=(int)(Math.random()*Integer.parseInt(jo.getString("StockNumber")));
«««			 	 				 enterItem_quantity_t.setText(String.valueOf(indexStockNumber));
«««			 	 			«ELSEIF contract.def.variable.get(0).initExpression.atomicexp.leftside.exp.atomicexp.rightside.symbol.toString == parameter.name»
«««			 	 				«contract.op.name»_«parameter.name»_t.setText(String.valueOf(jo.getString("«contract.def.variable.get(0).initExpression.atomicexp.leftside.exp.atomicexp.leftside.attribute»")));
«««			 	 			«ELSE»	     						
«««			 	 				«FOR attribute : contract.def.variable.get(0).type.getentity.getattributess»
«««			 	 					«IF	parameter.name.equalsIgnoreCase(attribute.name)»	
«««			 	 						«contract.op.name»_«parameter.name»_t.setText(String.valueOf(jo.getString("«attribute.name»")));
«««			 	 					«ENDIF»
«««			 	 				«ENDFOR»
«««			 	 			«ENDIF»	
«««			 	 			
«««			 	 		«ENDFOR»
«««			 	 		} catch (FileNotFoundException e1) {
«««			 	 				// TODO Auto-generated catch block
«««			 	 				e1.printStackTrace();
«««			 	 				}
«««			 	 			}
«««			 	 			// refresh GUI after load data
«««			 	 			refreshAll();
«««			 	 			});
									 	 		
						//reset input button click
«««	 					enterItem_barcode_t.setText("");
«««	 					enterItem_quantity_t.setText("");
«««						enterItem_name_t.setText("");
	 					«contract.op.name»_«contract.def.variable.get(0).type.compileType»_input_reset_t.setOnMouseClicked((e) -> {
							«FOR parameter : contract.op.parameter»
								«IF !judgeType(parameter.type.compileType)»
									«System.out.println(parameter.name+".type: " + parameter.type.compileType)»
									«contract.op.name»_«parameter.name»_cb.getSelectionModel().select(0);
								«ELSEIF parameter.name == "quantity"»
									enterItem_quantity_t.setText("");
								«ELSEIF contract.def.variable.get(0).initExpression.atomicexp.leftside.exp.atomicexp.rightside.symbol.toString == parameter.name»
									«contract.op.name»_«parameter.name»_t.setText("");
								«ELSE»	     						
									«FOR attribute : contract.def.variable.get(0).type.getentity.getattributess»
										«IF	parameter.name.equalsIgnoreCase(attribute.name)»	
											«contract.op.name»_«parameter.name»_t.setText("");
										«ENDIF»
									«ENDFOR»
								«ENDIF»
							«ENDFOR»
			
						// refresh GUI after load data
			 			refreshAll();
			 			});
			 			
			 			
			 			
«««			 	contract.op.parameter    input box
	 			«contract.op.name»_«contract.op.parameter.get(0).name»_t.setOnMouseClicked((e) -> {

						TableView obs = allObjectTables.get("«contract.def.variable.get(0).type.compileType»");
		
						obs.getSelectionModel().selectedIndexProperty().addListener(
								 (observable, oldValue, newValue) -> 
								 { 
									 //get selected index
									 objectindex = obs.getSelectionModel().getSelectedIndex();
		 				 			 System.out.println("tableView select: " + objectindex);
		 				 			 obs.setOnMouseClicked( event -> {
		 				 			  
										if( event.getClickCount() == 2 ) {
		 				 			  		System.out.println( obs.getSelectionModel().getSelectedItem());
		 				 					List<«contract.def.variable.get(0).type.compileType»> rs = EntityManager.getAllInstancesOf("«contract.def.variable.get(0).type.compileType»");

		 				 			 «FOR parameter : contract.op.parameter»
		 				 			 			
		 								«IF !judgeType(parameter.type.compileType)»
		 									«System.out.println(parameter.name+".type: " + parameter.type.compileType)»
		 									«FOR attribute : contract.def.variable.get(0).type.getentity.getattributess»
						 	 					«IF	parameter.name.equalsIgnoreCase(attribute.name)»	
													for(int i = 0; i < «contract.op.name»_«parameter.name»_cb.getItems().size(); i++ ) 
				 									{
														if(rs.get(objectindex).get«attribute.name»().toString() == «contract.op.name»_«parameter.name»_cb.getItems().get(i)) 
														{
															«contract.op.name»_«parameter.name»_cb.getSelectionModel().select(i);
														}
													}
						 	 					«ENDIF»
						 	 				«ENDFOR»
«««		 									for(int i = 0; i < «contract.op.name»_«parameter.name»_cb.getItems().size(); i++ ) 
«««		 									{
«««												if(rs.get(objectindex).get«parameter.type.compileType»().toString() == «contract.op.name»_«parameter.name»_cb.getItems().get(i)) 
«««												{
«««													«contract.op.name»_«parameter.name»_cb.getSelectionModel().select(i);
«««												}
«««											}
		 								«ELSEIF contract.def.variable.get(0).initExpression
		 		     						.atomicexp.leftside.exp.atomicexp.rightside.symbol.toString == parameter.name»
		 											«contract.op.name»_«parameter.name»_t.setText(String.valueOf(rs.get(objectindex).get«contract.def.variable.get(0).initExpression.atomicexp.leftside.exp.atomicexp.leftside.attribute»()));
		 								«ELSEIF parameter.name  == "quantity"»
		 											int indexStockNumber=(int)(Math.random()*rs.get(objectindex).getStockNumber());
		 											«contract.op.name»_«parameter.name»_t.setText(String.valueOf(indexStockNumber));
		 									
		 								«ELSE»				 
		 									«FOR attribute : contract.def.variable.get(0).type.getentity.getattributess»
		 										«IF	parameter.name.equalsIgnoreCase(attribute.name)»	
		 													«contract.op.name»_«parameter.name»_t.setText(String.valueOf(rs.get(objectindex).get«attribute.name»()));
		 										«ENDIF»
		 									«ENDFOR»
		 								«ENDIF»	
		 								
		 							«ENDFOR»
		 							
		 							Stage stage = (Stage)obs.getScene().getWindow();
		 							stage.close();
		 						}});
		 				 });
						
						startclick(obs, "«contract.def.variable.get(0).type.compileType»");
						
					// refresh GUI after load data
					 	refreshAll();

					 });
			 			
			 			
		«ENDIF»			
	«ENDFOR»		    	
			
			
			
			
			
			
	'''
	}
	
	def getAttributes(TypeCS type) 
	{
		if (type !== null)
		{
			switch type {
				EntityType : 
					if(type.entity.attributes != null ){
						lattribute = type.entity.attributes;
					}
				default: ""
			}
		}			
	}

	def getentity(TypeCS type) 
	{
		if (type !== null)
		{
			switch type {
				EntityType : type.entity
				default: ""
			}
		}			
	}
	
	

	/* For primary and enum type */
	def compileType(TypeCS type) 
	{
		
		if (type !== null)
		{
			switch type {
				PrimitiveTypeCS : 
					switch type {
					case  type.name == "Boolean" : "boolean"
					case  type.name == "String" : "String"
					case  type.name == "Real" : "float"
					case  type.name == "Integer" : "int"
					case  type.name == "Date" : "LocalDate"
					default: ""
				}
				EnumEntity : type.name
				EntityType : type.entity.name
				default: ""
			}
		}			
		else 
		{
			""
		}	
		
		}
	
	def compileparameter(String type) 
	{
		
		if (type !== null)
		{
			
			switch type {
				case  type == "barcode" : "Barcode"
				case  type == "quantity" : "StockNumber"
				case  type == "name" : "Name"
				case  type == "amount" : "Amount"
				case  type == "cardAccountNumber" : "CardAccountNumber"
				case  type == "storeID" : "Id"
				case  type == "cashDeskID" : "Id"
				case  type == "orderid" : "Id"
				case  type == "orderID" : "Id"
				case  type == "supplierID" : "Id"
				case  type == "id" : "Id"	//Store
				case  type == "id" : "Id" //ProductCatalog
				case  type == "cardAccountNumber" : "CardAccountNumber"
				case  type == "cardAccountNumber" : "CardAccountNumber"
				case  type == "userid" : "UserID"
				case  type == "address" : "Address"
				case  type == "librarianid" : "LibrarianID"
				case  type == "password" : "Password"
				case  type == "requestid" : "RequestID"
				case  type == "loanamount" : "LoanAmount"
				case  type == "loanpurpose" : "LoanPurpose"
				case  type == "income" : "Income"
				case  type == "phonenumber" : "PhoneNumber"
				case  type == "postaladdress" : "PostalAddress"
				case  type == "zipcode" : "ZipCode"
				case  type == "email" : "Email"
				case  type == "workreferences" : "WorkReferences"
				case  type == "creditreferences" : "CreditReferences"
				case  type == "checkingaccountnumber" : "CheckingAccountNumber"
				case  type == "securitynumber" : "SecurityNumber"
				default: ""
			}
				
		}			
		else 
		{
			""
		}	
	}
	
//	def compileName(String type) 
//	{
//		
//		if (type !== null)
//		{
//			
//			switch type {
//				case  type == "makeNewSale" : "Sale"
//				case  type == "enterItem" : "Item"
//				case  type == "endSale" : "Sale"
//				case  type == "makeCashPayment" : "CashPayment"
//				case  type == "makeCardPayment" : "CardPayment"
//				case  type == "createStore" : "Store"
//				case  type == "queryStore" : "Store"
//				case  type == "modifyStore" : "Store"
//				case  type == "deleteStore" : "Store"
//				case  type == "createProductCatalog" : "ProductCatalog"
//				case  type == "queryProductCatalog" : "ProductCatalog"
//				case  type == "modifyProductCatalog" : "ProductCatalog"
//				case  type == "deleteProductCatalog" : "ProductCatalog"
//				default: ""
//			}
//				
//		}			
//		else 
//		{
//			""
//		}	
//	}LogicFormulaExpCS
	def getAtomicexp(OCLExpressionCS a){
	 if(a instanceof LogicFormulaExpCS) return a.atomicexp.get(0)
	}
	
	def getLeftside(EObject a){
	 if(a instanceof AtomicExpression) return a.leftside
	}
	
	def getExp(EObject a){
	 if(a instanceof IteratorExpCS) return a.exp
	}

	def getAttribute(EObject a){
	 if(a instanceof PropertyCallExpCS) return a.attribute
	}
	
	def getRightside(EObject a){
	 if(a instanceof AtomicExpression) return a.rightside
	}
	def getSymbol(EObject a){
	 if(a instanceof VariableExpCS) return a.symbol
	 if(a instanceof PropertyCallExpCS) return a.attribute
	}
	
	def getattributess(Object a){
	 if(a instanceof Entity) return a.attributes
	}
	def getElement(Object a){
	 if(a instanceof EnumEntity) return a.element
	}
	def getOneElement(Object a){
	 if(a instanceof EnumEntity) return a.element.get(0)
	}
	
	override doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}

	
	
//	case  type.name == "Boolean" : "boolean"
//	case  type.name == "String" : "String"
//	case  type.name == "Real" : "float"
//	case  type.name == "Integer" : "Int"
//	case  type.name == "Date" : "LocalDate"
	def boolean judgeType(String temp) {
        if (temp.equals("boolean")) {
            return true;
        } else if (temp.equals("String")) {
            return true;
        } else if (temp.equals("float")) {
            return true;
        }else if (temp.equals("int")) {
            return true;
        }else if (temp.equals("LocalDate")) {
            return true;
        }else {
            return false;
        }
    }




	def String doGenerate1(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context, String projectName) {
			
	
			
			//生成controller的自动化
			root = resource.getContents().get(0);
	
			sEntity = resource.allContents.toIterable.filter(typeof(Entity));
			ssEntity = resource.allContents.toIterable.filter(typeof(Entity));
			sContract = resource.allContents.toIterable.filter(typeof(Contract));
			
			sssEntity = resource.allContents.toIterable.filter(typeof(Entity));
			sssContract = resource.allContents.toIterable.filter(typeof(Contract));
			
			sssssEntity = resource.allContents.toIterable.filter(typeof(Entity));
			sssssContract = resource.allContents.toIterable.filter(typeof(Contract));
			
			sssssEntity = resource.allContents.toIterable.filter(typeof(Entity));
			sssssContract = resource.allContents.toIterable.filter(typeof(Contract));
			
			
			
			return sEntity.loadfileFxml(ssEntity,sContract).toString()
			+ sssEntity.setYamlFilter(
					resource.allContents.toIterable.filter(typeof(Entity)),
					sssContract).toString()
			+ sssssEntity.setEntityToYamlStringFilter(
					resource.allContents.toIterable.filter(typeof(Entity)),
					resource.allContents.toIterable.filter(typeof(Entity)),
					sssssContract
				).toString();
	//		System.out.println("project: "+ sEntity.setloadfile(sContract,sContract).toString());
		
		}
	
	def String doGenerate_ChatClient(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context, String projectName) {

			//生成controller的自动化
			root = resource.getContents().get(0);
	
			sEntity = resource.allContents.toIterable.filter(typeof(Entity));
			sContract = resource.allContents.toIterable.filter(typeof(Contract));
	
	
			return sEntity.setChatClient(sContract).toString();
	//		System.out.println("project: "+ sEntity.setloadfile(sContract,sContract).toString());
		
		}
	def String doGenerate_OpenAiSpeaker(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context, String projectName) {
	
				//生成controller的自动化
				root = resource.getContents().get(0);
		
				sEntity = resource.allContents.toIterable.filter(typeof(Entity));
				sContract = resource.allContents.toIterable.filter(typeof(Contract));
				
				
				
		
				return sEntity.setOpenAiSpeaker(resource.allContents.toIterable.filter(typeof(Entity)),sContract).toString();
		//		System.out.println("project: "+ sEntity.setloadfile(sContract,sContract).toString());
			
			}



	def String loadfileFxml(Iterable<Entity> sEntity,Iterable<Entity> sssEntity, Iterable<Contract> sContract) 
		{
			'''	
			public static List<Integer> String2int(String str) {
			    // 创建列表
				List<Integer> list = new ArrayList<>();
				if (str.startsWith("[") && str.endsWith("]")) {
					 // 去除方括号
				    String content = str.substring(1, str.length() - 1);
				    System.out.println("content: " +content);
				    // 拆分字符串
				    String[] items = content.split(",");
				    
				    // 遍历拆分得到的字符串数组，将每个字符串转换为整数并添加到列表中
				    for (String item : items) {
				        int number = Integer.parseInt(item.trim()); // 去除前后空格并将字符串转换为整数
				        list.add(number);
				    }
		        }else {
		        	list.add(Integer.valueOf(str));
		        }
			   return list;
			}
			
			«FOR entity : sEntity»
			
			public static void load«entity.name»File(File file, int loadCode,JSONObject rootObject){	
					
					
				«entity.name»Instances.clear();
	    	   	JSONArray dataArray«entity.name» = rootObject.getJSONArray("«entity.name»");
 		           «entity.name» iii«entity.name» ;
 		           for(int i = 0; i < dataArray«entity.name».length(); i++) 
 		           {
 		           	try {
 		            	JSONObject sonObject«entity.name» = dataArray«entity.name».getJSONObject(i);
 		            	
 					   	iii«entity.name» = («entity.name») EntityManager.createObject("«entity.name»");
 					 
««« 					 if(loadCode == 2) 
«««					 {    	
««« 					   	«IF entity.reference.length != 0»
««« 					 				   								   					
«««						«FOR one_reference : entity.reference»
«««					
«««						if (rootObject.has("«one_reference.entity.name»") )
«««						 {
«««						 		List<Integer> json«one_reference.name»;
«««						 		
«««						 		if(sonObject«entity.name».has("«one_reference.name»")) 
«««						 		{
«««						 			json«one_reference.name» = String2int(String.valueOf(sonObject«entity.name».get("«one_reference.name»")));
«««									
«««									if(«one_reference.entity.name»Instances.isEmpty()) 
«««									{
«««										load«one_reference.entity.name»File(file, 3, rootObject);
«««									}
«««									for(int i1 = 0; i1<json«one_reference.name».size();i1++) 
«««									{
«««										«IF one_reference.ismultiple == true»
«««										iii«entity.name».add«one_reference.name»(«one_reference.entity.name»Instances.get(
«««										json«one_reference.name».get(i1)-1
«««										)); ///
«««										«ELSEIF one_reference.isIsReverseAssoication == true»
«««										iii«entity.name».set«one_reference.name»(«one_reference.entity.name»Instances.get(
«««										json«one_reference.name».get(i1)-1
«««										)); ///
«««										«ENDIF»
«««									}
«««									
«««						 		}
«««
«««						 }
«««					«ENDFOR»
«««				«ENDIF»	
««« 				}  	
 					   	
 					   	
 					   	«FOR attribute : entity.attributes»
 					   		
		                	«IF attribute.type.compileType == "int"»
«««										iii«entity.name».set«attribute.name»(Integer.valueOf( String.valueOf(sonObject«entity.name».get("«attribute.name»")) ));
								try {
									iii«entity.name».set«attribute.name»(Integer.valueOf( String.valueOf(sonObject«entity.name».get("«attribute.name»")) ));
							    } catch (NumberFormatException e) {
							        System.out.println("当前输入的字符串超过类型限制，随机生成填入！");
							        Random rand = new Random();
							        int minDigits = 2; // 最小位数
							        int maxDigits = 8; // 最大位数
							        int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数
							        int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字
							        iii«entity.name».set«attribute.name»(Integer.valueOf(randomNumber ));
							        e.printStackTrace();
							    }catch (JSONException e) {
							        System.out.println("JSONObject [«attribute.name»]没找到，出现异常，随机生成填入！");
							        Random rand = new Random();
							        int minDigits = 2; // 最小位数
							        int maxDigits = 8; // 最大位数
							        int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数
							        int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字
							        iii«entity.name».set«attribute.name»(Integer.valueOf(randomNumber ));
							        e.printStackTrace();
							    }
							    catch (Exception e) {
							        System.out.println("出现未知异常，随机生成填入！");
							        Random rand = new Random();
							        int minDigits = 2; // 最小位数
							        int maxDigits = 8; // 最大位数
							        int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数
							        int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字
							        iii«entity.name».set«attribute.name»(Integer.valueOf(randomNumber ));
							        e.printStackTrace();
							    }
							«ELSEIF attribute.type.compileType == "boolean"»
«««										iii«entity.name».set«attribute.name»(Boolean.parseBoolean(sonObject«entity.name».get("«attribute.name»").toString() ));
								try {
							    iii«entity.name».set«attribute.name»(Boolean.parseBoolean(sonObject«entity.name».get("«attribute.name»").toString() ));
							    } catch (Exception e) {
							        // handle the exception
							        System.out.println("发生了未知错误，随机生成填入！");
							        iii«entity.name».set«attribute.name»(Boolean.parseBoolean("false" ));
							        e.printStackTrace();
							        
							    }
							«ELSEIF attribute.type.compileType == "float"»
«««										iii«entity.name».set«attribute.name»(Float.parseFloat(sonObject«entity.name».get("«attribute.name»").toString()));
								try {
									iii«entity.name».set«attribute.name»(Float.parseFloat(sonObject«entity.name».get("«attribute.name»").toString()));
								} catch (ArithmeticException e) {
								    System.out.println("yaml不能为0，随机生成填入！");
								    System.out.println("错误消息：" + e.getMessage());
								    e.printStackTrace();
								    Random rand = new Random();
								    float randomFloat = rand.nextFloat();
								    iii«entity.name».set«attribute.name»(randomFloat);
								    
								} catch (NumberFormatException e) {
								    System.out.println("yaml数字格式不正确，随机生成填入！");
								    System.out.println("错误消息：" + e.getMessage());
								    e.printStackTrace();
								    Random rand = new Random();
								    float randomFloat = rand.nextFloat();
								    iii«entity.name».set«attribute.name»(randomFloat);
								    
								} catch (Exception e) {
								    System.out.println("发生了未知异常，随机生成填入！");
								    System.out.println("错误消息：" + e.getMessage());
								    e.printStackTrace();
								    Random rand = new Random();
								    float randomFloat = rand.nextFloat();
								    iii«entity.name».set«attribute.name»(randomFloat);
								}
							«ELSEIF attribute.type.compileType == "LocalDate"»
«««								DateTimeFormatter.ofPattern(DatePattern.NORM_DATE_PATTERN));
								String inputDate«attribute.name» = sonObject«entity.name».get("«attribute.name»").toString();
								try {
								    Instant instant = Instant.ofEpochMilli(Long.parseLong(inputDate«attribute.name»));
								    LocalDate localDate«entity.name» = instant.atZone(ZoneId.systemDefault()).toLocalDate();
								    iii«entity.name».set«attribute.name»(localDate«entity.name»);
								} catch (DateTimeParseException e) {
									System.out.println("发生了DateTimeParseException异常，随机生成填入！");
								    long startEpochDay«entity.name» = LocalDate.of(2020, 1, 1).toEpochDay();
							        long endEpochDay«entity.name» = LocalDate.of(2030, 1, 1).toEpochDay();
							        long randomDay«entity.name» = ThreadLocalRandom.current().nextLong(startEpochDay«entity.name», endEpochDay«entity.name»);
								    LocalDate randomDate«entity.name» = LocalDate.ofEpochDay(randomDay«entity.name»);
								    iii«entity.name».set«attribute.name»(randomDate«entity.name»);
								    System.out.println("错误消息：" + e.getMessage());
								}catch (Exception e) {
								    System.out.println("发生了未知异常，随机生成填入！");
								    long startEpochDay«entity.name» = LocalDate.of(2020, 1, 1).toEpochDay();
							        long endEpochDay«entity.name» = LocalDate.of(2030, 1, 1).toEpochDay();
							        long randomDay«entity.name» = ThreadLocalRandom.current().nextLong(startEpochDay«entity.name», endEpochDay«entity.name»);

								    LocalDate randomDate«entity.name» = LocalDate.ofEpochDay(randomDay«entity.name»);
								    iii«entity.name».set«attribute.name»(randomDate«entity.name»);
								    System.out.println("错误消息：" + e.getMessage());
								    
								}
							«ELSEIF attribute.type.compileType == "String"»
								iii«entity.name».set«attribute.name»(sonObject«entity.name».get("«attribute.name»").toString());
							«ELSE»
«««										«FOR element : attribute.type.getElement» 
«««											iii«entity.name».set«attribute.name»(«attribute.name».«element.name»);
«««										«ENDFOR»
«««											iii«entity.name».set«attribute.name»(«attribute.name».«attribute.type.getOneElement.name»);
«««											«FOR element : attribute.type.getElement» 
«««												«element.name»;
«««											«ENDFOR»
							«ENDIF»
 		            	«ENDFOR»
 		            	
						
«««							("«FOR attribute : entity.attributes»+ "«attribute.name»(«attribute.type.compileType»), "«ENDFOR»+ ");"
	 					   	«FOR attribute : entity.attributes»
	 					   		«IF attribute.type.compileType != "int" 
	 					   			&& attribute.type.compileType != "boolean" 
	 					   			&& attribute.type.compileType != "float"
	 					   			&& attribute.type.compileType != "LocalDate"
	 					   			&& attribute.type.compileType != "String"»
	 					   			iii«entity.name».set«attribute.name»(«attribute.type.compileType».«attribute.type.getOneElement.name»);
								«ENDIF»
			            	«ENDFOR»
 		            	
 		            	if(loadCode == 1) {
								EntityManager.addObject("«entity.name»", iii«entity.name»);
						}
						if(loadCode == 2) {
								«entity.name»Instances.add(iii«entity.name»);
        				}	
        				if(loadCode == 3) 
	                    {
				   			«entity.name»Instances.add(iii«entity.name»);
						}
        				} catch (JSONException e) {
		    	      	        // 处理异常
		    	      	        e.printStackTrace();
		    	      	        System.out.println("经判断，这个数据出现JSONException异常，将跳过...");
		    	      	        continue;}
		 		            }
		 		            
		 		      
		 		      if(loadCode == 2) 
	                    {
				   		AllmapperObject.put("«entity.name»",«entity.name»Instances);
						}
      		    } 
			«ENDFOR»
			
			
			
			
			
			
			/* Load File */
			static Map<String, List> AllmapperObject = new HashMap<String, List>();
			@SuppressWarnings("null")
			public static Map<String, List> loadFile(File file, int loadCode){
	
			 			Yaml yaml = new Yaml();
			 			System.out.println("come in yaml");
			 			if (file != null) {
			 				List<String> yamlList = new ArrayList<>();
							String sssss;
							Iterable<Object> object;
							
								try {
									sssss = file2String(file);
	//								System.out.println("currentLine"+sssss);
	//								String objsss =yaml.load(new FileInputStream(file));
									object = yaml.loadAll(sssss);
									object.forEach(y -> {
							            if (ObjectUtil.isNotNull(y)) {
							                yamlList.add(JSONUtil.toJsonStr(y));
							            }
							        });
								} catch (IOException es) {
									// TODO Auto-generated catch block
									es.printStackTrace();
								}
		   			JSONObject rootObject = new JSONObject(yamlList.get(0).toString());
		   			
	                «FOR entity : sssEntity»

	 		    	  if (rootObject.has("«entity.name»") )
	 		    	  {
						load«entity.name»File(file, 2, rootObject);
					  }
		 		      if(loadCode == 2) 
	                  {
				   		AllmapperObject.put("«entity.name»",«entity.name»Instances);
					   }
		              «ENDFOR»
		              
			 		} 
			 		return AllmapperObject;
			}
			
			public static void loadMapper(Map<String, List> Allmapper) {
				«FOR entity : sEntity»
			   		«entity.name»Instances =  (List<«entity.name»>) Allmapper.get("«entity.name»");
			   		AllInstance.put("«entity.name»", «entity.name»Instances);
		        «ENDFOR»
«««				System.out.println("导入完毕！");
				System.out.println("Load Success！");
				
			}
			
			'''
		}

	def String setChatClient(Iterable<Entity> sEntity, Iterable<Contract> sContract) 
	{
		'''	
package gui;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.lang.reflect.Field;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.yaml.snakeyaml.Yaml;

import entities.EntityManager;
import javafx.animation.Animation;
import javafx.animation.PathTransition;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;

import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.text.Font;
import javafx.scene.text.Text;

import javafx.scene.text.TextFlow;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.util.Duration;
import javafx.util.StringConverter;
import com.fasterxml.jackson.core.JsonProcessingException;
import javafx.scene.layout.Region;
		
		 
public class ChatClient_new extends Application{
		
		String generatedData = "";
			
		ProgressIndicator progressIndicator = new ProgressIndicator();
		TextArea textArea;
		//动画
		Stage primaryStage123 = new Stage();
		//主界面
		Stage stagesss = new Stage();
		
		BorderPane borderpane;
		VBox vBox;
		Button yaml_view;
		Button Evaluation_editButton;
		Button table_view;
		MenuBar menuBar;
		Label statusLabel;
		Label GenerationLabel;
		Map<String, List> Allmapper = new HashMap<>();
		TableView<String> leftTable;
		TableView<Object> rightTable;
		VBox vBox_status;
	    private static final Color PROPERTY_COLOR = Color.DARKCYAN;
	    private static final Color VALUE_COLOR = Color.DARKSLATEGRAY;
	    TextFlow textFlow;
	    ScrollPane scrollPane;
	    Button setting_Generation = new Button("Generation");
		List<EntityNumber> EntityNumberInstances = new LinkedList<EntityNumber>();
		String test_str1 = "";
		String test_str2 = "";
		String test_str3 = "";
		
		String AI_model = "0";

		String textArea_returnData = "";
		TableView<EntityNumber> SettingTable = new TableView<>();
		
		Button setting_Generation_Promt = new Button("Generate Promt");
		
		TextArea textArea_Promt = new TextArea();
		
		
		Map<Integer, String> str_temp = new HashMap<Integer, String>();

		String min_test_str1 = "";
		
		private ExecutorService executorService = Executors.newCachedThreadPool();
		
		TextArea Evaluation_result_textArea = new TextArea();
		OpenAiSpeaker op = new OpenAiSpeaker();
		String entityString = op.entitySetting;
		String Totalstr_Prompt = "";
		String str_Prompt = "";
		String str2_Prompt = "";
		String str3_Prompt = "";
		String minstr_Prompt = "";
		public String setPrompt(String promptValue) {
			String input_Prompt1 = 
			"User Interaction Information: \r\n"
			+ "Generate entity examples of the system based on these entity information, try to generate reasonable and realistic data, please generate the number of entity instances according to the given values: \r\n"
			+ promptValue
			+ "\r\n"
			+ "\r\n"
			+ "\r\n"
			+ "Initial Prompts: \r\n"
			+ "1. you only need to generate the ones in the square brackets, \r\n"
			+ "2. you don't need to generate the ones not listed, \r\n"
			+ "3. the attribute fields of the entity are initial capitalized, \r\n"
			+ "4. the format “ ```Entity Data``` ” is not allowed, only the entity data needs to be returned. \r\n"
			+ "5. the generated value of the attribute field cannot be outside the type range of the attribute field: \r\n"
			+ "int: The maximum length cannot exceed 8 digits; and 0 cannot be used as the beginning;\r\n"
			+ "boolean:true and false;\r\n"
			+ "float: The maximum length cannot exceed 8 digits; \r\n"
			+ "LocalDate: 0001-01-01 to 9999-12-31. \r\n"
			+ "6. the entity is returned in the format of a yaml file, \r\n"
			+ "7. please note that the entity information in the generated data is unique and cannot be repeated. \r\n"
			+ "\r\n"
			+ "And the following cases cannot occur:\r\n"
			+ "1. Data with the same name cannot appear;\r\n"
			+ "2. Data with the same ID cannot appear;\r\n"
			+ "3. Entity's name with letters can not appear, for example \"Item 1\", \"Store 2\", \" Supplier 3\" and so on;\r\n"
			+ "4. Entity's name with numbers can not appear, for example \"Item A\", \"Store B\", \" Supplier C\" and so on;\r\n"
			+ "5. Double quotes can not appear.\r\n"
			+ "\r\n"
			+ "\r\n"
			+ "Domain Entity Information: \r\n"
			+ "Below is all the entity information given, please generate according to the number of entities above, no need to generate more than the others: \r\n"
			+ entityString
			+ "\r\n"
			+ "\r\n"
			+ "Output Format Information\r\n"
			+ "The yaml data is in this format: \r\n"
			+ "Item: \r\n"
			+ "- Barcode: 123455690\r\n"
			+ "  Name: Backpack\r\n"
			+ "  Price: 49.99\r\n"
			+ "  StockNumber: 20\r\n"
			+ "  OrderPrice: 39.99\r\n"
			+ "- Barcode: 127895489\r\n"
			+ "  Name: apple\r\n"
			+ "  Price: 49.99\r\n"
			+ "  StockNumber: 20\r\n"
			+ "  OrderPrice: 39.99\r\n"
			+ "";
			
			return input_Prompt1;
			
		}
		



		public void fun(String Totalstr, String minstr, String str2, String str3, String ProxyPort, String openaiKey) {
					
			HashMap<String, Integer> returnEntityNumber_Totalstr =  ReturnEntityNumber(Totalstr);

			
			executorService.submit(new Runnable() {
		        @Override
		        public void run() {

		        	if(!str_temp.isEmpty()) 
		        	{
			        		for(int i = 1 ; i <=str_temp.size(); i++) 
			        		{
			        			
			        			if(AI_model.equals("gpt-3.5-turbo")) 
					        	{
									System.out.println("send str Chat...");
						            if(!ProxyPort.equals("no")) 
						            {
						    			OpenAiSpeaker.PropertyKey = ProxyPort;
						    		}
						            if(!openaiKey.equals("")) 
						            {
						            	OpenAiSpeaker.openAiKey = openaiKey;
						            	
						            	OpenAiSpeaker op = new OpenAiSpeaker();
							            System.out.println("str_temp.get(i): " + str_temp.get(i));
							            String return_test =  op.Chat_ReturnMessage(str_temp.get(i)); 	
							            test_str1 = test_str1 +"\r\n" + return_test;
						            }
					        	}
			        			if(AI_model.equals("gpt-4")) 
					        	{
									System.out.println("send str gpt-4 Chat...");
						            if(!ProxyPort.equals("no")) 
						            {
						    			OpenAiSpeaker.PropertyKey = ProxyPort;
						    		}
						            if(!openaiKey.equals("")) 
						            {
						            	OpenAiSpeaker.openAiKey = openaiKey;
						            	
						            	OpenAiSpeaker op = new OpenAiSpeaker();
							            System.out.println("str_temp.get(i): " + str_temp.get(i));
							            String return_test =  op.GPT4_Chat_ReturnMessage(str_temp.get(i)); 	
							            test_str1 = test_str1 +"\r\n" + return_test;
						            }
					        	}
			        			if(AI_model.equals("gpt-4o")) 
					        	{
									System.out.println("send str gpt-4o Chat...");
						            if(!ProxyPort.equals("no")) 
						            {
						    			OpenAiSpeaker.PropertyKey = ProxyPort;
						    		}
						            if(!openaiKey.equals("")) 
						            {
						            	OpenAiSpeaker.openAiKey = openaiKey;
						            	
						            	OpenAiSpeaker op = new OpenAiSpeaker();
							            System.out.println("str_temp.get(i): " + str_temp.get(i));
							            String return_test =  op.GPT4o_Chat_ReturnMessage(str_temp.get(i)); 	
							            test_str1 = test_str1 +"\r\n" + return_test;
						            }
					        	}
			        		}
		        	}
		        	if(!minstr.isEmpty()) 
		        	{
		        		if(AI_model.equals("gpt-3.5-turbo")) 
			        	{
		        			if(!openaiKey.equals("")) 
				            {
			        			System.out.println("进来了minstr，gpt-3.5-turbo, 为最后一批小于40的，是: "+minstr);
			        		
					            if(!ProxyPort.equals("no")) 
					            {
					    			OpenAiSpeaker.PropertyKey = ProxyPort;
					    		}
				        		OpenAiSpeaker.openAiKey = openaiKey;
				        		
				        		OpenAiSpeaker op = new OpenAiSpeaker();
				        		min_test_str1 =  op.Chat_ReturnMessage(minstr); 	
				            }
			        	}
		        		if(AI_model.equals("gpt-4")) 
			        	{
		        			if(!openaiKey.equals("")) 
				            {
			        			System.out.println("进来了minstr，gpt-4, 为最后一批小于40的，是: "+minstr);
			        		
					            if(!ProxyPort.equals("no")) 
					            {
					    			OpenAiSpeaker.PropertyKey = ProxyPort;
					    		}
				        		OpenAiSpeaker.openAiKey = openaiKey;
				        		
				        		OpenAiSpeaker op = new OpenAiSpeaker();
				        		min_test_str1 =  op.GPT4_Chat_ReturnMessage(minstr); 	
				            }
			        	}
		        		if(AI_model.equals("gpt-4o")) 
			        	{
		        			if(!openaiKey.equals("")) 
				            {
			        			System.out.println("进来了minstr，gpt-4o, 为最后一批小于40的，是: "+minstr);
			        		
					            if(!ProxyPort.equals("no")) 
					            {
					    			OpenAiSpeaker.PropertyKey = ProxyPort;
					    		}
				        		OpenAiSpeaker.openAiKey = openaiKey;
				        		
				        		OpenAiSpeaker op = new OpenAiSpeaker();
				        		min_test_str1 =  op.GPT4o_Chat_ReturnMessage(minstr); 	
				            }
			        	}
		        		
		        		
		        	}else {
		        		System.out.println("minstr为空！");
		        	}

				  }
		        });
		        
			executorService.submit(new Runnable() {
		        @Override
		        public void run() {
		        	if(!str2.isEmpty()) 
		        	{
		        		
		        		HashMap<String, Integer> returnEntityNumber_str2 =  ReturnEntityNumber(str2);
		        		Set<String> key_str2 = returnEntityNumber_str2.keySet();
		        		
		        		for (String string_str2_entity : key_str2) 
		        		{
		        			int entityValue = returnEntityNumber_str2.get(string_str2_entity); 
	        				if(AI_model.equals("gpt-3.5-turbo")) 
	        				{
					            if(!ProxyPort.equals("no")) {
					    			OpenAiSpeaker.PropertyKey = ProxyPort;
					    			System.out.println("OpenAiSpeaker.PropertyKey: "+OpenAiSpeaker.PropertyKey);
					    		}
					    		OpenAiSpeaker.openAiKey = openaiKey;
					            OpenAiSpeaker op = new OpenAiSpeaker();
					            String return_test =  op.Large_Chat_ReturnMessage(string_str2_entity,entityValue); 
					            test_str2 = test_str2 +"\r\n" + return_test;
	        				}
	        				if(AI_model.equals("gpt-4")) 
	        				{
	        					System.out.println("gpt-4");
					            if(!ProxyPort.equals("no")) {
					    			OpenAiSpeaker.PropertyKey = ProxyPort;
					    			System.out.println("OpenAiSpeaker.PropertyKey: "+OpenAiSpeaker.PropertyKey);
					    		}
					    		OpenAiSpeaker.openAiKey = openaiKey;
					            OpenAiSpeaker op = new OpenAiSpeaker();
					            String return_test =  op.GPT4_Large_Chat_ReturnMessage(string_str2_entity,entityValue); 
					            test_str2 = test_str2 +"\r\n" + return_test;
	        				}
	        				if(AI_model.equals("gpt-4o")) 
	        				{
	        					System.out.println("gpt-4o");
					            if(!ProxyPort.equals("no")) {
					    			OpenAiSpeaker.PropertyKey = ProxyPort;
					    			System.out.println("OpenAiSpeaker.PropertyKey: "+OpenAiSpeaker.PropertyKey);
					    		}
					    		OpenAiSpeaker.openAiKey = openaiKey;
					            OpenAiSpeaker op = new OpenAiSpeaker();
					            String return_test =  op.GPT4o_Large_Chat_ReturnMessage(string_str2_entity, entityValue); 
					            test_str2 = test_str2 +"\r\n" + return_test;
	        				}
		        		}
		        		
		        		
		        	}
		        	
		        } 
		    });
			executorService.submit(new Runnable() {
		        @Override
		        public void run() 
		        {
		        	if(!str3.isEmpty()) 
		        	{
		        		HashMap<String, Integer> returnEntityNumber_str3 =  ReturnEntityNumber(str3);
		        		Set<String> key_str3 = returnEntityNumber_str3.keySet();
		        		for (String string_str3_entity : key_str3) 
		        		{
		        			int entityValue = returnEntityNumber_str3.get(string_str3_entity);
		        			if(AI_model.equals("gpt-3.5-turbo")) {
    				            if(!ProxyPort.equals("no")) {
    				    			OpenAiSpeaker.PropertyKey = ProxyPort;
    				    		}
    				    		OpenAiSpeaker.openAiKey = openaiKey;
					            OpenAiSpeaker op = new OpenAiSpeaker();
					            String return_test = op.Large_Chat_ReturnMessage(string_str3_entity,entityValue); 
					            test_str3 = test_str3 +"\r\n" + return_test;
				        	}
		        			if(AI_model.equals("gpt-4")) {
    				            if(!ProxyPort.equals("no")) {
    				    			OpenAiSpeaker.PropertyKey = ProxyPort;
    				    		}
    				            System.out.println("gpt-4");
    				    		OpenAiSpeaker.openAiKey = openaiKey;
					            OpenAiSpeaker op = new OpenAiSpeaker();
					            String return_test = op.GPT4_Large_Chat_ReturnMessage(string_str3_entity,entityValue); 
					            test_str3 = test_str3 +"\r\n" + return_test;
				        	}
		        			if(AI_model.equals("gpt-4o")) {
    				            if(!ProxyPort.equals("no")) {
    				    			OpenAiSpeaker.PropertyKey = ProxyPort;
    				    		}
    				            System.out.println("gpt-4o");
    				    		OpenAiSpeaker.openAiKey = openaiKey;
					            OpenAiSpeaker op = new OpenAiSpeaker();
					            String return_test = op.GPT4_Large_Chat_ReturnMessage(string_str3_entity,entityValue); 
					            test_str3 = test_str3 +"\r\n" + return_test;
				        	}
		        		}

		        	}
		        		
		        } 

		    });
			
		executorService.submit(new Runnable() {
	        @Override
	        public void run() {
	        	
	            if(!str2.isEmpty()) 
	            {
	            	try {
		            	Thread.sleep(5000);
		            	while(test_str2.isEmpty()) {
		            	
							Thread.sleep(1000);
							System.out.println("send str2 request-...");
							Platform.runLater(() -> {
								statusLabel.setText("                                           "
								+ "Current State：It takes about four minute to generate, please wait a moment...");
							});
//							textArea.setText(generatedData+"\r\n"+test_str2+"\r\n"+test_str3);//将输入的内容显示至屏幕上
							
		            	}
		            } catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
		            }
	            }
	        	
	        	
	            if(!str3.isEmpty()) 
	            {
	            	try {
		            Thread.sleep(5000);
	            	while(test_str3.isEmpty()) {
							Thread.sleep(1000);
							System.out.println("send str3 request-...");
							Platform.runLater(() -> {
								statusLabel.setText("                                           "
								+ "Current State：It takes about four minute to generate, please wait a moment...");
							});
//							textArea.setText(generatedData+"\r\n"+test_str2+"\r\n"+test_str3);//将输入的内容显示至屏幕上
	            	}
	            	} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
	            	
	            }
            	
	            
				if(!minstr.isEmpty() && str_temp.isEmpty()) 
	            {
		            while(min_test_str1.isEmpty()) {
			            	try {
								Thread.sleep(1000);
								System.out.println("send 1 request-...");
								Platform.runLater(() -> {
									statusLabel.setText("                                           "
									+ "Current State：It takes about four minute to generate, please wait a moment...");
								});
	//							textArea.setText(generatedData+"\r\n"+test_str2+"\r\n"+test_str3);//将输入的内容显示至屏幕上
								} catch (InterruptedException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
		            }
	            }else if(minstr.isEmpty() && !str_temp.isEmpty()){
	            	while(test_str1.isEmpty()) 
	            	{
		            	try {
							Thread.sleep(1000);
							System.out.println("send 2 request-...");
							Platform.runLater(() -> {
								statusLabel.setText("                                           "
								+ "Current State：It takes about four minute to generate, please wait a moment...");
							});
//							textArea.setText(generatedData+"\r\n"+test_str2+"\r\n"+test_str3);//将输入的内容显示至屏幕上
							} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	            	}
		       }else if(!minstr.isEmpty() && !str_temp.isEmpty()) {
		    	   while(min_test_str1.isEmpty() || test_str1.isEmpty()) 
	            	{
		            	try {
							Thread.sleep(1000);
							System.out.println("send 3 request-...");
							Platform.runLater(() -> {
								statusLabel.setText("                                           "
								+ "Current State：It takes about four minute to generate, please wait a moment...");
							});
//							textArea.setText(generatedData+"\r\n"+test_str2+"\r\n"+test_str3);//将输入的内容显示至屏幕上
							} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	            	}
		       }else if(minstr.isEmpty() && str_temp.isEmpty()) {
		    	   System.out.println("Null to generate");
		       }
	            
	            //Please wait a moment, it is being generated...
	            
        		System.out.println("--完了ssss...");
	            Platform.runLater(new Runnable() {
	                @Override
	                public void run() {
	                    //更新JavaFX的主线程的代码放在此处
//	                	progressIndicator.setProgress(1); // 停止动画
	                	primaryStage123.close();
	                	stagesss.getScene().getRoot().setDisable(false);
	                    borderpane.setRight(vBox);
	    				try {
	    					
	    						
	    						generatedData =  min_test_str1+"\r\n"+test_str1+"\r\n"+test_str2+"\r\n"+test_str3;
    							
								// 定义正则表达式，匹配 yaml 块
	    				        Pattern pattern = Pattern.compile("(?s)```yaml\\s*(.*?)\\s*```", Pattern.CASE_INSENSITIVE);
	    				        Matcher matcher = pattern.matcher(generatedData);

	    				        if (matcher.find()) {
	    				            // 提取 YAML 数据
	    				            String yamlData = matcher.group(1).trim();

	    				            // 去除单引号和双引号
	    				            generatedData = yamlData.replaceAll("(['\"])([^'\"]*?)\\1", "$2");

	    				            // 输出处理后的 YAML 数据
	    				            System.out.println("提取的 YAML 数据（已去除包裹的引号111）：\r\n" + generatedData);
	    				        } else {
	    				            System.out.println("未找到 YAML 数据。");
	    				        }
	    						
	    						try {
    								textArea_returnData = EntityManager.YamlFilter(generatedData, returnEntityNumber_Totalstr , 1,"");
    								
    								System.out.println("最终返回: \r\n "+textArea_returnData);		
    							} catch (JsonProcessingException e) {
    								// TODO Auto-generated catch block
    								e.printStackTrace();
    							}
    							if(!textArea_returnData.isEmpty()) {
    								
        							OutFileString(textArea_returnData.toString(),"D:/test_chat.yaml");
									generatedData = textArea_returnData;
    	    						
    								File file = new File("D:/test_chat.yaml");
    								Allmapper = EntityManager.loadFile(file,2);
    								
    					        	Set<String> keys = Allmapper.keySet();
    					        	ObservableList<String> dataAllString = FXCollections.observableArrayList(keys);
    					        	leftTable.setItems(FXCollections.observableArrayList(dataAllString));
    					        	
    					        	rightTable.refresh();
    					        	statusLabel.setText("                                           "
    					        		+ "        Current State：Generation is complete!");
    							}

						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	                }
	            });
	            
	        } 
	    });

	}



		
		public static void OutFileString(String cu,String filePath) throws IOException {
			String a = cu.toString();
			OutputStream os = null;
			OutputStreamWriter ops = null;//添加了四个包
			BufferedWriter bw = null;
			File f1 = new File(filePath);
			if(!f1.exists()) {
				f1.getParentFile().mkdirs();
			}
			try {
				os = new FileOutputStream(f1);
				ops = new OutputStreamWriter(os);
				bw = new BufferedWriter(ops);
				bw.write(a);
				bw.newLine();
				bw.flush();
			}
			catch(FileNotFoundException e){
				e.printStackTrace();
			}
			catch(IOException e) {
				
				e.printStackTrace();
			}
			
			System.out.println(" 生成完毕 successfulString!!!");
		
		}//OutFile
		



«««		public void fun(String Totalstr, String str, String str2, String str3, String ProxyPort, String openaiKey) {
«««					
«««			HashMap<String, Integer> returnEntityNumber_Totalstr =  ReturnEntityNumber(Totalstr);
«««
«««			
«««			executorService.submit(new Runnable() {
«««		        @Override
«««		        public void run() {
«««		        
«««			        for(int i = 1 ; i <=str_temp.size(); i++) 
«««		        		{
«««		        			
«««		        			if(AI_model.equals("gpt-3.5-turbo")) 
«««				        	{
«««								System.out.println("send str Chat...");
«««					            if(!ProxyPort.equals("no")) 
«««					            {
«««					    			OpenAiSpeaker.PropertyKey = ProxyPort;
«««					    		}
«««					            
«««					            if(!openaiKey.equals("")) 
«««    				            {
«««    				            	OpenAiSpeaker.openAiKey = openaiKey;
«««    				            	
«««    				            	OpenAiSpeaker op = new OpenAiSpeaker();
«««    					            System.out.println("str_temp.get(i): " + str_temp.get(i));
«««    					            String return_test =  op.Chat_ReturnMessage(str_temp.get(i)); 	
«««    					            test_str1 = test_str1 +"\r\n" + return_test;
«««    				            }
«««				        	}
«««		        	}
«««		        	
««««««		        	if(AI_model.equals("gpt-3.5-turbo")) {
««««««		        		System.out.println("执行业务逻辑---发送请求...");
««««««						System.out.println("send str Chat...");
««««««			            if(!ProxyPort.equals("no")) {
««««««			    			OpenAiSpeaker.PropertyKey = ProxyPort;
««««««			    		}
««««««			            OpenAiSpeaker op = new OpenAiSpeaker();
««««««			            test_str1 = op.Chat_ReturnMessage(str); 	
««««««		        	}
«««
«««
««««««					if(AI_model.equals("text-davinci-003")) {
««««««						System.out.println("执行业务逻辑---发送请求...");
««««««			            OpenAiSpeaker op = new OpenAiSpeaker();
««««««			            test_str1 = op.Completion_text_davinci_003_ReturnMessage(str); 	
««««««					}
««««««					if(AI_model.equals("text-davinci-002")) {
««««««						System.out.println("执行业务逻辑---发送请求...");
««««««			            OpenAiSpeaker op = new OpenAiSpeaker();
««««««			            test_str1 = op.Completion_text_davinci_002_ReturnMessage(str);
«««					}
«««		        });
«««		        
«««			executorService.submit(new Runnable() {
«««		        @Override
«««		        public void run() {
«««		        	if(!str2.isEmpty()) 
«««		        	{
«««		        		
«««		        		HashMap<String, Integer> returnEntityNumber_str2 =  ReturnEntityNumber(str2);
«««		        		Set<String> key_str2 = returnEntityNumber_str2.keySet();
«««		        		
«««		        		for (String string_str2_entity : key_str2) 
«««		        		{
«««		        			int entityValue = returnEntityNumber_str2.get(string_str2_entity); 
«««	        				if(AI_model.equals("gpt-3.5-turbo")) 
«««	        				{
«««						        System.out.println("send str2 Chat...");
«««					            if(!ProxyPort.equals("no")) {
«««					    			OpenAiSpeaker.PropertyKey = ProxyPort;
«««					    			System.out.println("OpenAiSpeaker.PropertyKey: "+OpenAiSpeaker.PropertyKey);
«««					    		}
«««					    		if(!openaiKey.equals("")) 
«««					            {
«««					            	OpenAiSpeaker.openAiKey = openaiKey;
«««					            	
«««					            	OpenAiSpeaker op = new OpenAiSpeaker();
«««						            String return_test =  op.Large_Chat_ReturnMessage(string_str2_entity,entityValue); 
«««						            test_str2 = test_str2 +"\r\n" + return_test;
«««					            }
««««««					            OpenAiSpeaker op = new OpenAiSpeaker();
««««««					            String return_test =  op.Large_Chat_ReturnMessage(string_str2_entity,entityValue); 
««««««					            test_str2 = test_str2 +"\r\n" + return_test;
«««	        				}
«««		        		}
«««		        		
«««		        		
«««		        	}
«««		        	
«««		        	
««««««		        	if(!str2.isEmpty()) 
««««««		        	{
««««««		        		if(AI_model.equals("gpt-3.5-turbo")) {
«««««««««			        		System.out.println("执行业务逻辑---发送请求...");
««««««					        System.out.println("send str2 large Chat...");
««««««				            if(!ProxyPort.equals("no")) {
««««««				    			OpenAiSpeaker.PropertyKey = ProxyPort;
««««««				    		}
««««««				            OpenAiSpeaker op = new OpenAiSpeaker();
««««««				            test_str2 = op.Chat_ReturnMessage(str2); 	
««««««			        	}
«««	
«««			        	
««««««						if(AI_model.equals("text-davinci-003")) {
««««««							System.out.println("执行业务逻辑---发送请求...");
««««««				            OpenAiSpeaker op = new OpenAiSpeaker();
««««««				            test_str2 = op.Completion_text_davinci_003_ReturnMessage(str2); 	
««««««						}
««««««						if(AI_model.equals("text-davinci-002")) {
««««««							System.out.println("执行业务逻辑---发送请求...");
««««««				            OpenAiSpeaker op = new OpenAiSpeaker();
««««««				            test_str2 = op.Completion_text_davinci_002_ReturnMessage(str2);
««««««						}
«««		        	}
«««		        	
«««		        } 
«««		    });
«««			executorService.submit(new Runnable() {
«««		        @Override
«««		        public void run() 
«««		        {
«««		        	if(!str3.isEmpty()) 
«««		        	{
«««		        		HashMap<String, Integer> returnEntityNumber_str3 =  ReturnEntityNumber(str3);
«««		        		Set<String> key_str3 = returnEntityNumber_str3.keySet();
«««		        		for (String string_str3_entity : key_str3) 
«««		        		{
«««		        			int entityValue = returnEntityNumber_str3.get(string_str3_entity);
«««		        			if(AI_model.equals("gpt-3.5-turbo")) {
««««««					        	System.out.println("执行业务逻辑---发送Chat请求...");
«««					        	System.out.println("send str3 large Chat...");
«««    				            if(!ProxyPort.equals("no")) {
«««    				    			OpenAiSpeaker.PropertyKey = ProxyPort;
«««    				    		}
«««					    		if(!openaiKey.equals("")) 
«««					            {
«««					            	OpenAiSpeaker.openAiKey = openaiKey;
«««					            	
«««					            	OpenAiSpeaker op = new OpenAiSpeaker();
«««						            String return_test = op.Large_Chat_ReturnMessage(string_str3_entity,entityValue); 
«««						            test_str3 = test_str3 +"\r\n" + return_test;
«««					            }
««««««					            OpenAiSpeaker op = new OpenAiSpeaker();
««««««					            String return_test = op.Large_Chat_ReturnMessage(string_str3_entity,entityValue); 
««««««					            test_str3 = test_str3 +"\r\n" + return_test;
«««				        	}
««««««							if(AI_model.equals("text-davinci-003")) {
««««««								System.out.println("执行业务逻辑---发送text_davinci_003请求...");
««««««					            OpenAiSpeaker op = new OpenAiSpeaker();
««««««					            String return_test = op.Large_Completion_text_davinci_003_ReturnMessage(string_str3_entity,entityValue); 
««««««					            test_str3 = test_str3 +"\r\n" + return_test;
««««««							}
««««««							if(AI_model.equals("text-davinci-002")) {
««««««								System.out.println("执行业务逻辑---发送text_davinci_002请求...");
««««««					            OpenAiSpeaker op = new OpenAiSpeaker();
««««««					            String return_test = op.Large_Completion_text_davinci_002_ReturnMessage(string_str3_entity,entityValue); 
««««««					            test_str3 = test_str3 +"\r\n" + return_test;
««««««							} 
«««		        		}
«««
«««		        	}
«««		        		
«««		        } 
«««
«««		    });
«««			
«««		executorService.submit(new Runnable() {
«««	        @Override
«««	        public void run() {
«««	        	
«««	            if(!str2.isEmpty()) 
«««	            {
«««	            	try {
««««««		            	System.out.println("执行业务逻辑--str2请求-...");
««««««						System.out.println("send str2 request-...");
«««		            	Thread.sleep(5000);
«««		            	while(test_str2.isEmpty()) {
«««		            	
«««							Thread.sleep(1000);
«««							System.out.println("send str2 request-...");
«««							Platform.runLater(() -> {
«««								statusLabel.setText("                                           "
«««								+ "Current State：It takes about four minute to generate, please wait a moment...");
«««							});
«««//							textArea.setText(generatedData+"\r\n"+test_str2+"\r\n"+test_str3);//将输入的内容显示至屏幕上
«««							
«««		            	}
«««		            } catch (InterruptedException e) {
«««						// TODO Auto-generated catch block
«««						e.printStackTrace();
«««		            }
«««	            }
«««	        	
«««	        	
«««	            if(!str3.isEmpty()) 
«««	            {
«««	            	try {
««««««		            System.out.println("执行业务逻辑--str3请求-...");
««««««					System.out.println("send str3 request-...");
«««		            Thread.sleep(5000);
«««	            	while(test_str3.isEmpty()) {
«««							Thread.sleep(1000);
«««							System.out.println("send str3 request-...");
«««							Platform.runLater(() -> {
«««								statusLabel.setText("                                           "
«««								+ "Current State：It takes about four minute to generate, please wait a moment...");
«««							});
«««//							textArea.setText(generatedData+"\r\n"+test_str2+"\r\n"+test_str3);//将输入的内容显示至屏幕上
«««	            	}
«««	            	} catch (InterruptedException e) {
«««						// TODO Auto-generated catch block
«««						e.printStackTrace();
«««					}
«««	            	
«««	            }
«««            	
«««	            
«««				if(!str.isEmpty()) 
«««	            {
«««		            while(test_str1.isEmpty()) {
«««			            	try {
«««								Thread.sleep(1000);
««««««								System.out.println("--发送str1请求...");
«««								System.out.println("send str1 request-...");
«««								Platform.runLater(() -> {
«««									statusLabel.setText("                                           "
«««									+ "Current State：It takes about four minute to generate, please wait a moment...");
«««								});
«««	//							textArea.setText(generatedData+"\r\n"+test_str2+"\r\n"+test_str3);//将输入的内容显示至屏幕上
«««								} catch (InterruptedException e) {
«««								// TODO Auto-generated catch block
«««								e.printStackTrace();
«««							}
«««		            }
«««	            }
«««	            
«««	            //Please wait a moment, it is being generated...
«««	            
«««        		System.out.println("--完了ssss...");
«««	            Platform.runLater(new Runnable() {
«««	                @Override
«««	                public void run() {
«««	                    //更新JavaFX的主线程的代码放在此处
«««//	                	progressIndicator.setProgress(1); // 停止动画
«««	                	primaryStage123.close();
«««	                	stagesss.getScene().getRoot().setDisable(false);
«««	                    borderpane.setRight(vBox);
«««	    				try {
«««	    					
«««	    						
«««	    						generatedData =  test_str1+"\r\n"+test_str2+"\r\n"+test_str3;
«««    							try {
«««    								textArea_returnData = EntityManager.YamlFilter(generatedData, returnEntityNumber_Totalstr , 1,"");
«««    								
«««    								System.out.println("最终返回: \r\n "+textArea_returnData);	
«««    								
«««    							} catch (JsonProcessingException e) {
«««    								// TODO Auto-generated catch block
«««    								e.printStackTrace();
«««    							}
«««    							if(!textArea_returnData.isEmpty()) {
«««    								
«««        							OutFileString(textArea_returnData.toString(),"D:/test_chat.yaml");
«««									generatedData = textArea_returnData;
«««    	    						
«««    								File file = new File("D:/test_chat.yaml");
«««    								Allmapper = EntityManager.loadFile(file,2);
«««    								
«««    					        	Set<String> keys = Allmapper.keySet();
«««    					        	ObservableList<String> dataAllString = FXCollections.observableArrayList(keys);
«««    					        	leftTable.setItems(FXCollections.observableArrayList(dataAllString));
«««    					        	
«««    					        	rightTable.refresh();
«««    					        	statusLabel.setText("                                           "
«««    					        		+ "        Current State：Generation is complete!");
«««    							}
«««	    						
«««	    					
«««	    						
«««	    					
«««						} catch (IOException e) {
«««							// TODO Auto-generated catch block
«««							e.printStackTrace();
«««						}
«««	                }
«««	            });
«««	            
«««	        } 
«««	    });
«««
«««	}
		
«««		public static void OutFileString(String cu,String filePath) throws IOException {
«««			String a = cu.toString();
«««			OutputStream os = null;
«««			OutputStreamWriter ops = null;//添加了四个包
«««			BufferedWriter bw = null;
«««			File f1 = new File(filePath);
«««			if(!f1.exists()) {
«««				f1.getParentFile().mkdirs();
«««			}
«««			try {
«««				os = new FileOutputStream(f1);
«««				ops = new OutputStreamWriter(os);
«««				bw = new BufferedWriter(ops);
«««				bw.write(a);
«««				bw.newLine();
«««				bw.flush();
«««			}
«««			catch(FileNotFoundException e){
«««				e.printStackTrace();
«««			}
«««			catch(IOException e) {
«««				
«««				e.printStackTrace();
«««			}
«««			
«««			System.out.println(" 生成完毕 successfulString!!!");
«««		
«««		}//OutFile
		
			
			
	public void start(Stage primaryStage){

			Map<String, List> AllEntityAttributes = new HashMap<String, List>();
	 		«FOR entitysss	: sEntity»
	 			EntityNumber i«entitysss.name» = new  EntityNumber();
	 	        i«entitysss.name».setName("«entitysss.name»");
	 	        i«entitysss.name».setNumber(2);
	 	        i«entitysss.name».setCharacter("");
	 	        EntityNumberInstances.add(i«entitysss.name»);
	 	        List<String> «entitysss.name»Attributes = Arrays.asList(«FOR attribute : entitysss.attributes» "«attribute.name»",«ENDFOR» "");
	 	        AllEntityAttributes.put("«entitysss.name»", «entitysss.name»Attributes);
	 		«ENDFOR»

	 		«FOR entitysss	: sEntity»
	 			EntityNumber i«entitysss.name» = new  EntityNumber();
	 			ssssssssssssssss
	 		«ENDFOR»
 		
			statusLabel = new Label("                                           "
				+ "                              Current State：No data generated...");            
			statusLabel.setPrefHeight(100);
	//		// 添加边框
	//		statusLabel.setStyle("-fx-border-color: black; -fx-border-width: 2px;");
	//		// 添加背景
	//		statusLabel.setStyle("-fx-background-color: #FFFFFF;");  // 使用颜色值
	//		statusLabel.setAlignment(Pos.CENTER);
	    	borderpane = new BorderPane();
	    	textArea=new TextArea("Initial data generation");//中间部分，显示生成的数据和各个按钮：chatgpt、notionAI
	        textArea.setWrapText(true);//实现自动换行
	 
	        vBox=new VBox(10);//设置间距为15
	        vBox.setPadding(new Insets(6,0,0,0));
	        vBox.setPrefWidth(180);
	        
	    	Button Generation = new Button("Generation Setting");//设置按钮名称
	    	yaml_view = new Button("Yaml View");
	    	
	    	table_view = new Button("Table View");
	        Button load=new Button("Load Data");
	        Generation.setPrefWidth(130);//设置按钮宽度
	        yaml_view.setPrefWidth(130);
	        table_view.setPrefWidth(130);
	        load.setPrefWidth(180);
	        
	        Label models_Label = new Label("Model");
	        models_Label.setFont(new Font("Arial", 15));
	        
	        ChoiceBox<String> choiceBox = new ChoiceBox<>();
//	        ,"gpt-4"
	         choiceBox.getItems().addAll("gpt-3.5-turbo","gpt-4","gpt-4o");
			//,"text-davinci-003","text-davinci-002"
//	        choiceBox.getSelectionModel().select(0);//默认下拉框选中第0项
	        choiceBox.setPrefWidth(137);
	        choiceBox.setPrefHeight(27);
	        
	        choiceBox.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
	            System.out.println("Selected option: " + newValue);
	            
	            ObservableList<String> dataleftTable = FXCollections.observableArrayList();
	        	leftTable.setItems(FXCollections.observableArrayList(dataleftTable));
	            rightTable.getColumns().clear();
	            
	            AI_model = newValue;
	        });
	        
	        choiceBox.setStyle("-fx-font-family: Arial; -fx-font-size: 14px; -fx-font-weight: bold; -fx-text-fill: red;");
	        // 设置ChoiceBox的背景色

	        
	        
	        
   	        Label Proxy_Label = new Label("Proxy Port: ");
   	        Proxy_Label.setFont(new Font("Arial", 15));
   	        Proxy_Label.setPrefWidth(90);
   	        Proxy_Label.setPadding(new Insets(10,0,0,0));
   	        
   
   	        TextArea ProxyPortArea = new TextArea();
   	        ProxyPortArea.setText("no");
   	        ProxyPortArea.setPrefHeight(1);
   	        ProxyPortArea.setPrefWidth(40); 

   	        
   	        Label Proxy_openAiKey = new Label("OpenAiKey: ");
   	        Proxy_openAiKey.setFont(new Font("Arial", 15));
   	        Proxy_openAiKey.setPrefWidth(90);
   	        Proxy_openAiKey.setPadding(new Insets(20,0,0,0));
   	        
   	        
   	        
   	        TextArea ProxyPortArea_openAiKey = new TextArea();
   	        ProxyPortArea_openAiKey.setText("");
   	        ProxyPortArea_openAiKey.setPrefWidth(40); 
   	        ProxyPortArea_openAiKey.setPrefHeight(20); 
   	        
   	        
	        
	        
	    	leftTable = new TableView<>();
	        leftTable.setPrefWidth(235);
	 		rightTable = new TableView<>();
	 		rightTable.setPrefWidth(575);
	        
	        
	        // 创建表格列
	        TableColumn<String,String> column = new TableColumn<>("Entity");
	        column.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue())); // 绑定数据源，这里为空字符串
	        column.setPrefWidth(110);
	        
	        leftTable.getColumns().add(column); // 添加到 leftTable 中
	        leftTable.getColumns().forEach(c -> c.setVisible(false));
	        column.setVisible(true);
    //      leftTable.setItems(FXCollections.observableArrayList(dataAllString));
        	ObservableList<String> dataleftTable = FXCollections.observableArrayList();
        	leftTable.setItems(FXCollections.observableArrayList(dataleftTable));
	        
	        column.setCellFactory(e -> {
	            return new TableCell<String, String>() {
	                @Override
	                protected void updateItem(String item, boolean empty) {
	                    super.updateItem(item, empty);
	                    if (empty || item == null) {
	                        setText(null);
	                        setGraphic(null);
	                    } else {
	                        setText(item);
	                        setAlignment(Pos.CENTER); // 设置单元格文本居中
	                    }
	                }
	            };
	        });
		        


 		leftTable.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> {
 		    // 获取当前选择的实体名称
 		    String selectedEntity = leftTable.getSelectionModel().getSelectedItem();
 		    // 获取当前实体对应的对象列表
 		    List<Object> objects = Allmapper.get(selectedEntity);

 		    // 创建表格列，并添加到右边的表格中
 		    rightTable.getColumns().clear();

          		 
 		    for (Field field : objects.get(0).getClass().getDeclaredFields()) {
 		    	if(AllEntityAttributes.get(selectedEntity).contains(field.getName()))
 		    	{
 		    		TableColumn<Object, Object> col = new TableColumn<>(field.getName());
	 		        col.setCellValueFactory(new PropertyValueFactory<>(field.getName()));
	 		        col.setCellFactory(e -> {
	 		            return new TableCell<Object, Object>() {
	 		                protected void updateItem(Object item, boolean empty) {
	 		                    super.updateItem(item, empty);
	 		                    if (empty || item == null) {
	 		                        setText(null);
	 		                        setGraphic(null);
	 		                    } else {
	 		                        setText(item.toString());
	 		                        setAlignment(Pos.CENTER); // 设置单元格文本居中
	 		                    }
	 		                }
	 		            };
	 		        });
	 		        rightTable.setEditable(true);
	 		        col.setCellFactory(TextFieldTableCell.forTableColumn(new StringConverter<Object>() {
	 		           @Override
	 		          public String toString(Object object) {
	 		              return object.toString();
	 		          }

	 		          @Override
	 		          public Object fromString(String string) {
	 		              return string;
	 		          }
	 		      }));
	 		       col.setOnEditCommit(event -> {
	 		    	    // 处理表格中的编辑事件, 将修改后的数据保存到数据集合中
		 	            // 获取修改的行索引
		 	            int rowIndex = event.getTablePosition().getRow();
		 	            // 获取修改后的值
		 	           Object newValue = event.getNewValue();
		 	            // 根据索引更新对应的数据
			 	       // 获取当前行对应的对象
		 	          Object selectedItem = rightTable.getItems().get(rowIndex);
		 	          
		 	         String[] parts = selectedItem.getClass().getName().split("\\.");
		 	        String result = parts[parts.length - 1]; // 取最后一个元素
		 	        System.out.println("Data saved! selected: " + result); // 
		 	         		 	         
		 	          // 获取要更新的属性的 Field 对象
		 	          try {
						Field fields = selectedItem.getClass().getDeclaredField(col.getText());
						// 取消 Java 的访问权限检查
						fields.setAccessible(true);
			 	          // 更新属性值
						 System.out.println("Data saved! fields Type: " + newValue.toString()+"   " +fields.getType());
//						 Allmapper.replace(newVal, dataAllString)
						 if( fields.getType().toString().equals("float") ) {
							 fields.set(selectedItem, Float.parseFloat(newValue.toString()));
						 }else if( fields.getType().toString().equals("boolean") ){
							 fields.set(selectedItem, Boolean.parseBoolean(newValue.toString()));
						 }else if( fields.getType().toString().equals("int") ){
							 fields.set(selectedItem, Integer.parseInt(newValue.toString()) );
						 }else if( fields.getType().toString().equals("class java.time.LocalDate") ){
							 DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
							 fields.set(selectedItem, LocalDate.parse(newValue.toString(), formatter) );
						 }else if( fields.getType().toString().equals("class java.lang.String") ){
							 fields.set(selectedItem, newValue);
						 }else 
						 {
							 System.out.println("进来了枚举类: " + fields.getType());
							 fields.set(selectedItem, newValue);
						 }
						 
						 Allmapper.replace(result, (List<Object>)rightTable.getItems());
						 statusLabel.setText("                                           "
							+ "                       Current State：Modified and saved!"
							
						 );
					     
					} catch (NoSuchFieldException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					} catch (SecurityException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					} catch (IllegalArgumentException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					} catch (IllegalAccessException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
	 		    	});
	 		     
	 		        rightTable.getColumns().add(col);
 		    	}
 		        
 		    }
 		    
 		    
 		    // 将对象列表添加到右边的表格中
 		    ObservableList<Object> datasss = FXCollections.observableArrayList(objects);
 		    rightTable.setItems(datasss);
 		});
 		
 		
 		// saveButton.setOnAction(event -> {
            // 将修改后的数据保存到数据集合中
 			// EntityManager.loadMapper(Allmapper);
       //  });




            Generation.setOnAction(o->{//设置鼠标点击事件,发送信息
            	
           	textArea.setText("Please wait a moment, it is being generated...");
					
    			

    			SettingTable.setPrefWidth(440);
				
				
            	ObservableList<EntityNumber> dataEntityString = FXCollections.observableArrayList(EntityNumberInstances);
            	SettingTable.setItems(FXCollections.observableArrayList(dataEntityString));
            	 // 创建表格列
    	        TableColumn<EntityNumber,String> column_SettingEntity = new TableColumn<>("Entity");
    	        column_SettingEntity.setCellValueFactory(new PropertyValueFactory<>("Name")); // 绑定数据源，这里为空字符串
    	        column_SettingEntity.setPrefWidth(100);
    	        
    	        column_SettingEntity.setCellFactory(TextFieldTableCell.forTableColumn());
    	        SettingTable.getColumns().add(column_SettingEntity); // 添加到 SettingTable 中
				SettingTable.setEditable(true);

            	
            	column_SettingEntity.setOnEditCommit(event -> {
                    // 将修改后的数据保存到数据集合中
                    System.out.println("Data saved!");
                    // 获取修改的行索引
                    int rowIndex = event.getTablePosition().getRow();
                    // 获取修改后的值
                    String newValue = event.getNewValue();
                    // 根据索引更新对应的数据
                    SettingTable.getItems().get(rowIndex).setName(newValue);
                });
            	
            	
            	
    	        TableColumn<EntityNumber, Integer> column_EntityNumber = new TableColumn<>("Number");
    	        column_EntityNumber.setCellValueFactory(new PropertyValueFactory<>("Number")); // cellData -> new SimpleStringProperty(cellData.getValue())绑定数据源，这里为空字符串
    	        column_EntityNumber.setPrefWidth(100);
    	        SettingTable.getColumns().add(column_EntityNumber); 

    	        // 创建可编辑的Spinner控件
    	        column_EntityNumber.setCellFactory(col -> new TableCell<EntityNumber, Integer>() {
    	            private final Spinner<Integer> spinner = new Spinner<>(0, 10000, 0);

    	            {
    	                spinner.setEditable(true);
    	                spinner.getEditor().textProperty().addListener((obs, oldValue, newValue) -> {
    	                    if (!newValue.matches("\\d*")) {
    	                        spinner.getEditor().setText(oldValue);
    	                    }
    	                });
    	                spinner.valueProperty().addListener((obs, oldValue, newValue) -> {
    	                    commitEdit(newValue);
    	                });
    	                setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
    	                setGraphic(spinner);
    	            }

    	            @Override
    	            protected void updateItem(Integer item, boolean empty) {
    	                super.updateItem(item, empty);
    	                if (empty) {
    	                    setText(null);
    	                    setGraphic(null);
    	                } else {
    	                    spinner.getValueFactory().setValue(item);
    	                    setGraphic(spinner);
    	                }
    	            }

    	            @Override
    	            public void commitEdit(Integer newValue) {
    	                super.commitEdit(newValue);
    	                TableView<EntityNumber> table = getTableView();
    	                if (table != null) {
    	                    table.requestFocus();
    	                    table.getSelectionModel().select(getIndex());
    	                    table.getFocusModel().focus(getIndex(), column_EntityNumber);
    	                }
    	                // 获取当前单元格所在行和列的索引
    	                int rowIndex = getTableRow().getIndex();
    	                // 获取当前表格中的数据
    	                EntityNumber entity = getTableView().getItems().get(rowIndex);
    	                // 更新数据
    	                entity.setNumber(newValue);
    	            }

    	            @Override
    	            public void cancelEdit() {
    	                super.cancelEdit();
    	                updateItem(getItem(), false);
    	            }

    	            @Override
    	            public void startEdit() {
    	                super.startEdit();
    	                spinner.getValueFactory().setValue(getItem());
    	                setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
    	                setGraphic(spinner);
    	                spinner.getEditor().selectAll();
    	            }
    	        });

            	column_EntityNumber.setOnEditCommit(event -> {
                     // 将修改后的数据保存到数据集合中
                     System.out.println("Data saved!");
                     // 获取修改的行索引
                     int rowIndex = event.getTablePosition().getRow();
                     // 获取修改后的值
                     Integer newValue = event.getNewValue();
                     // 根据索引更新对应的数据
                     SettingTable.getItems().get(rowIndex).setNumber(Integer.valueOf(newValue));
                 });

            	TableColumn<EntityNumber,String> column_EntityCharacter = new TableColumn<>("Note");
            	column_EntityCharacter.setCellValueFactory(new PropertyValueFactory<>("Character")); // 绑定数据源，这里为空字符串
            	column_EntityCharacter.setPrefWidth(235);
    	        
            	column_EntityCharacter.setCellFactory(TextFieldTableCell.forTableColumn());
    	        SettingTable.getColumns().add(column_EntityCharacter); // 添加到 SettingTable 中
    	        column_EntityCharacter.setOnEditCommit(event -> {
                    // 将修改后的数据保存到数据集合中
                    System.out.println("Data saved!");
                    // 获取修改的行索引
                    int rowIndex = event.getTablePosition().getRow();
                    // 获取修改后的值
                    String newValue = event.getNewValue();
                    // 根据索引更新对应的数据
                    SettingTable.getItems().get(rowIndex).setCharacter(newValue);
                });

            	
    			
    			
    			Stage primaryStage_Generation_Setting = new Stage();
	 			
	 			
    			setting_Generation_Promt.setPrefWidth(120);
    			setting_Generation_Promt.setOnAction(e->{//设置鼠标点击事件,发送信息
	 				
	 			if(!ProxyPortArea_openAiKey.getText().equals("")) {
	 				
	 				   statusLabel.setText("                                           "
							+ "                       Current State：Generate Promt");

		 		       GenerationLabel = new Label("It takes some time to generate, please wait a moment...");            
		 		       
		 		       GenerationLabel.setPrefHeight(20);
		 		       GenerationLabel.setPrefWidth(400);
		 		       GenerationLabel.setPadding(new Insets(20,0,0,0));	
		 		       GenerationLabel.setAlignment(Pos.CENTER);
		 		       
		 		       
						textArea_Promt.setPrefHeight(370);

//						String testData = "Generate entity examples of the system based on these entity information, Try to generate reasonable and realistic data, "
//								+ "please generate the number of entity instances according to the given values: "
//							+ "\r\n"
//								+ "Store: 2, Storenote:(), ProductCatalog: 2, ProductCatalognote:(), CashDesk: 2, "
//								+ "CashDesknote:(), Sale: 2, Salenote:(), Cashier: 2, Cashiernote:(), SalesLineItem: 2, "
//								+ "SalesLineItemnote:(), Item: 2, Itemnote:(), Payment: 2, Paymentnote:(), CashPayment: 2, "
//								+ "CashPaymentnote:(), CardPayment: 2, CardPaymentnote:(), OrderEntry: 2, OrderEntrynote:(), "
//								+ "Supplier: 2, Suppliernote:(), OrderProduct: 2, OrderProductnote:(), "
//							+ "\r\n"
//							+ "\r\n"
//								+ "you only need to generate the ones in the square brackets, and you don't need to generate the ones not listed, and the attribute fields of the entity are initial capitalized, And the generated value of the attribute field cannot be outside the type range of the attribute field: int: The maximum length cannot exceed 8 digits; and 0 cannot be used as the beginning;boolean:true and false; float: The maximum length cannot exceed 8 digits; LocalDate: 0001-01-01 to 9999-12-31. \r\n"
//								+ "and the entity is returned in the format of a yaml file, and please note that the entity information in the generated data is unique and cannot be repeated. \r\n"
//							+ "\r\n"
//							+ "\r\n"
//								+ "Below is all the entity information given, please generate according to the number of entities above, no need to generate more than the others. "
//							+ "\r\n"
//							+ "\r\n"
//								+ "Store: (Id(int), Name(String), Address(String), IsOpened(boolean), );ProductCatalog: (Id(int), Name(String), );CashDesk: (Id(int), Name(String), IsOpened(boolean), );Sale: (Time(LocalDate), IsComplete(boolean), Amount(float), IsReadytoPay(boolean), );Cashier: (Id(int), Name(String), );SalesLineItem: (Quantity(int), Subamount(float), );Item: (Barcode(int), Name(String), Price(float), StockNumber(int), OrderPrice(float), );Payment: (AmountTendered(float), );CashPayment: (Balance(float), );CardPayment: (CardAccountNumber(String), ExpiryDate(LocalDate), );OrderEntry: (Quantity(int), SubAmount(float), );Supplier: (Id(int), Name(String), );OrderProduct: (Id(int), Time(LocalDate), OrderStatus( NEW,  RECEIVED,  REQUESTED, ), Amount(float), );The yaml data is in this format: \r\n"
//								+ "Item: \r\n"
//								+ "- Barcode: 123455690\r\n"
//								+ "  Name: Backpack\r\n"
//								+ "  Price: 49.99\r\n"
//								+ "  StockNumber: 20\r\n"
//								+ "  OrderPrice: 39.99\r\n"
//								+ "- Barcode: 127895489\r\n"
//								+ "  Name: apple\r\n"
//								+ "  Price: 49.99\r\n"
//								+ "  StockNumber: 20\r\n"
//								+ "  OrderPrice: 39.99\r\n"
//							+ "\r\n"
//							+ "\r\n"
//								+ "the following cases cannot occur:\r\n"
//								+ "1. Data with the same name cannot appear;\r\n"
//								+ "2. Data with the same ID cannot appear;\r\n"
//								+ "3. Entity's name with letters can not appear, for example \"Item 1\", \"Store 2\", \" Supplier 3\" and so on;\r\n"
//								+ "4. Entity's name with numbers can not appear, for example \"Item A\", \"Store B\", \" Supplier C\" and so on;\r\n"
//								+ "5. Double quotes can not appear.";
						
		 				
		 				int str_int_number = 0;
		 				int  countstr = 0;
		 				ObservableList<EntityNumber> allEntities = SettingTable.getItems();
		 				for (EntityNumber entity : allEntities) {
	//	 					str = str  + entity.getName() + ": " + entity.getNumber() + ", "+entity.getName()+"note:(" + entity.getCharacter()+ "), ";
		 					Totalstr_Prompt = Totalstr_Prompt  + entity.getName() + ": " + entity.getNumber() + ", "+entity.getName()+"note:(" + entity.getCharacter()+ "), ";
		 					if(entity.getNumber() <=10) 
			    			{
		 						str_int_number = str_int_number + entity.getNumber();
		 						str_Prompt = str_Prompt  + entity.getName() + ": " + entity.getNumber() + ", "+entity.getName()+"note:(" + entity.getCharacter()+ "), ";
		 						if(str_int_number > 40) 
		 						{
		 							System.out.println(str_Prompt);
		 							countstr = countstr +1;
		 							
		 							str_temp.put(countstr, str_Prompt);
		 							str_Prompt = "";
		 							minstr_Prompt = "";
		 							str_int_number = 0;
		 						}
		 						else 
		 						{
		 							minstr_Prompt = minstr_Prompt  + entity.getName() + ": " + entity.getNumber() + ", "+entity.getName()+"note:(" + entity.getCharacter()+ "), ";
		 						}
			    			}
		 					else if(10 < entity.getNumber() && entity.getNumber() <=20 ) {
		 						str2_Prompt = str2_Prompt  + entity.getName() + ": " + entity.getNumber() + ", "+entity.getName()+"note:(" + entity.getCharacter()+ "), ";
		 					}
			    			else if(20 < entity.getNumber() && entity.getNumber() <=10000 ) {
			    				str3_Prompt = str3_Prompt  + entity.getName() + ": " + entity.getNumber() + ", "+entity.getName()+"note:(" + entity.getCharacter()+ "), ";
			    			}
		 				}
		 				System.out.println("Totalstr_Prompt: "+Totalstr_Prompt);
		 				
		 				textArea_Promt.setText(setPrompt(Totalstr_Prompt));
		 				
		 				
		 				
						textArea_Promt.setStyle("-fx-font-family: 'Arial'; -fx-font-size: 14; ");//-fx-font-weight: bold;
						textArea_Promt.setWrapText(true);//自动换行
						
						if(textArea_Promt.getText().isBlank() == true) {
							textArea_Promt.setText("Sorry, please regenerate.");
						}
						
						
				        // 添加文本变化监听器，实时更新样式
						textArea_Promt.addEventFilter(KeyEvent.KEY_RELEASED, event -> {
				            updateStyles(textArea_Promt);
				        });
						
						textArea_Promt.setPrefHeight(430);

		                // 设置段落的样式
		                statusLabel.setText("                                           "
							+ "                       Current State：Prompt View");
						statusLabel.setPrefHeight(100);
		 		      
		 		       
		 		      
		 		       
		 		       // 创建一个可拉伸的 Region 占位符
		 		        Region spacer = new Region();
		 		        spacer.setPrefWidth(Region.USE_COMPUTED_SIZE);
		 		        
		 		       // 将按钮和 Region 放入 HBox
		 		        HBox hBox = new HBox();
		 		        hBox.getChildren().addAll(spacer, setting_Generation);

		 		        // 设置 HBox 的横向增长属性，确保 Region 拉伸，按钮在右侧
		 		        HBox.setHgrow(spacer, javafx.scene.layout.Priority.ALWAYS);
		 		       
		 		        VBox scene123_vBox_Promt = new VBox();
		 		       scene123_vBox_Promt.getChildren().addAll(textArea_Promt,hBox);
		 		       scene123_vBox_Promt.setMargin(textArea_Promt, new Insets(5, 5, 5, 5));
		 		       scene123_vBox_Promt.setMargin(hBox, new Insets(8, 10, 0, 0));
		 		        
		 		    	//It takes about four minute to generate, please wait a moment...
		 		        Scene scene123_Promt = new Scene(scene123_vBox_Promt, 600, 480);
		 		        primaryStage123.setTitle("Prompt Generation");
		 		        primaryStage123.setScene(scene123_Promt);
		 		        primaryStage123.show();

		 		      
	 				}else {
	 					Alert alert = new Alert(Alert.AlertType.INFORMATION);
		                alert.setContentText("Please enter OpenAIkey!");
		                alert.show();
	 				}

                });
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
	 			setting_Generation.setOnAction(e->{//设置鼠标点击事件,发送信息
	 				
	 				if(!ProxyPortArea_openAiKey.getText().equals("")) {
	 					statusLabel.setText("                                           "
							+ "                       Current State：Generation Setting");
						

		 				fun(Totalstr_Prompt, minstr_Prompt,str2_Prompt,str3_Prompt, ProxyPortArea.getText(), ProxyPortArea_openAiKey.getText());
	
		 				progressIndicator.setProgress(-1); // 初始进度为0
	
		 		    	// 创建一个ProgressIndicator控件并设置其进度为-1，以启动动画
		 		    	ProgressIndicator progressIndicatorsss = new ProgressIndicator(-1);
	
		 		    	// 创建一个StackPane，并将ProgressIndicator控件放置其中
		 		    	StackPane stackPane = new StackPane(progressIndicatorsss);
	
		 		    	// 将StackPane放置在BorderPane上方
		 		    	stackPane.setPrefWidth(120);
	//	 		    	borderpane.setRight(stackPane);
		 		    	
		 		    	
		 		    	
		 		    	GenerationLabel = new Label("It takes some time to generate, please wait a moment...");            
		 		        GenerationLabel.setPrefHeight(20);
		 		       GenerationLabel.setPrefWidth(400);
		 		       GenerationLabel.setPadding(new Insets(20,0,0,0));	
		 		       GenerationLabel.setAlignment(Pos.CENTER);
		 		       
		 		   // 创建表格
	 					String[][] data = {
		 		                {"YamL Number", "    Time"},
		 		                {"       25", "    18 s"},
		 		                {"      100", "  1.88 min"},
		 		                {"      300", "  11.50 min"},	
		 		                {"      500", "  22.50 min"},	
		 		                {"     1000", "  53.47 min"}
		 		        };
	
		 		        GridPane grid = new GridPane();
		 		        grid.setPadding(new Insets(10));
		 		        grid.setHgap(50);
		 		        grid.setVgap(10);
	
		 		        // 填充表格
		 		        for (int i = 0; i < data.length; i++) {
		 		            for (int j = 0; j < data[i].length; j++) {
		 		                Text cell = new Text(data[i][j]);
		 		                grid.add(cell, j, i);
		 		            }
		 		        }
		 		       
		 		       
		 		       grid.setAlignment(Pos.CENTER);
		 		       grid.setPadding(new Insets(15,0,0,0));
		 		       
		 		       
		 		        VBox scene123_vBox = new VBox();
		 		        scene123_vBox.getChildren().addAll(stackPane,GenerationLabel,grid);
		 		        scene123_vBox.setPadding(new Insets(15,0,0,0));
		 		        
		 		    	//It takes about four minute to generate, please wait a moment...
		 		        Scene scene123 = new Scene(scene123_vBox, 400, 280);
		 		        primaryStage123.setTitle("Generation");
		 		        primaryStage123.setScene(scene123);
		 		        primaryStage123.show();
		 		    	
		 		        
		 		       stagesss.getScene().getRoot().setDisable(true);
	//	 		       primaryStage.getScene().getRoot().setDisable(false);
	
		 				primaryStage_Generation_Setting.fireEvent(
	    	        			new javafx.stage.WindowEvent(primaryStage_Generation_Setting, javafx.stage.WindowEvent.WINDOW_CLOSE_REQUEST)
	    	        	);
	 				}else {
	 					Alert alert = new Alert(Alert.AlertType.INFORMATION);
		                alert.setContentText("Please enter OpenAIkey!");
		                alert.show();
	 				}

                });
	 			
	 			setting_Generation.setPrefWidth(100);
	 			
	 			VBox Proxyroot_Key = new VBox(Proxy_Label, ProxyPortArea,Proxy_openAiKey,ProxyPortArea_openAiKey);
	 			Proxyroot_Key.setSpacing(8);
	            
//	 			VBox openAiKey_vbox = new VBox(Proxy_openAiKey,ProxyPortArea_openAiKey);
//	 			openAiKey_vbox.setSpacing(10);
//	 			
//	 			VBox proxy_openaikey = new VBox(Proxyroot,openAiKey_vbox);
//	 			proxy_openaikey.setSpacing(10);
//	 			
	 			
	 			VBox root_editButton_openAiKey = new VBox(Proxyroot_Key,setting_Generation_Promt);
	 			root_editButton_openAiKey.setSpacing(30);
	 			
	 			
	 	       HBox root_editButton = new HBox(SettingTable,root_editButton_openAiKey);
	 	      root_editButton.setSpacing(6);
//	 	     root_editButton.setAlignment(Pos.CENTER);
	 	       root_editButton.setMargin(setting_Generation_Promt, new Insets(271,0,0,5));
	 	       Scene scene_Generation_Setting = new Scene(root_editButton, 600, 300);
	 	       primaryStage_Generation_Setting.setScene(scene_Generation_Setting);
	 	       primaryStage_Generation_Setting.setTitle("        Generation SettingTable View");
	 	       primaryStage_Generation_Setting.show();
    	        });
	         		
            load.setOnAction(o->{
            	EntityManager.loadMapper(Allmapper);
            	//模拟用户点击关闭功能，controller监听关闭并刷新
            	stagesss.fireEvent(
        	        			new javafx.stage.WindowEvent(primaryStage, javafx.stage.WindowEvent.WINDOW_CLOSE_REQUEST)
        	        	);
            });//设置鼠标点击事件,点击Quit时退出
            

            
            // 创建一个VBox来放置TableView和按钮
     		HBox hbox = new HBox(leftTable,rightTable);
     		vBox_status= new VBox(hbox, statusLabel);
     		yaml_view.setOnAction(o->{//设置鼠标点击事件,发送信息
    
     			//textArea.setText(generatedData);
                textArea.setPrefHeight(370);

                // Create text area
                textArea.setText(generatedData);
                
                // Create text flow for highlighting
                textFlow = new TextFlow();
                textFlow.getChildren().addAll(createHighlightedText(generatedData));
                
                scrollPane = new ScrollPane();
                scrollPane.setContent(textFlow);
                
                textFlow.setOnMouseClicked((MouseEvent event) -> {
                    if (event.getClickCount() == 2) {
                        Text text = (Text) event.getTarget();
                        text.setFill(Color.RED);
                        text.setStyle("-fx-font-weight: bold;");
                    }
                });
                
                leftTable.setPrefWidth(235);
                textFlow.setPrefWidth(600);
                textFlow.setPadding(new Insets(10,0,0,20));
                // 设置段落的样式
                hbox.getChildren().clear();
                hbox.getChildren().addAll(leftTable,scrollPane);
                statusLabel.setText("                                           "
					+ "                       Current State：Yaml View");
				statusLabel.setPrefHeight(100);
            });
     		
     		table_view.setOnAction(o->{//设置鼠标点击事件,发送信息
                hbox.getChildren().clear();
                hbox.getChildren().addAll(leftTable,rightTable);
                statusLabel.setText("                                           "
						+ "                      Current State：Table View");
            });
     		
     		
     		
     		Evaluation_editButton = new Button("Automatic \r\n"
     				+ "Evaluation");
     		Evaluation_editButton.setPrefWidth(130);
     		
     		Evaluation_editButton.setOnAction(o->{//设置鼠标点击事件,发送信息
     		 	
     			statusLabel.setText("                                           "
						+ "                      Current State：Evaluation View");
	 			Stage primaryStage_editButton = new Stage();
	 			
	 		   
	 		   Evaluation_result_textArea.setText("Please click on the Evaluation button on the right.\r\n"
	 		   		+ textArea_returnData);
	 		   
	 			Button quit_edit = new Button("Quit");
	 			Button re_generate = new Button("Regenerate");
	 			Button evaluation_button = new Button("Evaluation");
	 			
	 			evaluation_button.setMinWidth(85);
	 			evaluation_button.setMinHeight(30);
	 			quit_edit.setMinHeight(30);
	 			quit_edit.setMinWidth(85);
	 			re_generate.setMinHeight(30);
	 			re_generate.setMinWidth(85);
	 			quit_edit.setOnAction(e->{//设置鼠标点击事件,发送信息
	 				statusLabel.setText("                                           "
							+ "                      Current State：Evaluation View");
	 				primaryStage_editButton.fireEvent(
    	        			new javafx.stage.WindowEvent(primaryStage_editButton, javafx.stage.WindowEvent.WINDOW_CLOSE_REQUEST)
    	        	);
                });
	 			
	 			evaluation_button.setOnAction(e->{//设置鼠标点击事件,发送信息
	 				
	 				if(textArea_returnData !="") {
	 					
	 					showProgressIndicatorAndRequest();
		 		        
	 				}else {
	            		Alert alert = new Alert(Alert.AlertType.INFORMATION);
		                alert.setContentText("The data is empty, please generate it first!");
		                alert.show();
	 				}
                });
	 			
	 			re_generate.setOnAction(e->{//设置鼠标点击事件,发送信息
	            	
	            	if(textArea_returnData!="") 
	            	{
	            		if(Totalstr_Prompt!="") {
	            			System.out.println("start re_generate: ");
	            			showProgressIndicatorAndRequest_Regenerate();
	            			primaryStage_editButton.fireEvent(
	        	        			new javafx.stage.WindowEvent(primaryStage_editButton, javafx.stage.WindowEvent.WINDOW_CLOSE_REQUEST)
	        	        	);
	            		}else {
	            			Alert alert = new Alert(Alert.AlertType.INFORMATION);
			                alert.setContentText("The data is empty, please generate it first!");
			                alert.show();
	            		}
	            	}else {
	            		Alert alert = new Alert(Alert.AlertType.INFORMATION);
		                alert.setContentText("The data is empty, please generate it first!");
		                alert.show();
	            	}    
                });
	 			
	 			
	 		   Evaluation_result_textArea.setPrefWidth(410);
	 	       
	 	       VBox vButton = new VBox(evaluation_button,re_generate,quit_edit);
	 	       
	 	       vButton.setMargin(evaluation_button, new Insets(180,0,10,5));
	 	       vButton.setMargin(re_generate, new Insets(0,0,10,5));
	 	       vButton.setMargin(quit_edit, new Insets(0,0,0,5));
	 	       
	 	       HBox root_editButton = new HBox(Evaluation_result_textArea,vButton);
	 	       root_editButton.setMargin(Evaluation_result_textArea, new Insets(5,0,5,5));
//	 	       root_editButton.setMargin(re_generate, new Insets(150,0,0,5));
//	 	       root_editButton.setMargin(quit_edit, new Insets(271,0,0,5));
	 	       
	 	       
	 	       Scene scene_editButton = new Scene(root_editButton, 510, 300);
	 	       primaryStage_editButton.setScene(scene_editButton);
	 	       primaryStage_editButton.setTitle("                                 Evaluation View");
	 	       primaryStage_editButton.show();
	 	        
	 	        statusLabel.setText("                                           "
						+ "                       Current State：Evaluation View");
	 	       
        	});
     		
            BorderStroke borderStroke = new BorderStroke(
            		null, null,Color.GRAY,null,
            		null,null,BorderStrokeStyle.SOLID,null,
            		null,BorderWidths.DEFAULT,new Insets(0));
           
            
            
            
            VBox root = new VBox(5);
            root.getChildren().addAll(models_Label, choiceBox);
            root.setAlignment(Pos.BASELINE_CENTER);
            root.setPadding(new Insets(0,0,0,5));
            
            VBox vBox_submit = new VBox(15);//设置间距为10
            vBox_submit.getChildren().addAll(root, Generation);
            vBox_submit.setAlignment(Pos.CENTER);
            vBox_submit.setBorder(new Border(borderStroke));
    //        vBox_submit.setStyle("-fx-border-color: gray; -fx-border-width:0.5");
            vBox_submit.setPadding(new Insets(5,0,20,0));
            
            Label Label_view = new Label("View:");
            Label_view.setFont(new Font("Arial", 15));
            HBox root_view = new HBox();
            root_view.getChildren().addAll(Label_view);
            root_view.setPadding(new Insets(0,0,0,0));
            
            VBox vBox_view = new VBox(10);//设置间距为10
            vBox_view.getChildren().addAll(root_view,yaml_view,table_view);
            vBox_view.setAlignment(Pos.CENTER);
            vBox_view.setBorder(new Border(borderStroke));
            vBox_view.setPadding(new Insets(0,5,20,5));
            
            
            Label Label_evaluation = new Label("Evaluation:");
            Label_evaluation.setFont(new Font("Arial", 15));
            HBox root_evaluation = new HBox();
            root_evaluation.getChildren().addAll(Label_evaluation);
            root_evaluation.setPadding(new Insets(0,0,0,0));
            
            VBox vBox_evaluation = new VBox(10);//设置间距为10
            vBox_evaluation.getChildren().addAll(root_evaluation,Evaluation_editButton);
            vBox_evaluation.setAlignment(Pos.CENTER);
            vBox_evaluation.setBorder(new Border(borderStroke));
            vBox_evaluation.setPadding(new Insets(0,0,17,5));
            
            Region spacer = new Region();
            VBox.setVgrow(spacer, Priority.ALWAYS); // 让 spacer 占据剩余空间
            vBox.getChildren().addAll(vBox_submit, vBox_view,vBox_evaluation, load);
            vBox.setMargin(load, new Insets(-4,0,7,0));
            
            
            
            vBox.setAlignment(Pos.BASELINE_CENTER);
            vBox.setAlignment(Pos.CENTER);
            vBox.setStyle("-fx-border-color: green;-fx-border-width:1.5");
            
            menuBar = new MenuBar();//创建一个新菜单栏
            menuBar.prefWidthProperty().bind(primaryStage.widthProperty());//菜单与舞台宽度绑定
            Menu fileMenu = new Menu("File");
            MenuItem quit= new MenuItem("Load");
            
            quit.setOnAction((e) -> {
            		
            });
            
            load.setStyle("-fx-background-color: #BDBDBD;-fx-font-weight: bold");
            
            fileMenu.getItems().addAll(quit);
            Menu helpMenu = new Menu("Help");
            MenuItem about =new MenuItem("About");
            about.setOnAction(o->{
                ModalDialog imformation=new ModalDialog(primaryStage);//创建弹窗
            });
            helpMenu.getItems().addAll(about);
            Menu theme = new Menu("theme");
            MenuItem dark = new MenuItem("Dark");
            dark.setOnAction(o->{
    //            textArea.setStyle("-fx-background-color: gray;-fx-font-weight: bold;-fx-font-family: Consolas;");
                vBox.setStyle("-fx-background-color: gray; -fx-font-weight: bold");
                choiceBox.setStyle("-fx-background-color: white");
                yaml_view.setStyle("-fx-background-color: white");
                Evaluation_editButton.setStyle("-fx-background-color: white");
                table_view.setStyle("-fx-background-color: white");
                load.setStyle("-fx-background-color: blue");
            });
            theme.getItems().addAll(dark);
            
            menuBar.getMenus().addAll(fileMenu,helpMenu,theme);
     
            borderpane.setTop(menuBar);
    //        borderpane.setBottom(textField);
            borderpane.setCenter(vBox_status);
            borderpane.setRight(vBox);
            Scene scene=new Scene(borderpane, 800, 400);
            
            
            stagesss.setScene(scene);
            stagesss.initStyle(StageStyle.DECORATED);//设置窗口风格:白色背景，带有最小化/最大化/关闭等有操作系统平台装饰(默认设置)
            stagesss.show();
            stagesss.setTitle("                                                                               "
                    		+ "          Initial data generation");
    
        }
    
    	private static Text[] createHighlightedText(String yamlString) {
    	    String[] lines = yamlString.split("\n");
    	    List<Text> highlightedTextList = new ArrayList<>();
    	    for (int i = 0; i < lines.length; i++) {
    	        String line = lines[i];
    	        String[] parts = line.split(": ");
    	        if (parts.length > 1) {
    	            Text keyText = new Text(parts[0] + ": ");
    	            keyText.setStyle("-fx-fill: darkcyan;");
    	            highlightedTextList.add(keyText);
    	            Text valueText = new Text(parts[1] + "\n");
    	            valueText.setStyle("-fx-fill: #2F4F4F;");
    	            highlightedTextList.add(valueText);
    	        } else {
    	            Text text = new Text(line + "\n");//-fx-font-weight: bold;
    	            text.setStyle("-fx-fill: black;");
    	            highlightedTextList.add(text);
    	        }
    	    }
    	    return highlightedTextList.toArray(new Text[0]);
    	}
    
    	
    	
    	
    	private void updateStyles(TextArea textArea) {
            String content = textArea.getText();
            String[] lines = content.split("\n");
            StringBuilder styledText = new StringBuilder();

            for (String line : lines) {
                String[] parts = line.split(": ");
                if (parts.length > 1) {
                    // 高亮键
                    styledText.append("-fx-fill: darkcyan;").append(parts[0]).append(": ");
                    // 高亮值
                    styledText.append("-fx-fill: #2F4F4F;").append(parts[1]).append("\n");
                } else {
                    styledText.append("-fx-fill: black;").append(line).append("\n");
                }
            }
            // 目前TextArea不支持富文本显示， 你可以用自定义控件模拟富文本的效果
        }

    	
    	
//    	OpenAiSpeaker.openAiKey = ProxyPortArea_openAiKey.getText();    	
//    	OpenAiSpeaker op = new OpenAiSpeaker();
//    	if(textArea_returnData!="") {
//    		String return_evaluation = "";
//    		return_evaluation =  op.GPT4o_Evaluation_ReturnMessage(textArea_returnData); 	
//
//		      while( return_evaluation != "") {
//            	primaryStage123.close();
//            	stagesss.getScene().getRoot().setDisable(false);
//		      }
//            Evaluation_result_textArea.setText(return_evaluation);
//            
//    	}else {
//    		Alert alert = new Alert(Alert.AlertType.INFORMATION);
//            alert.setContentText("The data is empty, please generate it first!");
//            alert.show();
//    	}  
    	
    	
    	// 创建显示 ProgressIndicator 和请求接口的函数
        private void showProgressIndicatorAndRequest() {
            // 创建一个 ProgressIndicator，并设置其进度为 -1（无限循环）
            ProgressIndicator progressIndicator = new ProgressIndicator();
            progressIndicator.setProgress(-1);  // 无限进度动画

            // 创建一个 StackPane，并将 ProgressIndicator 放在其中
            StackPane stackPane = new StackPane(progressIndicator);
            stackPane.setPrefWidth(120);
            stackPane.setAlignment(Pos.CENTER);  // 设置 ProgressIndicator 居中

            // 创建标签，提示用户等待
            Label generationLabel = new Label("It takes some time to evaluate, please wait a moment...");
            generationLabel.setPrefHeight(20);
            generationLabel.setPrefWidth(400);
            generationLabel.setPadding(new Insets(20, 0, 0, 0));
            generationLabel.setAlignment(Pos.CENTER);

            // 将 ProgressIndicator 和标签添加到 VBox 中
            VBox sceneVBox = new VBox(10);  // 10px 的间距
            sceneVBox.getChildren().addAll(stackPane, generationLabel);
            sceneVBox.setPadding(new Insets(15, 0, 0, 0));
            sceneVBox.setAlignment(Pos.CENTER);  // 设置 VBox 中心对齐

            // 创建新的场景并显示到新窗口中
            Scene scene = new Scene(sceneVBox, 400, 280);
            Stage progressStage = new Stage();
            progressStage.setTitle("Evaluation");
            progressStage.setScene(scene);
            progressStage.show();

            // 创建后台任务来模拟请求接口并获取响应
            Task<Void> task = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    // 模拟接口请求的耗时操作 (例如：等待 4 秒)
                	
                	if(textArea_returnData!="") {
                		String return_evaluation = "";
                    	OpenAiSpeaker op = new OpenAiSpeaker();
                		return_evaluation =  op.GPT4o_Evaluation_ReturnMessage(textArea_returnData);
                		Evaluation_result_textArea.setText(return_evaluation);
                	}else {
                		Alert alert = new Alert(Alert.AlertType.INFORMATION);
                        alert.setContentText("The data is empty, please generate it first!");
                        alert.show();
                	}  
                	
                    // 接口请求成功时返回
                    return null;
                }

                @Override
                protected void succeeded() {
                    // 当任务成功时，取消进度条动画并关闭窗口
                    progressStage.close();  // 关闭进度条窗口
                }

                @Override
                protected void failed() {
                    // 如果任务失败，也可以处理取消进度条的逻辑
                    progressStage.close();  // 关闭进度条窗口
                    System.out.println("Request failed.");
                }
            };

            // 在后台线程中启动任务
            new Thread(task).start();
        }
        
        
    	// 创建显示 ProgressIndicator 和请求接口的函数
        private void showProgressIndicatorAndRequest_Regenerate() {
            // 创建一个 ProgressIndicator，并设置其进度为 -1（无限循环）
            ProgressIndicator progressIndicator = new ProgressIndicator();
            progressIndicator.setProgress(-1);  // 无限进度动画

            // 创建一个 StackPane，并将 ProgressIndicator 放在其中
            StackPane stackPane = new StackPane(progressIndicator);
            stackPane.setPrefWidth(120);
            stackPane.setAlignment(Pos.CENTER);  // 设置 ProgressIndicator 居中

            // 创建标签，提示用户等待
            Label generationLabel = new Label("It takes some time to generate, please wait a moment...");
            generationLabel.setPrefHeight(20);
            generationLabel.setPrefWidth(400);
            generationLabel.setPadding(new Insets(20, 0, 0, 0));
            generationLabel.setAlignment(Pos.CENTER);

            // 将 ProgressIndicator 和标签添加到 VBox 中
            VBox sceneVBox = new VBox(10);  // 10px 的间距
            sceneVBox.getChildren().addAll(stackPane, generationLabel);
            sceneVBox.setPadding(new Insets(15, 0, 0, 0));
            sceneVBox.setAlignment(Pos.CENTER);  // 设置 VBox 中心对齐

            // 创建新的场景并显示到新窗口中
            Scene scene = new Scene(sceneVBox, 400, 280);
            Stage progressStage = new Stage();
            progressStage.setTitle("Regenerate");
            progressStage.setScene(scene);
            progressStage.show();

            // 创建后台任务来模拟请求接口并获取响应
            Task<Void> task = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    // 模拟接口请求的耗时操作 (例如：等待 4 秒)
                	
                	
                		String return_n = "";
                    	OpenAiSpeaker op = new OpenAiSpeaker();
                    	return_n =  op.GPT4o_Chat_ReturnMessage(Totalstr_Prompt); 	
	
                    	// 定义正则表达式模式，匹配可能的 YAML 数据块
						Pattern pattern = Pattern.compile(
							    "(?s)(?:```yaml|---)?\\s*(.*?)\\s*(?:```|---|$)", Pattern.CASE_INSENSITIVE);
							Matcher matcher = pattern.matcher(return_n);

							if (matcher.find()) {
							    String yamlData = matcher.group(1).trim();

							    // 使用正则表达式去除包裹在键名和简单值周围的引号，包括单引号、双引号和三引号
							    return_n = yamlData.replaceAll("(['\"]{1,3})([^'\"]*?)\\1", "$2");
						
				            System.out.println("提取的 YAML 数据（已去除包裹的引号）：");
				        } else {
				            System.out.println("未找到 YAML 数据。");
				        }
							
						try {
			 				int str_int_number = 0;
			 				int  countstr = 0;
			 				ObservableList<EntityNumber> allEntities = SettingTable.getItems();
			 				for (EntityNumber entity : allEntities) {
			 					Totalstr_Prompt = Totalstr_Prompt  + entity.getName() + ": " + entity.getNumber() + ", "+entity.getName()+"note:(" + entity.getCharacter()+ "), ";
			 					
			 				}
			 				System.out.println("Totalstr_Prompt: "+Totalstr_Prompt);
							HashMap<String, Integer> returnEntityNumber_Totalstr =  ReturnEntityNumber(Totalstr_Prompt);
							textArea_returnData = EntityManager.YamlFilter(return_n, returnEntityNumber_Totalstr , 1,"");
							
							System.out.println("最终返回: \r\n "+textArea_returnData);		
						} catch (JsonProcessingException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
							
						Platform.runLater(() -> {
							
							try {
								
								OutFileString(textArea_returnData.toString(),"D:/test_chat.yaml");
								generatedData = textArea_returnData;
	    						
								File file = new File("D:/test_chat.yaml");
								Allmapper = EntityManager.loadFile(file,2);
								
					        	Set<String> keys = Allmapper.keySet();
					        	ObservableList<String> dataAllString = FXCollections.observableArrayList(keys);
					        	leftTable.setItems(FXCollections.observableArrayList(dataAllString));
					        	
					        	rightTable.refresh();
					        	statusLabel.setText("                                           "
					        		+ "        Current State：Generation is complete!");
					        	

					        	
							} catch (IOException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
						});

                    // 接口请求成功时返回
                    return null;
                }

                @Override
                protected void succeeded() {
                    // 当任务成功时，取消进度条动画并关闭窗口
                    progressStage.close();  // 关闭进度条窗口
                }

                @Override
                protected void failed() {
                    // 如果任务失败，也可以处理取消进度条的逻辑
                    progressStage.close();  // 关闭进度条窗口
                    System.out.println("Request failed.");
                }
            };

            // 在后台线程中启动任务
            new Thread(task).start();
        }
    	
    	
    	public static String file2String(final File file) throws IOException {
    	    if (file.exists()) {
    	        byte[] data = new byte[(int) file.length()];
    	        boolean result;
    	        FileInputStream inputStream = null;
    	        try {
    	            inputStream = new FileInputStream(file);
    	            int len = inputStream.read(data);
    	            result = len == data.length;
    	        } finally {
    	            if (inputStream != null) {
    	                inputStream.close();
    	            }
    	        }
    	        if (result) {
    	            return new String(data);
    	        }
    	    }
    	    return null;
    	}
    	
		    
	    class ModalDialog{
	        Button Quit;
	        public ModalDialog(final  Stage Dialog){
	            Quit=new Button("Quit");
	            Label label = new Label("");
	            
	            label.setWrapText(true);//控制自动换行
	            VBox vBox = new VBox(10);
	            vBox.getChildren().addAll(label,Quit);
	            vBox.setAlignment(Pos.CENTER);//使vBox居中
	            final Stage stage = new Stage();
	 
	            stage.initOwner(Dialog);//指定所属的父窗口
	            stage.setTitle("About");
	            stage.initModality(Modality.APPLICATION_MODAL);//指定窗口的状态:就是在关掉这个窗口之前无法操作主程序
	            Quit.setOnAction(o->stage.close());
	 
	            Scene scene = new Scene(vBox);
	            stage.setScene(scene);
	            stage.setWidth(400);
	            stage.setHeight(300);
	            stage.show();
	        }
	 
	    }
	    public static void main(String[]args)
	    {
	    	launch(args);
	    }
	    protected class EntityNumber {
	    	    	/* all primary attributes */
	    	    	private String Name;
	    	    	
	    	    	/* all references */
	    	    	private int Number; 
	    	    	private String Character; 
	    	    	/* all get and set functions */
	    	    	public String getName() {
	    	    		return Name;
	    	    	}	
	    	    	
	    	    	public void setName(String name) {
	    	    		this.Name = name;
	    	    	}
	    
	    	    	public String getCharacter() {
	    	    		return Character;
	    	    	}	
	    	    	
	    	    	public void setCharacter(String character) {
	    	    		this.Character = character;
	    	    	}
	    
	    	    	/* all functions for reference*/
	    	    	public int getNumber() {
	    	    		return Number;
	    	    	}	
	    	    	
	    	    	public void setNumber(int number) {
	    	    		this.Number = number;
	    	    	}	
	    	    	
	    	    	
	    	    }
	    	    
	    	    public static class Data {
	    	    	        private final int quantity;
	    	    	        private final String time;
	    	    
	    	    	        public Data(int quantity, String time) {
	    	    	            this.quantity = quantity;
	    	    	            this.time = time;
	    	    	        }
	    	    
	    	    	        public int getQuantity() {
	    	    	            return quantity;
	    	    	        }
	    	    
	    	    	        public String getTime() {
	    	    	            return time;
	    	    	        }
	    	    	    }
	    	    
    	    public static HashMap<String, Integer> ReturnEntityNumber(String entityNumber_String)
    	    {
    	    	HashMap<String, Integer> entities_Number_int = new HashMap<>();
    	        Pattern pattern = Pattern.compile("(\\w+):\\s*(\\d+)");
    	        Matcher matcher = pattern.matcher(entityNumber_String);
    
    	        while (matcher.find()) {
    	            String entity = matcher.group(1);
    	            int value = Integer.parseInt(matcher.group(2));
    	            entities_Number_int.put(entity, value);
    	        }
    	        
    	        return entities_Number_int;
    	    }
   
	    
	}

		'''
	}
		 

	def String setOpenAiSpeaker(Iterable<Entity> sEntity, Iterable<Entity> ssEntity,Iterable<Contract> sContract) 
		{
			'''	
package gui;

import com.theokanning.openai.OpenAiService;
import com.theokanning.openai.completion.CompletionRequest;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatCompletionResult;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.theokanning.openai.completion.chat.ChatMessageRole;

import cn.hutool.core.util.ObjectUtil;
import cn.hutool.json.JSONUtil;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.time.Duration;

import java.util.ArrayList;
import java.util.List;

import org.yaml.snakeyaml.Yaml;

	public class OpenAiSpeaker {
					
		public static String openAiKey= "";
		public static String PropertyKey= "0";
//		protected OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(60));
			
			
		public static void main(String ...args){
		    	
		}
	     	
	    static String entitySetting = ""
	   		«FOR entity : ssEntity»
			+ "«entity.name»: ("
	«««							("«FOR attribute : entity.attributes»+ "«attribute.name»(«attribute.type.compileType»), "«ENDFOR»+ ");"
		   	«FOR attribute : entity.attributes»
		   		«IF attribute.type.compileType != "int" 
		   			&& attribute.type.compileType != "boolean" 
		   			&& attribute.type.compileType != "float"
		   			&& attribute.type.compileType != "LocalDate"
		   			&& attribute.type.compileType != "String"»
		   	+ "«attribute.name»(«FOR element : attribute.type.getElement» «element.name», «ENDFOR»), "
				«ELSE»
			+ "«attribute.name»(«attribute.type.compileType»), "
				«ENDIF»
	    	«ENDFOR»
	    	
«««	    	«IF entity.reference.length != 0»
«««	    		«FOR one_reference : entity.reference»
«««	    			«IF one_reference.ismultiple == true»
«««	    			+ "«one_reference.name»(List<«one_reference.entity.name»>(links between entities)), "
«««					«ELSEIF one_reference.isIsReverseAssoication == true»
«««					+ "«one_reference.name»(«one_reference.entity.name»), "
«««					«ENDIF»
«««	    		«ENDFOR»
«««	    	«ENDIF»
	    	
	   	 + ");"«ENDFOR»;
	     	
public static String Chat_ReturnMessage(String str){
	    	
	    		if(!PropertyKey.equals("0")) {
		    		System.setProperty("http.proxyHost", "127.0.0.1");
			        System.setProperty("http.proxyPort", PropertyKey);
			        System.setProperty("https.proxyHost", "127.0.0.1");
			        System.setProperty("https.proxyPort", PropertyKey);
		    	}
		        
		        OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));
		        List<ChatMessage> chatMessages=new ArrayList<>();
		        chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),
		        		"You are a helpful assistant."
		        ));
		        ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()
		                .model("gpt-3.5-turbo")
		                .messages(chatMessages)
		                .frequencyPenalty(0D)
		                .presencePenalty(0D)
		                .temperature(0D)
		                .topP(0D)
		                .maxTokens(3000)
		                .build();
		       
	   		 
		        String input2 = "Generate entity examples of the system based on these entity information, "
	   		 + "Try to generate reasonable and realistic data, "
	   		 + "please generate the number of entity instances according to the given values: "
	   		 + str
	   		 + "you only need to generate the ones in the square brackets, "
	   		 + "and you don't need to generate the ones not listed, "
	   		 + "and the attribute fields of the entity are initial capitalized, "
	   		 + "And the generated value of the attribute field cannot be outside the type range of the attribute field: "
 	   		 + "int: The maximum length cannot exceed 8 digits; and 0 cannot be used as the beginning;"
 	   		 + "boolean:true and false; "
 	   		 + "float: The maximum length cannot exceed 8 digits; "
 	   		 + "LocalDate: 0001-01-01 to 9999-12-31. \r\n"	   		 
 	   		 + "and the entity is returned in the format of a yaml file, "
	   		 + "and please note that the entity information in the generated data is unique and cannot be repeated. \r\n"
	   		 + "Below is all the entity information given, please generate according to the number of entities above, "
	   		 + "no need to generate more than the others. "
	   		 + entitySetting
	   		 + "The yaml data is in this format: \r\n"
	   		 + "Item: \r\n"
	   		 + "- Barcode: 123455690\r\n"
	   		 + "  Name: Backpack\r\n"
	   		 + "  Price: 49.99\r\n"
	   		 + "  StockNumber: 20\r\n"
	   		 + "  OrderPrice: 39.99\r\n"
	   		 + "- Barcode: 127895489\r\n"
	   		 + "  Name: apple\r\n"
	   		 + "  Price: 49.99\r\n"
	   		 + "  StockNumber: 20\r\n"
	   		 + "  OrderPrice: 39.99\r\n"
	   		 + "the following cases cannot occur:\r\n"
	   		 + "1. Data with the same name cannot appear;\r\n"
	   		 + "2. Data with the same ID cannot appear;\r\n"
	   		 + "3. Entity's name with letters can not appear, for example \"Item 1\", \"Store 2\", \" Supplier 3\" and so on;\r\n"
	   		 + "4. Entity's name with numbers can not appear, for example \"Item A\", \"Store B\", \" Supplier C\" and so on;\r\n"
	   		 + "5. Double quotes can not appear.\r\n"
	   		 ;
		        
		        
	   		 
	   		 
	   		 
		     System.out.println("Chat_ReturnMessage: "+input2);
	   		 
	        chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input2));
	        chatCompletionRequest.setMessages(chatMessages);
	        ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);
	        
	        String generatedData = chatCompletionResult.getChoices().get(0).getMessage().getContent();
	        
	        
	        System.out.println(generatedData);
	
	        return generatedData;
    				    		
	}//OutFile
	
	    
	    
	    public static String Large_Chat_ReturnMessage(String str3, int intStr3){
	    	
		    		if(!PropertyKey.equals("0")) {
			    		System.setProperty("http.proxyHost", "127.0.0.1");
				        System.setProperty("http.proxyPort", PropertyKey);
				        System.setProperty("https.proxyHost", "127.0.0.1");
				        System.setProperty("https.proxyPort", PropertyKey);
			    	}
			        
			        OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));
			        List<ChatMessage> chatMessages=new ArrayList<>();
			        
			        //""
			        String SYSTEM_input = "You are a helpful assistant. "
			        		;
			        chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),
			        		SYSTEM_input
			        ));
	        
			        ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()
			                .model("gpt-3.5-turbo")
			                .messages(chatMessages)
			                .frequencyPenalty(0D)
			                .presencePenalty(0D)
			                .temperature(1D)
			                .topP(1D)
			                .maxTokens(3000)
			                .build();
			        double a=0; double b=0;
   			       if(intStr3 >=200) {
   			    	   a = (intStr3*2) / 40; //取整
   			    	   b = (intStr3*2) % 40; //取余
   			       }else if(intStr3 <200 && intStr3 >= 120) {
   			    	   a = (intStr3*1.5) / 40; //取整
   			    	   b = (intStr3*1.5) % 40; //取余
   			       }
   			       else if(intStr3 <120 && intStr3 >= 80) {
   			    	   a = (intStr3*1.2) / 40; //取整
   			    	   b = (intStr3*1.2) % 40; //取余
   			       }
   			       else {
   			    	   a = intStr3/ 40; //取整
   			    	   b = intStr3 % 40; //取余
   			       }
			       String DataString = str3+":\r\n"+ "";
			       
			       System.out.println("a and b："+ a +" "+ b);
			       if(a != 0) 
			       {
			    	   String input_1 = "You are a professional data generator, "
				  				+ "and you must generate the required quantity according to the requirements:"
				  				+ "Generate 40 entity examples of the system based on these entity information. "
				  				+ "Try to generate reasonable and realistic data: "
				         		+ "First, The generated value of the attribute field cannot be outside the type range of the attribute field: "
				         		+ "int: The maximum length cannot exceed 8 digits, and 0 cannot be used as the beginning; "
				         		+ "boolean:true and false; "
				         		+ "float: The maximum length cannot exceed 8 digits; "
				         		+ "LocalDate: 0001-01-01 to 9999-12-31. \r\n"
				         		+ "Second, The attribute fields of the entity are initial capitalized. \r\n"
				         		+ "Third, The preceding entity name is not required, the entity name must be omited.\r\n"
				         		+ "Fourth, The entity data  is directly  returned in the format of a yaml file, and the template of the generated data as follows (Please omit the entity  name) : "
				         		+ "- Xxx: xxxxx\r\n"
				  		        + "  Xxx: xxx\r\n"
				  		        + "  Xxx:  xxx xx\r\n"
				  		        + "- Xxx: xxxxxx\r\n"
				  		        + "  Xxx: xxx\r\n"
				  		        + "  Xxx:  xxx xx\r\n"
								 + "And fifth, the following cases cannot occur:\r\n"
								 + "1. Data with the same name cannot appear;\r\n"
								 + "2. Data with the same ID cannot appear;\r\n"
								 + "3. Entity's name with letters can not appear, for example \"Item 1\", \"Store 2\", \" Supplier 3\" and so on;\r\n"
								 + "4. Entity's name with numbers can not appear, for example \"Item A\", \"Store B\", \" Supplier C\" and so on;\r\n"
								 + "5. Double quotes can not appear.\r\n"
						   		 
								+ "The following is to give all the entity information, "
				  		        + "please do not generate all of them, please follow my request: "
				  		        + "1. select "+ str3+ "entity information from these entity information to generate, just generate the "+str3+" example. "
				  		        + "2. The number is 40 samples, the 40 of the entity quantity cannot be more or less and cannot be omitted:\r\n"
				  		        + entitySetting;
				   	   chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input_1));
				   	   for(int i= 1; i<=a; i++) {
				   		   	   System.out.println(i +": ...");
					           chatCompletionRequest.setMessages(chatMessages);
					           ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);
					           String generatedData1 = chatCompletionResult.getChoices().get(0).getMessage().getContent();
					           int count = countChar(generatedData1);
   					           System.out.println("success：" + i*40+", check_count: "+ count+" yaml");
   					           try {
   						           Yaml yaml = new Yaml();
   						           List<String> yamlList = new ArrayList<>();
   							       Iterable<Object> object;
   							       object = yaml.loadAll(generatedData1);
   							       	object.forEach(y -> {
   							       		
   							       	        if (ObjectUtil.isNotNull(y)) {
   							       	            yamlList.add(JSONUtil.toJsonStr(y));
   							       	        }
   							       	   
   							       	});
   						       	DataString = DataString +"\r\n" + generatedData1 +"\r\n";
   					           } catch (Exception e) {
   					       	        // 处理异常
   					       	        e.printStackTrace();
   					       	        continue;
   					       	    }
   					       	    
   					       	    
				       }
			       }
			       
			   	if(b !=0) 
			   	{
			   		String input_2 = "You are a professional data generator, "
							+ "and you must generate the required quantity according to the requirements:"
							+ "Generate "+ b+ " entity examples of the system based on these entity information. "
			     		+ "Try to generate reasonable and realistic data: "
		         		+ "First, The generated value of the attribute field cannot be outside the type range of the attribute field: "
			         		+ "int: The maximum length cannot exceed 8 digits, and 0 cannot be used as the beginning; "
			         		+ "boolean:true and false; "
			         		+ "float: The maximum length cannot exceed 8 digits; "
			         		+ "LocalDate: 0001-01-01 to 9999-12-31. \r\n"
		         		+ "Second, The attribute fields of the entity are initial capitalized. \r\n"
		         		+ "Third, The preceding entity name is not required, the entity name must be omited.\r\n"
		         		+ "Fourth, The entity data  is directly  returned in the format of a yaml file, and the template of the generated data as follows (Please omit the entity  name) : "
					        + "- Xxx: xxxxx\r\n"
					        + "  Xxx: xxx\r\n"
					        + "  Xxx:  xxx xx\r\n"
					        + "- Xxx: xxxxxx\r\n"
					        + "  Xxx: xxx\r\n"
					        + "  Xxx:  xxx xx\r\n"
						+ "And fifth, the following cases cannot occur:\r\n"
						+ "1. Data with the same name cannot appear;\r\n"
						+ "2. Data with the same ID cannot appear;\r\n"
						+ "3. Entity's name with letters can not appear, for example \"Item 1\", \"Store 2\", \" Supplier 3\" and so on;\r\n"
						+ "4. Entity's name with numbers can not appear, for example \"Item A\", \"Store B\", \" Supplier C\" and so on;\r\n"
						+ "5. Double quotes can not appear.\r\n"
						
						+ "The following is to give all the entity information, "
					        + "please do not generate all of them, please follow my request: "
					        + "1. select "+ str3 + "entity information from these entity information to generate, just generate the "+str3+" example. "
					        + "2. The number is "+ b + " samples, the "+ b + " of the entity quantity cannot be more or less and cannot be omitted:\r\n"
					        + entitySetting;
				System.out.println("Last generation: "+b+" ...\r\n");
			   	chatMessages.remove(chatMessages.size()-1);
			   	chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input_2));
			   	chatCompletionRequest.setMessages(chatMessages);
	            ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);
	            String generatedData_input_2 = chatCompletionResult.getChoices().get(0).getMessage().getContent();
	            try {
			           Yaml yaml = new Yaml();
			           List<String> yamlList = new ArrayList<>();
				       Iterable<Object> object;
				       object = yaml.loadAll(generatedData_input_2);
				       	object.forEach(y -> {
				       		
				       	        if (ObjectUtil.isNotNull(y)) {
				       	            yamlList.add(JSONUtil.toJsonStr(y));
				       	        }
				       	   
				       	});
					System.out.println("Last"+b+": \r\n" + generatedData_input_2);
				    int count = countChar(generatedData_input_2);
					System.out.println("Last generation check count:"+ count+" yaml");
			       	DataString = DataString +"\r\n" + generatedData_input_2 +"\r\n";
		           } catch (Exception e) {
		       	        // 处理异常
		       	        e.printStackTrace();
		       	        System.out.println("错误数据："+generatedData_input_2);
		       	        System.out.println("this time is exception, skip, generate：" + (intStr3-b));
		       	        
		       	        return DataString;  
		       	    }
	            
					System.out.println("All generation：" + intStr3);
	            
			   	}
	       	    return DataString;  		
	}//OutFile
		
		public static String GPT4o_Chat_ReturnMessage(String str){
			    	
		    		if(!PropertyKey.equals("0")) {
			    		System.setProperty("http.proxyHost", "127.0.0.1");
				        System.setProperty("http.proxyPort", PropertyKey);
				        System.setProperty("https.proxyHost", "127.0.0.1");
				        System.setProperty("https.proxyPort", PropertyKey);
			    	}
			        
			        OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));
			        List<ChatMessage> chatMessages=new ArrayList<>();
			        chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),
			        		"You are a helpful assistant."
			        ));
			        ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()
			                .model("gpt-4o")
			                .messages(chatMessages)
			                .frequencyPenalty(0D)
			                .presencePenalty(0D)
			                .temperature(0D)
			                .topP(0D)
			                .maxTokens(10000)
			                .build();
			       
		   		 
			        String input2 = "Generate entity examples of the system based on these entity information, "
		   		 + "Try to generate reasonable and realistic data, "
		   		 + "please generate the number of entity instances according to the given values: "
		   		 + str
		   		 + "you only need to generate the ones in the square brackets, "
		   		 + "and you don't need to generate the ones not listed, "
		   		 + "and the attribute fields of the entity are initial capitalized, "
		   		 + "and the format “ ```Entity Data``` ” is not allowed, only the entity data needs to be returned. \r\n"
		   		 + "And the generated value of the attribute field cannot be outside the type range of the attribute field: "
			   		 + "int: The maximum length cannot exceed 8 digits; and 0 cannot be used as the beginning;"
			   		 + "boolean:true and false; "
			   		 + "float: The maximum length cannot exceed 8 digits; "
			   		 + "LocalDate: 0001-01-01 to 9999-12-31. \r\n"	   		 
			   		 + "and the entity is returned in the format of a yaml file, "
		   		 + "and please note that the entity information in the generated data is unique and cannot be repeated. \r\n"
		   		 + "Below is all the entity information given, please generate according to the number of entities above, "
		   		 + "no need to generate more than the others. "
		   		 + entitySetting
		   		 + "The yaml data is in this format: \r\n"
		   		 + "Item: \r\n"
		   		 + "- Barcode: 123455690\r\n"
		   		 + "  Name: Backpack\r\n"
		   		 + "  Price: 49.99\r\n"
		   		 + "  StockNumber: 20\r\n"
		   		 + "  OrderPrice: 39.99\r\n"
		   		 + "- Barcode: 127895489\r\n"
		   		 + "  Name: apple\r\n"
		   		 + "  Price: 49.99\r\n"
		   		 + "  StockNumber: 20\r\n"
		   		 + "  OrderPrice: 39.99\r\n"
					+ "And fifth, the following cases cannot occur:\r\n"
					+ "1. Data with the same name cannot appear;\r\n"
					+ "2. Data with the same ID cannot appear;\r\n"
					+ "3. Entity's name with letters can not appear, for example \"Item 1\", \"Store 2\", \" Supplier 3\" and so on;\r\n"
					+ "4. Entity's name with numbers can not appear, for example \"Item A\", \"Store B\", \" Supplier C\" and so on;\r\n"
					+ "5. Double quotes can not appear.\r\n"
		   		 ;
			        
			        
		   		 
		   		 
		   		 
			     System.out.println("GPT-4o Prompt: "+input2);
		   		 
		        chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input2));
		        chatCompletionRequest.setMessages(chatMessages);
		        ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);
		        
		        String generatedData = chatCompletionResult.getChoices().get(0).getMessage().getContent();
		        
		        
		        System.out.println(generatedData);
		
		        return generatedData;
						    		
		}//OutFile
		
	    public static String GPT4_Chat_ReturnMessage(String str){
	    	
    		if(!PropertyKey.equals("0")) {
	    		System.setProperty("http.proxyHost", "127.0.0.1");
		        System.setProperty("http.proxyPort", PropertyKey);
		        System.setProperty("https.proxyHost", "127.0.0.1");
		        System.setProperty("https.proxyPort", PropertyKey);
	    	}
	        
	        OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));
	        List<ChatMessage> chatMessages=new ArrayList<>();
	        chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),
	        		"You are a helpful assistant."
	        ));
	        ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()
	                .model("gpt-4")
	                .messages(chatMessages)
	                .frequencyPenalty(0D)
	                .presencePenalty(0D)
	                .temperature(0D)
	                .topP(0D)
	                .maxTokens(5000)
	                .build();
	       
   		 
	        String input2 = "Generate entity examples of the system based on these entity information, "
   		 + "Try to generate reasonable and realistic data, "
   		 + "please generate the number of entity instances according to the given values: "
   		 + str
   		 + "you only need to generate the ones in the square brackets, "
   		 + "and you don't need to generate the ones not listed, "
   		 + "and the attribute fields of the entity are initial capitalized, "
   		 + "and the format “ ```Entity Data``` ” is not allowed, only the entity data needs to be returned. \r\n"
   		 + "And the generated value of the attribute field cannot be outside the type range of the attribute field: "
	   		 + "int: The maximum length cannot exceed 8 digits; and 0 cannot be used as the beginning;"
	   		 + "boolean:true and false; "
	   		 + "float: The maximum length cannot exceed 8 digits; "
	   		 + "LocalDate: 0001-01-01 to 9999-12-31. \r\n"	   		 
	   		 + "and the entity is returned in the format of a yaml file, "
   		 + "and please note that the entity information in the generated data is unique and cannot be repeated. \r\n"
   		 + "Below is all the entity information given, please generate according to the number of entities above, "
   		 + "no need to generate more than the others. "
   		 + entitySetting
   		 + "The yaml data is in this format: \r\n"
   		 + "Item: \r\n"
   		 + "- Barcode: 123455690\r\n"
   		 + "  Name: Backpack\r\n"
   		 + "  Price: 49.99\r\n"
   		 + "  StockNumber: 20\r\n"
   		 + "  OrderPrice: 39.99\r\n"
   		 + "- Barcode: 127895489\r\n"
   		 + "  Name: apple\r\n"
   		 + "  Price: 49.99\r\n"
   		 + "  StockNumber: 20\r\n"
   		 + "  OrderPrice: 39.99\r\n"
			+ "And fifth, the following cases cannot occur:\r\n"
			+ "1. Data with the same name cannot appear;\r\n"
			+ "2. Data with the same ID cannot appear;\r\n"
			+ "3. Entity's name with letters can not appear, for example \"Item 1\", \"Store 2\", \" Supplier 3\" and so on;\r\n"
			+ "4. Entity's name with numbers can not appear, for example \"Item A\", \"Store B\", \" Supplier C\" and so on;\r\n"
			+ "5. Double quotes can not appear.\r\n"
   		 ;
	        
	        
   		 
   		 
   		 
	     System.out.println("GPT-4 prompt: "+input2);
   		 
        chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input2));
        chatCompletionRequest.setMessages(chatMessages);
        ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);
        
        String generatedData = chatCompletionResult.getChoices().get(0).getMessage().getContent();
        
        
        System.out.println(generatedData);

        return generatedData;
				    		
}//OutFile


		    public static String GPT4o_Evaluation_ReturnMessage(String str){
		    	
		    		if(!PropertyKey.equals("0")) {
			    		System.setProperty("http.proxyHost", "127.0.0.1");
				        System.setProperty("http.proxyPort", PropertyKey);
				        System.setProperty("https.proxyHost", "127.0.0.1");
				        System.setProperty("https.proxyPort", PropertyKey);
			    	}
			        
			        OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));
			        List<ChatMessage> chatMessages=new ArrayList<>();
			        chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),
			        		"You are a helpful assistant."
			        ));
			        ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()
			                .model("gpt-4o")
			                .messages(chatMessages)
			                .frequencyPenalty(0D)
			                .presencePenalty(0D)
			                .temperature(0D)
			                .topP(0D)
			                .maxTokens(10000)
			                .build();
			       
		   		 
			        String input2 = "Using my proposed evaluation dimensions and metrics to assess these data.\r\n"
			        		+ "evaluation Steps:\r\n"
			        		+ "Step 1: Score each of the evaluation indicators using the following evaluation rules.\r\n"
			        		+ "The evaluation rule is a 5-point scale, using the \"Number of Entities Covered\" as an example.\r\n"
			        		+ "5 points: The data cover all entities and there are enough of each.\r\n"
			        		+ "4 points: The data covers most entities, but the number of entities is sufficient.\r\n"
			        		+ "3 points: The data covers most of the entities, but there are some omissions in the number of entities generated.\r\n"
			        		+ "2 points: The data covers a basic range of entities and there are omissions in the number of entities generated.\r\n"
			        		+ "1 point: The data covers very few entities and the number of entities generated is small.\r\n"
			        		+ "0 points: The data does not cover any entities or the data is not available at all.\r\n"
			        		+ "From high to low, a score of 5 indicates that the data fully meets the requirements of the evaluation indicators, a score of 1 indicates that the data rarely meets the requirements of the evaluation indicators, and a score of 0 indicates that the data does not meet the requirements of the evaluation indicators at all and is not available.\r\n"
			        		+ "\r\n"
			        		+ "Step 2: Multiply the score of each evaluation indicator with its corresponding weight.\r\n"
			        		+ "\r\n"
			        		+ "Step 3: Calculate the total score by adding up the scores of all evaluation indicators.\r\n"
			        		+ "\r\n"
			        		+ "\r\n"
			        		+ "The following evaluation dimensions and evaluation indicators are generated for the evaluation data: Evaluation Dimensions, Weights, Evaluation Indicators, Indicator Meanings\r\n"
			        		+ "\r\n"
			        		+ "\r\n"
			        		+ "Quality Completeness 15% Number of Entities Coverage 10% Check whether the number of various entities (e.g., items, categories, suppliers, shoppers, etc.) in the generated data is sufficient and covers all possible scenarios.\r\n"
			        		+ "			Missing Entity Attributes 5% Are all the necessary attributes of each entity populated (e.g., item name, price, quantity in stock, etc.), are there any missing values in the data, and the percentage of missing values.\r\n"
			        		+ "	Accuracy\r\n"
			        		+ "Accuracy 27% Outlier Rate 7% For numeric data (e.g. price, weight), check for illogical outliers.\r\n"
			        		+ "			Truthfulness 20%\r\n"
			        		+ "Reasonableness Check if the data is realistic enough to simulate a real scenario.\r\n"
			        		+ "	Consistency\r\n"
			        		+ "Consistency 10% Entity Consistency 6% Consistency in the representation of the same entity in different places (e.g., different tables or different systems).\r\n"
			        		+ "			Format Consistency 2% Consistency in the formatting of dates and times.\r\n"
			        		+ "			Units Consistency 2% Whether currency, units, size, etc. are standardized.\r\n"
			        		+ "	Relevance\r\n"
			        		+ "Relevance 10% Relationship accuracy rate\r\n"
			        		+ "	Check that relationships between different entities are correct (e.g., merchandise to supplier).\r\n"
			        		+ "	Diversity\r\n"
			        		+ "Diversity 10% Diversity rate Checks that the data is diverse to ensure that the prototype can handle a variety of scenarios (e.g., various merchandise categories, different suppliers, etc.).\r\n"
			        		+ "	Scalability\r\n"
			        		+ "Scalability 8% Scale Size 5% Whether the size of the dataset is sufficient to simulate a real-world scenario.\r\n"
			        		+ "			Duplication 3% Whether there are a lot of duplicates or non-essential data.\r\n"
			        		+ "	Expandability\r\n"
			        		+ "Expandability 5% Expansion rate Check whether the data structure is easy to add or modify in the future.\r\n"
			        		+ "	Usability\r\n"
			        		+ "Usability 5% Queryability Rate Whether the data is easy to query, read, and understand.\r\n"
			        		+ "	Timeliness\r\n"
			        		+ "Timeliness 5% Freshness Rate How close the last update date of the data is to the current date.\r\n"
			        		+ "	Security\r\n"
			        		+ "Security 5% Leakage rate Whether there is leakage of sensitive information, such as private customer information. Whether data is properly encrypted or desensitized.\r\n"
			        		+ "\r\n"
			        		+ "The data to be evaluated is:\r\n"
			        		+ str
			        		+ "\r\n"
			        		+ "";
	
			    System.out.println("GPT-4o Evaluation Prompt: "+input2);
		   		 
		        chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input2));
		        chatCompletionRequest.setMessages(chatMessages);
		        ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);
		        
		        String generatedData = chatCompletionResult.getChoices().get(0).getMessage().getContent();
		        
		        
		        System.out.println(generatedData);
		
		        return generatedData;
						    		
		    }//OutFile
		    
	public static String GPT4o_Large_Chat_ReturnMessage(String str3, int intStr3){
		
		if(!PropertyKey.equals("0")) {
			System.setProperty("http.proxyHost", "127.0.0.1");
	        System.setProperty("http.proxyPort", PropertyKey);
	        System.setProperty("https.proxyHost", "127.0.0.1");
	        System.setProperty("https.proxyPort", PropertyKey);
		}
	    
	    OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));
	    List<ChatMessage> chatMessages=new ArrayList<>();
	    
	    //""
	    String SYSTEM_input = "You are a helpful assistant. "
	    		;
	    chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),
	    		SYSTEM_input
	    ));
	
	    ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()
	            .model("gpt-4o")
	            .messages(chatMessages)
	            .frequencyPenalty(0D)
	            .presencePenalty(0D)
	            .temperature(1D)
	            .topP(1D)
	            .maxTokens(10000)
	            .build();
	    double a=0; double b=0;
	       if(intStr3 >=200) {
	    	   a = (intStr3*2) / 40; //取整
	    	   b = (intStr3*2) % 40; //取余
	       }else if(intStr3 <200 && intStr3 >= 120) {
	    	   a = (intStr3*1.5) / 40; //取整
	    	   b = (intStr3*1.5) % 40; //取余
	       }
	       else if(intStr3 <120 && intStr3 >= 80) {
	    	   a = (intStr3*1.2) / 40; //取整
	    	   b = (intStr3*1.2) % 40; //取余
	       }
	       else {
	    	   a = intStr3/ 40; //取整
	    	   b = intStr3 % 40; //取余
	       }
	   String DataString = str3+":\r\n"+ "";
	   
	   System.out.println("a and b："+ a +" "+ b);
	   if(a != 0) 
	   {
		   String input_1 = "You are a professional data generator, "
	  				+ "and you must generate the required quantity according to the requirements:"
	  				+ "Generate 40 entity examples of the system based on these entity information, "
	//  				+ "the format “ ```yaml Entity Data``` ” is not allowed, only the entity data needs to be returned, "
	//  				+ "for example: "
	//  				+ "- Xxx: xxxxx\r\n"
	//  		        + "  Xxx: xxx\r\n"
	//  		        + "  Xxx:  xxx xx\r\n"
	//  		        + "- Xxx: xxxxxx\r\n"
	//  		        + "  Xxx: xxx\r\n"
	//  		        + "  Xxx:  xxx xx.\r\n"
	  				+ "Try to generate reasonable and realistic data: "
	         		+ "First, the generated value of the attribute field cannot be outside the type range of the attribute field: "
	         		+ "int: the maximum length cannot exceed 8 digits, and 0 cannot be used as the beginning; "
	         		+ "boolean:true and false; "
	         		+ "float: the maximum length cannot exceed 8 digits; "
	         		+ "LocalDate: 0001-01-01 to 9999-12-31. \r\n"
	         		+ "Second, the attribute fields of the entity are initial capitalized. \r\n"
	         		+ "Third, the preceding entity name is not required, the entity name must be omited.\r\n"
					+ "Fourth, the following cases cannot occur:\r\n"
						+ "1. Data with the same name cannot appear;\r\n"
						+ "2. Data with the same ID cannot appear;\r\n"
						+ "3. Entity's name with letters can not appear, for example \"Item 1\", \"Store 2\", \" Supplier 3\" and so on;\r\n"
						+ "4. Entity's name with numbers can not appear, for example \"Item A\", \"Store B\", \" Supplier C\" and so on;\r\n"
						+ "5. Double quotes can not appear.\r\n"
						+ "6. The return format starts with \"```yaml\"."
					 + "Fifth, the entity data is directly  returned in the format of a yaml file, and the template of the generated data as follows (Please omit the entity  name and any other words) : "
	         		+ "- Xxx: xxxxx\r\n"
	  		        + "  Xxx: xxx\r\n"
	  		        + "  Xxx:  xxx xx\r\n"
	  		        + "- Xxx: xxxxxx\r\n"
	  		        + "  Xxx: xxx\r\n"
	  		        + "  Xxx:  xxx xx.\r\n"
			   		 
					+ "The following is to give all the entity information, "
	  		        + "please do not generate all of them, please follow my request: "
	  		        + "1. select "+ str3+ "entity information from these entity information to generate, just generate the "+str3+" example. "
	  		        + "2. The number is 40 samples, the 40 of the entity quantity cannot be more or less and cannot be omitted:\r\n"
	  		        + entitySetting;
		   System.out.println("GPT-4o Large Prompt"+input_1);
	   	   chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input_1));
	   	   for(int i= 1; i<=a; i++) {
	   		   	   System.out.println(i +": ...");
		           chatCompletionRequest.setMessages(chatMessages);
		           ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);
		           String generatedData1 = chatCompletionResult.getChoices().get(0).getMessage().getContent();
		           int count = countChar(generatedData1);
			           System.out.println("success：" + i*40+", check_count: "+ count+" yaml");
			           
			           
			           if(generatedData1.startsWith("-")) {
			        	   try {
					           Yaml yaml = new Yaml();
					           List<String> yamlList = new ArrayList<>();
						       Iterable<Object> object;
						       object = yaml.loadAll(generatedData1);
						       	object.forEach(y -> {
						       		
						       	        if (ObjectUtil.isNotNull(y)) {
						       	            yamlList.add(JSONUtil.toJsonStr(y));
						       	        }
						       	   
						       	});
					       	DataString = DataString +"\r\n" + generatedData1 +"\r\n";
				           } catch (Exception e) {
				       	        // 处理异常
				       	        e.printStackTrace();
				       	        continue;
				       	    }
			           }else {
			        	   int startReturn = generatedData1.indexOf("-");
			        	   String substring = generatedData1.substring(startReturn);
			        	   try {
					           Yaml yaml = new Yaml();
					           List<String> yamlList = new ArrayList<>();
						       Iterable<Object> object;
						       object = yaml.loadAll(substring);
						       	object.forEach(y -> {
						       		
						       	        if (ObjectUtil.isNotNull(y)) {
						       	            yamlList.add(JSONUtil.toJsonStr(y));
						       	        }
						       	   
						       	});
					       	DataString = DataString +"\r\n" + substring +"\r\n";
				           } catch (Exception e) {
				       	        // 处理异常
				       	        e.printStackTrace();
				       	        continue;
				       	    }
			        	   
			           }
			           
			           
	
	       }
	   }
	   
		if(b !=0) 
		{
			String input_2 = "You are a professional data generator, "
				+ "and you must generate the required quantity according to the requirements:"
				+ "Generate "+ b+ " entity examples of the system based on these entity information. "
				+ "the format “ ```Entity Data``` ” is not allowed, only the entity data needs to be returned."
	 		+ "Try to generate reasonable and realistic data: "
	 		+ "First, The generated value of the attribute field cannot be outside the type range of the attribute field: "
	     		+ "int: The maximum length cannot exceed 8 digits, and 0 cannot be used as the beginning; "
	     		+ "boolean:true and false; "
	     		+ "float: The maximum length cannot exceed 8 digits; "
	     		+ "LocalDate: 0001-01-01 to 9999-12-31. \r\n"
	 		+ "Second, The attribute fields of the entity are initial capitalized. \r\n"
	 		+ "Third, The preceding entity name is not required, the entity name must be omited.\r\n"
			+ "Fourth, the following cases cannot occur:\r\n"
			+ "1. Data with the same name cannot appear;\r\n"
			+ "2. Data with the same ID cannot appear;\r\n"
			+ "3. Entity's name with letters can not appear, for example \"Item 1\", \"Store 2\", \" Supplier 3\" and so on;\r\n"
			+ "4. Entity's name with numbers can not appear, for example \"Item A\", \"Store B\", \" Supplier C\" and so on;\r\n"
			+ "5. Double quotes can not appear.\r\n"
			+ "6. The return format starts with \"```yaml\"."
		 + "Fifth, the entity data is directly  returned in the format of a yaml file, and the template of the generated data as follows (Please omit the entity  name and any other words) : "
	 		+ "- Xxx: xxxxx\r\n"
		        + "  Xxx: xxx\r\n"
		        + "  Xxx:  xxx xx\r\n"
		        + "- Xxx: xxxxxx\r\n"
		        + "  Xxx: xxx\r\n"
		        + "  Xxx:  xxx xx.\r\n"
				
			+ "The following is to give all the entity information, "
		        + "please do not generate all of them, please follow my request: "
		        + "1. select "+ str3 + "entity information from these entity information to generate, just generate the "+str3+" example. "
		        + "2. The number is "+ b + " samples, the "+ b + " of the entity quantity cannot be more or less and cannot be omitted:\r\n"
		        + entitySetting;
	System.out.println("Last generation: "+b+" ...\r\n");
		chatMessages.remove(chatMessages.size()-1);
		chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input_2));
		chatCompletionRequest.setMessages(chatMessages);
	ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);
	String generatedData_input_2 = chatCompletionResult.getChoices().get(0).getMessage().getContent();
	
	try {
		
	       if(generatedData_input_2.startsWith("-")) {
	    	   
	    	   Yaml yaml = new Yaml();
	           List<String> yamlList = new ArrayList<>();
		       Iterable<Object> object;
		       object = yaml.loadAll(generatedData_input_2);
		       	object.forEach(y -> {
		       		
		       	        if (ObjectUtil.isNotNull(y)) {
		       	            yamlList.add(JSONUtil.toJsonStr(y));
		       	        }
		       	   
		       	});
			System.out.println("Last"+b+": \r\n" + generatedData_input_2);
		    int count = countChar(generatedData_input_2);
			System.out.println("Last generation check count:"+ count+" yaml");
	       	DataString = DataString +"\r\n" + generatedData_input_2 +"\r\n";
	       	
	       }else {
	    	   int startReturn = generatedData_input_2.indexOf("-");
	    	   String substring = generatedData_input_2.substring(startReturn);
	    	   
	    	   Yaml yaml = new Yaml();
	           List<String> yamlList = new ArrayList<>();
		       Iterable<Object> object;
		       object = yaml.loadAll(substring);
		       	object.forEach(y -> {
		       		
		       	        if (ObjectUtil.isNotNull(y)) {
		       	            yamlList.add(JSONUtil.toJsonStr(y));
		       	        }
		       	   
		       	});
				System.out.println("Last"+b+": \r\n" + substring);
			    int count = countChar(substring);
				System.out.println("Last generation check count:"+ count+" yaml");
		       	DataString = DataString +"\r\n" + substring +"\r\n";
	    	   
	       }
	       
	
	      
	   } catch (Exception e) {
		        // 处理异常
		        e.printStackTrace();
		        System.out.println("错误数据："+generatedData_input_2);
		        System.out.println("this time is exception, skip, generate：" + (intStr3-b));
		        
		        return DataString;  
		    }
	
		System.out.println("All generation：" + intStr3);
	
		}
	   return DataString;  		
	}//OutFile
	





	    
	    public static String GPT4_Large_Chat_ReturnMessage(String str3, int intStr3){
	    	
    		if(!PropertyKey.equals("0")) {
	    		System.setProperty("http.proxyHost", "127.0.0.1");
		        System.setProperty("http.proxyPort", PropertyKey);
		        System.setProperty("https.proxyHost", "127.0.0.1");
		        System.setProperty("https.proxyPort", PropertyKey);
	    	}
	        
	        OpenAiService service=new OpenAiService(OpenAiSpeaker.openAiKey, Duration.ofSeconds(300));
	        List<ChatMessage> chatMessages=new ArrayList<>();
	        
	        //""
	        String SYSTEM_input = "You are a helpful assistant. "
	        		;
	        chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(),
	        		SYSTEM_input
	        ));
    
	        ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()
	                .model("gpt-4")
	                .messages(chatMessages)
	                .frequencyPenalty(0D)
	                .presencePenalty(0D)
	                .temperature(1D)
	                .topP(1D)
	                .maxTokens(5000)
	                .build();
	        double a=0; double b=0;
		       if(intStr3 >=200) {
		    	   a = (intStr3*2) / 40; //取整
		    	   b = (intStr3*2) % 40; //取余
		       }else if(intStr3 <200 && intStr3 >= 120) {
		    	   a = (intStr3*1.5) / 40; //取整
		    	   b = (intStr3*1.5) % 40; //取余
		       }
		       else if(intStr3 <120 && intStr3 >= 80) {
		    	   a = (intStr3*1.2) / 40; //取整
		    	   b = (intStr3*1.2) % 40; //取余
		       }
		       else {
		    	   a = intStr3/ 40; //取整
		    	   b = intStr3 % 40; //取余
		       }
	       String DataString = str3+":\r\n"+ "";
	       
	       System.out.println("a and b："+ a +" "+ b);
	       if(a != 0) 
	       {
	    	   String input_1 = "You are a professional data generator, "
		  				+ "and you must generate the required quantity according to the requirements:"
		  				+ "Generate 40 entity examples of the system based on these entity information, "
//		  				+ "the format “ ```yaml Entity Data``` ” is not allowed, only the entity data needs to be returned, "
//		  				+ "for example: "
//		  				+ "- Xxx: xxxxx\r\n"
//		  		        + "  Xxx: xxx\r\n"
//		  		        + "  Xxx:  xxx xx\r\n"
//		  		        + "- Xxx: xxxxxx\r\n"
//		  		        + "  Xxx: xxx\r\n"
//		  		        + "  Xxx:  xxx xx.\r\n"
		  				+ "Try to generate reasonable and realistic data: "
		         		+ "First, the generated value of the attribute field cannot be outside the type range of the attribute field: "
		         		+ "int: the maximum length cannot exceed 8 digits, and 0 cannot be used as the beginning; "
		         		+ "boolean:true and false; "
		         		+ "float: the maximum length cannot exceed 8 digits; "
		         		+ "LocalDate: 0001-01-01 to 9999-12-31. \r\n"
		         		+ "Second, the attribute fields of the entity are initial capitalized. \r\n"
		         		+ "Third, the preceding entity name is not required, the entity name must be omited.\r\n"
						+ "Fourth, the following cases cannot occur:\r\n"
							+ "1. Data with the same name cannot appear;\r\n"
							+ "2. Data with the same ID cannot appear;\r\n"
							+ "3. Entity's name with letters can not appear, for example \"Item 1\", \"Store 2\", \" Supplier 3\" and so on;\r\n"
							+ "4. Entity's name with numbers can not appear, for example \"Item A\", \"Store B\", \" Supplier C\" and so on;\r\n"
							+ "5. Double quotes can not appear.\r\n"
							+ "6. The return format starts with \"```yaml\"."
						 + "Fifth, the entity data is directly  returned in the format of a yaml file, and the template of the generated data as follows (Please omit the entity  name and any other words) : "
		         		+ "- Xxx: xxxxx\r\n"
		  		        + "  Xxx: xxx\r\n"
		  		        + "  Xxx:  xxx xx\r\n"
		  		        + "- Xxx: xxxxxx\r\n"
		  		        + "  Xxx: xxx\r\n"
		  		        + "  Xxx:  xxx xx.\r\n"
				   		 
						+ "The following is to give all the entity information, "
		  		        + "please do not generate all of them, please follow my request: "
		  		        + "1. select "+ str3+ "entity information from these entity information to generate, just generate the "+str3+" example. "
		  		        + "2. The number is 40 samples, the 40 of the entity quantity cannot be more or less and cannot be omitted:\r\n"
		  		        + entitySetting;
	    	   System.out.println("GPT-4 Large Prompt: "+input_1);
		   	   chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input_1));
		   	   for(int i= 1; i<=a; i++) {
		   		   	   System.out.println(i +": ...");
			           chatCompletionRequest.setMessages(chatMessages);
			           ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);
			           String generatedData1 = chatCompletionResult.getChoices().get(0).getMessage().getContent();
			           int count = countChar(generatedData1);
				           System.out.println("success：" + i*40+", check_count: "+ count+" yaml");
				           
				           
				           if(generatedData1.startsWith("-")) {
				        	   try {
						           Yaml yaml = new Yaml();
						           List<String> yamlList = new ArrayList<>();
							       Iterable<Object> object;
							       object = yaml.loadAll(generatedData1);
							       	object.forEach(y -> {
							       		
							       	        if (ObjectUtil.isNotNull(y)) {
							       	            yamlList.add(JSONUtil.toJsonStr(y));
							       	        }
							       	   
							       	});
						       	DataString = DataString +"\r\n" + generatedData1 +"\r\n";
					           } catch (Exception e) {
					       	        // 处理异常
					       	        e.printStackTrace();
					       	        continue;
					       	    }
				           }else {
				        	   int startReturn = generatedData1.indexOf("-");
				        	   String substring = generatedData1.substring(startReturn);
				        	   try {
						           Yaml yaml = new Yaml();
						           List<String> yamlList = new ArrayList<>();
							       Iterable<Object> object;
							       object = yaml.loadAll(substring);
							       	object.forEach(y -> {
							       		
							       	        if (ObjectUtil.isNotNull(y)) {
							       	            yamlList.add(JSONUtil.toJsonStr(y));
							       	        }
							       	   
							       	});
						       	DataString = DataString +"\r\n" + substring +"\r\n";
					           } catch (Exception e) {
					       	        // 处理异常
					       	        e.printStackTrace();
					       	        continue;
					       	    }
				        	   
				           }
				           
				           

		       }
	       }
	       
	   	if(b !=0) 
	   	{
	   		String input_2 = "You are a professional data generator, "
					+ "and you must generate the required quantity according to the requirements:"
					+ "Generate "+ b+ " entity examples of the system based on these entity information. "
					+ "the format “ ```Entity Data``` ” is not allowed, only the entity data needs to be returned."
	     		+ "Try to generate reasonable and realistic data: "
         		+ "First, The generated value of the attribute field cannot be outside the type range of the attribute field: "
	         		+ "int: The maximum length cannot exceed 8 digits, and 0 cannot be used as the beginning; "
	         		+ "boolean:true and false; "
	         		+ "float: The maximum length cannot exceed 8 digits; "
	         		+ "LocalDate: 0001-01-01 to 9999-12-31. \r\n"
         		+ "Second, The attribute fields of the entity are initial capitalized. \r\n"
         		+ "Third, The preceding entity name is not required, the entity name must be omited.\r\n"
				+ "Fourth, the following cases cannot occur:\r\n"
				+ "1. Data with the same name cannot appear;\r\n"
				+ "2. Data with the same ID cannot appear;\r\n"
				+ "3. Entity's name with letters can not appear, for example \"Item 1\", \"Store 2\", \" Supplier 3\" and so on;\r\n"
				+ "4. Entity's name with numbers can not appear, for example \"Item A\", \"Store B\", \" Supplier C\" and so on;\r\n"
				+ "5. Double quotes can not appear.\r\n"
				+ "6. The return format starts with \"```yaml\"."
			 + "Fifth, the entity data is directly  returned in the format of a yaml file, and the template of the generated data as follows (Please omit the entity  name and any other words) : "
	     		+ "- Xxx: xxxxx\r\n"
			        + "  Xxx: xxx\r\n"
			        + "  Xxx:  xxx xx\r\n"
			        + "- Xxx: xxxxxx\r\n"
			        + "  Xxx: xxx\r\n"
			        + "  Xxx:  xxx xx.\r\n"
					
				+ "The following is to give all the entity information, "
			        + "please do not generate all of them, please follow my request: "
			        + "1. select "+ str3 + "entity information from these entity information to generate, just generate the "+str3+" example. "
			        + "2. The number is "+ b + " samples, the "+ b + " of the entity quantity cannot be more or less and cannot be omitted:\r\n"
			        + entitySetting;
		System.out.println("Last generation: "+b+" ...\r\n");
	   	chatMessages.remove(chatMessages.size()-1);
	   	chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), input_2));
	   	chatCompletionRequest.setMessages(chatMessages);
        ChatCompletionResult chatCompletionResult=service.createChatCompletion(chatCompletionRequest);
        String generatedData_input_2 = chatCompletionResult.getChoices().get(0).getMessage().getContent();

        try {
        	
	           if(generatedData_input_2.startsWith("-")) {
	        	   
	        	   Yaml yaml = new Yaml();
		           List<String> yamlList = new ArrayList<>();
			       Iterable<Object> object;
			       object = yaml.loadAll(generatedData_input_2);
			       	object.forEach(y -> {
			       		
			       	        if (ObjectUtil.isNotNull(y)) {
			       	            yamlList.add(JSONUtil.toJsonStr(y));
			       	        }
			       	   
			       	});
				System.out.println("Last"+b+": \r\n" + generatedData_input_2);
			    int count = countChar(generatedData_input_2);
				System.out.println("Last generation check count:"+ count+" yaml");
		       	DataString = DataString +"\r\n" + generatedData_input_2 +"\r\n";
		       	
	           }else {
	        	   int startReturn = generatedData_input_2.indexOf("-");
	        	   String substring = generatedData_input_2.substring(startReturn);
	        	   
	        	   Yaml yaml = new Yaml();
		           List<String> yamlList = new ArrayList<>();
			       Iterable<Object> object;
			       object = yaml.loadAll(substring);
			       	object.forEach(y -> {
			       		
			       	        if (ObjectUtil.isNotNull(y)) {
			       	            yamlList.add(JSONUtil.toJsonStr(y));
			       	        }
			       	   
			       	});
					System.out.println("Last"+b+": \r\n" + substring);
				    int count = countChar(substring);
					System.out.println("Last generation check count:"+ count+" yaml");
			       	DataString = DataString +"\r\n" + substring +"\r\n";
	        	   
	           }
	           

	          
           } catch (Exception e) {
       	        // 处理异常
       	        e.printStackTrace();
       	        System.out.println("错误数据："+generatedData_input_2);
       	        System.out.println("this time is exception, skip, generate：" + (intStr3-b));
       	        
       	        return DataString;  
       	    }
        
			System.out.println("All generation：" + intStr3);
        
	   	}
   	    return DataString;  		
}//OutFile
				
	    public static void OutFileString(String cu,String filePath) throws IOException {
	    			
	    			String a = cu.toString();
	    			OutputStream os = null;
	    			OutputStreamWriter ops = null;
	    			BufferedWriter bw = null;
	    			File f1 = new File(filePath);
	    			if(!f1.exists()) {
	    				f1.getParentFile().mkdirs();
	    			}
	    			try {
	    				os = new FileOutputStream(f1);
	    				ops = new OutputStreamWriter(os);
	    				bw = new BufferedWriter(ops);
	    				bw.write(a);
	    				bw.newLine();
	    				bw.flush();
	    			}
	    			catch(FileNotFoundException e){
	    				e.printStackTrace();
	    			}
	    			catch(IOException e) {
	    				
	    				e.printStackTrace();
	    			}
	    			
	    			System.out.println(" Modify successfulString!!!");
	    		
	    		}//OutFile
	
	    public static int countChar(String str) {
	        int count = 0;
	        char c = '-';
	        for (int i = 0; i < str.length(); i++) {
	            if (str.charAt(i) == c) {
	            	if (str.charAt(i + 1) == ' ') {
	                    count++;
	                }
	            }
	        }
	        return count;
	    }
	}


			'''
		}





	def String setYamlFilter(Iterable<Entity> sEntity, Iterable<Entity> ssEntity,Iterable<Contract> sContract) 
	{
		'''
		
		public static String YamlFilter(String str, HashMap<String, Integer> numberentities, int return_Code, String returnString) throws JsonMappingException, JsonProcessingException
		{
			Yaml yaml = new Yaml();
			String yamlData =str;
			int count = countChar(yamlData);
«««			System.out.println("检测有： "+ count+" 个yaml文件");
			System.out.println("check： "+ count+"  yaml");    
			List<String> yamlList = new ArrayList<>();
			Iterable<Object> object;
			object = yaml.loadAll(yamlData);
			object.forEach(y -> {
			    if (ObjectUtil.isNotNull(y)) {
			        yamlList.add(JSONUtil.toJsonStr(y));
			    }
			});
			JSONObject rootObject = new JSONObject(yamlList.get(0).toString());

		«FOR entity : sEntity»
			
		    String «entity.name»_filtereddata = "«entity.name»:\r\n" +"";
			
    	   if (rootObject.has("«entity.name»") )
    	   {
    	   	JSONArray dataArray«entity.name» = rootObject.getJSONArray("«entity.name»");
    	   	// 筛选出不重复的 Barcode 和 Name

    	   	«entity.name» iii«entity.name» = new «entity.name»();
    	   	
    	   	«IF !entity.attributes.nullOrEmpty»
    	   		«IF entity.attributes.size >= 2»
    	   		Set<String> «entity.name»_«entity.attributes.get(0).name»Set = new HashSet<String>();
    	   		Set<String> «entity.name»_«entity.attributes.get(1).name»Set = new HashSet<String>();
    	   		«ELSE»
    	   		Set<String> «entity.name»_«entity.attributes.get(0).name»Set = new HashSet<String>();
    	   		«ENDIF»
    	   	«ENDIF»

	           for(int i = 0; i < dataArray«entity.name».length(); i++) 
	           {
	           	try {
	           		JSONObject sonObject«entity.name» = dataArray«entity.name».getJSONObject(i);
	        	   
	   	    	   	«IF !entity.attributes.nullOrEmpty»
	   	    	   		«IF entity.attributes.size >= 2»
	   	    	   	    String «entity.name»_«entity.attributes.get(0).name»Str = String.valueOf(sonObject«entity.name».get("«entity.attributes.get(0).name»"));
	   	    	   		String «entity.name»_«entity.attributes.get(1).name»Str = String.valueOf(sonObject«entity.name».get("«entity.attributes.get(1).name»"));
	   	    	   		«ELSE»
	   	    	   		String «entity.name»_«entity.attributes.get(0).name»Str = String.valueOf(sonObject«entity.name».get("«entity.attributes.get(0).name»"));
	   	    	   		«ENDIF»
	   	    	   	«ENDIF»
				   	
				   					   	
				   	«IF !entity.attributes.nullOrEmpty»
				   		
				   		«IF entity.attributes.size >= 2»
							if (!«entity.name»_«entity.attributes.get(0).name»Set.contains(«entity.name»_«entity.attributes.get(0).name»Str.toLowerCase()) 
								 ) 
«««								 && !«entity.name»_«entity.attributes.get(1).name»Set.contains(«entity.name»_«entity.attributes.get(1).name»Str.toLowerCase())
					   		{
«««		 					   	«IF entity.reference.length != 0»
«««		 					   						   								   					
«««									«FOR one_reference : entity.reference»
«««										
«««								if (rootObject.has("«one_reference.entity.name»") )
«««								 {
«««								 		String json«one_reference.name»;
«««								 		
«««								 		if(sonObject«entity.name».has("«one_reference.name»")) 
«««								 		{
«««								 			json«one_reference.name» = String.valueOf(sonObject«entity.name».get("«one_reference.name»"));
««««««								 			System.out.println(json«one_reference.name»);
«««								 			
«««								 			List<«one_reference.entity.name»> list«one_reference.entity.name» = «one_reference.entity.name»JsonUtils.getJsonList(json«one_reference.name»);
«««											for(int n = 0; n<list«one_reference.entity.name».size() ;n++ ) 
«««											{
«««												// 处理异常
«««												try {
«««												«IF one_reference.ismultiple == true»
«««												iii«entity.name».add«one_reference.name»(list«one_reference.entity.name».get(n)); ///
«««												«ELSEIF one_reference.isIsReverseAssoication == true»
«««												iii«entity.name».set«one_reference.name»(list«one_reference.entity.name».get(n)); ///
«««												«ENDIF»
«««												}catch (JSONException e) {
«««		  	        						          e.printStackTrace();
«««		  	        						          continue;
«««		  	        						    }
«««		  	        						 }
«««								 			
«««								 		}
«««
«««								 }
«««									«ENDFOR»
«««								«ENDIF»	
								
					   			«FOR attribute : entity.attributes»
   				                	«IF attribute.type.compileType == "int"»
   										try {
   											iii«entity.name».set«attribute.name»(Integer.valueOf( String.valueOf(sonObject«entity.name».get("«attribute.name»")) ));
   									    } catch (NumberFormatException e) {
   									        System.out.println("当前输入的字符串超过类型限制，随机生成填入！");
   									        Random rand = new Random();
   									        int minDigits = 2; // 最小位数
   									        int maxDigits = 8; // 最大位数
   									        int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数
   									        int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字
   									        iii«entity.name».set«attribute.name»(Integer.valueOf(randomNumber ));
   									        e.printStackTrace();
   									    }catch (JSONException e) {
   									        System.out.println("JSONObject [«attribute.name»]没找到，出现异常，随机生成填入！");
   									        Random rand = new Random();
   									        int minDigits = 2; // 最小位数
   									        int maxDigits = 8; // 最大位数
   									        int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数
   									        int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字
   									        iii«entity.name».set«attribute.name»(Integer.valueOf(randomNumber ));
   									        e.printStackTrace();
   									    }
   									    catch (Exception e) {
   									        System.out.println("出现未知异常，随机生成填入！");
   									        Random rand = new Random();
   									        int minDigits = 2; // 最小位数
   									        int maxDigits = 8; // 最大位数
   									        int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数
   									        int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字
   									        iii«entity.name».set«attribute.name»(Integer.valueOf(randomNumber ));
   									        e.printStackTrace();
   									    }
   									«ELSEIF attribute.type.compileType == "boolean"»
«««   										iii«entity.name».set«attribute.name»(Boolean.parseBoolean(sonObject«entity.name».get("«attribute.name»").toString() ));
		   									try {
		   									       iii«entity.name».set«attribute.name»(Boolean.parseBoolean(sonObject«entity.name».get("«attribute.name»").toString() ));
		   									    } catch (Exception e) {
		   									        // handle the exception
		   									        System.out.println("发生了未知错误，随机生成填入！");
		   									        iii«entity.name».set«attribute.name»(Boolean.parseBoolean("false" ));
		   									        e.printStackTrace();
		   									        
		   									    }
   									«ELSEIF attribute.type.compileType == "float"»   										
	   										try {
	   											iii«entity.name».set«attribute.name»(Float.parseFloat(sonObject«entity.name».get("«attribute.name»").toString()));
	   										} catch (ArithmeticException e) {
	   										    System.out.println("yaml不能为0，随机生成填入！");
	   										    System.out.println("错误消息：" + e.getMessage());
	   										    e.printStackTrace();
	   										    Random rand = new Random();
	   										    float randomFloat = rand.nextFloat();
	   										    iii«entity.name».set«attribute.name»(randomFloat);
	   										    
	   										} catch (NumberFormatException e) {
	   										    System.out.println("yaml数字格式不正确，随机生成填入！");
	   										    System.out.println("错误消息：" + e.getMessage());
	   										    e.printStackTrace();
	   										    Random rand = new Random();
	   										    float randomFloat = rand.nextFloat();
	   										    iii«entity.name».set«attribute.name»(randomFloat);
	   										    
	   										} catch (Exception e) {
	   										    System.out.println("发生了未知异常，随机生成填入！");
	   										    System.out.println("错误消息：" + e.getMessage());
	   										    e.printStackTrace();
	   										    Random rand = new Random();
	   										    float randomFloat = rand.nextFloat();
	   										    iii«entity.name».set«attribute.name»(randomFloat);
	   										}
   									«ELSEIF attribute.type.compileType == "LocalDate"»
   			«««								DateTimeFormatter.ofPattern(DatePattern.NORM_DATE_PATTERN));
   										String inputDate«attribute.name» = sonObject«entity.name».get("«attribute.name»").toString();
   										try {
   										    Instant instant = Instant.ofEpochMilli(Long.parseLong(inputDate«attribute.name»));
   										    LocalDate localDate«entity.name» = instant.atZone(ZoneId.systemDefault()).toLocalDate();
   										    iii«entity.name».set«attribute.name»(localDate«entity.name»);
   										} catch (DateTimeParseException e) {
   											System.out.println("发生了DateTimeParseException异常，随机生成填入！");
   										    long startEpochDay«entity.name» = LocalDate.of(2020, 1, 1).toEpochDay();
	   								        long endEpochDay«entity.name» = LocalDate.of(2030, 1, 1).toEpochDay();
	   								        long randomDay«entity.name» = ThreadLocalRandom.current().nextLong(startEpochDay«entity.name», endEpochDay«entity.name»);
   										    LocalDate randomDate«entity.name» = LocalDate.ofEpochDay(randomDay«entity.name»);
   										    iii«entity.name».set«attribute.name»(randomDate«entity.name»);
   										    System.out.println("错误消息：" + e.getMessage());
   										}catch (Exception e) {
   										    System.out.println("发生了未知异常，随机生成填入！");
   										    long startEpochDay«entity.name» = LocalDate.of(2020, 1, 1).toEpochDay();
	   								        long endEpochDay«entity.name» = LocalDate.of(2030, 1, 1).toEpochDay();
	   								        long randomDay«entity.name» = ThreadLocalRandom.current().nextLong(startEpochDay«entity.name», endEpochDay«entity.name»);

   										    LocalDate randomDate«entity.name» = LocalDate.ofEpochDay(randomDay«entity.name»);
   										    iii«entity.name».set«attribute.name»(randomDate«entity.name»);
   										    System.out.println("错误消息：" + e.getMessage());
   										    
   										}
   									«ELSEIF attribute.type.compileType == "String"»
   										iii«entity.name».set«attribute.name»(sonObject«entity.name».get("«attribute.name»").toString());
   									«ELSE»
   										iii«entity.name».set«attribute.name»(«attribute.type.compileType».«attribute.type.getOneElement.name»);
   									«ENDIF»
   				            	«ENDFOR»
   				            	
«««   				            	«entity.name»Instances.add(iii«entity.name»);
   				            	«entity.name»_filtereddata = «entity.name»_filtereddata +"\r\n" + «entity.name»ToString(iii«entity.name»);
   				            	
   				            	«entity.name»_«entity.attributes.get(0).name»Set.add(«entity.name»_«entity.attributes.get(0).name»Str.toLowerCase());
   				            	«entity.name»_«entity.attributes.get(1).name»Set.add(«entity.name»_«entity.attributes.get(1).name»Str.toLowerCase());
						
						«ELSE»  	
							if (!«entity.name»_«entity.attributes.get(0).name»Set.contains(«entity.name»_«entity.attributes.get(0).name»Str.toLowerCase()) ) 
					   		{
					   			«IF entity.attributes.get(0).type.compileType == "int"»
«««									iii«entity.name».set«entity.attributes.get(0).name»(Integer.valueOf( String.valueOf(sonObject«entity.name».get("«entity.attributes.get(0).name»")) ));
									try {
										iii«entity.name».set«entity.attributes.get(0).name»(Integer.valueOf( String.valueOf(sonObject«entity.name».get("«entity.attributes.get(0).name»")) ));
								    } catch (NumberFormatException e) {
								        System.out.println("当前输入的字符串超过类型限制，随机生成填入！");
								        Random rand = new Random();
								        int minDigits = 2; // 最小位数
								        int maxDigits = 8; // 最大位数
								        int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数
								        int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字
								        iii«entity.name».set«entity.attributes.get(0).name»(Integer.valueOf(randomNumber ));
								        e.printStackTrace();
								    }catch (JSONException e) {
								        System.out.println("JSONObject [«entity.attributes.get(0).name»]没找到，随机生成填入！");
								        Random rand = new Random();
								        int minDigits = 2; // 最小位数
								        int maxDigits = 8; // 最大位数
								        int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数
								        int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字
								        iii«entity.name».set«entity.attributes.get(0).name»(Integer.valueOf(randomNumber ));
								        e.printStackTrace();
								    }catch (Exception e) {
								        System.out.println("出现未知异常，随机生成填入！");
								        Random rand = new Random();
								        int minDigits = 2; // 最小位数
								        int maxDigits = 8; // 最大位数
								        int randomNumOfDigits = rand.nextInt(maxDigits - minDigits + 1) + minDigits; // 随机生成数字的位数
								        int randomNumber = rand.nextInt((int) Math.pow(10, randomNumOfDigits)); // 生成随机数字
								        iii«entity.name».set«entity.attributes.get(0).name»(Integer.valueOf(randomNumber ));
								        e.printStackTrace();
								    }
								«ELSEIF entity.attributes.get(0).type.compileType == "boolean"»
«««									iii«entity.name».set«entity.attributes.get(0).name»(Boolean.parseBoolean(sonObject«entity.name».get("«entity.attributes.get(0).name»").toString() ));
									try {
   									       iii«entity.name».set«entity.attributes.get(0).name»(Boolean.parseBoolean(sonObject«entity.name».get("«entity.attributes.get(0).name»").toString() ));
   									    } catch (Exception e) {
   									        // handle the exception
   									        System.out.println("发生了未知错误，随机生成填入！");
   									        iii«entity.name».set«entity.attributes.get(0).name»(Boolean.parseBoolean("false" ));
   									        e.printStackTrace();   									    
   									}
								
								«ELSEIF entity.attributes.get(0).type.compileType == "float"»
«««									iii«entity.name».set«entity.attributes.get(0).name»(Float.parseFloat(sonObject«entity.name».get("«entity.attributes.get(0).name»").toString()));
									try {
									   	iii«entity.name».set«entity.attributes.get(0).name»(Float.parseFloat(sonObject«entity.name».get("«entity.attributes.get(0).name»").toString()));
									} catch (ArithmeticException e) {
									    System.out.println("yaml不能为0，随机生成填入！");
									    System.out.println("错误消息：" + e.getMessage());
									    e.printStackTrace();
									    Random rand = new Random();
									    float randomFloat = rand.nextFloat();
									    iii«entity.name».set«entity.attributes.get(0).name»(randomFloat);
									    
									} catch (NumberFormatException e) {
									    System.out.println("yaml数字格式不正确，随机生成填入！");
									    System.out.println("错误消息：" + e.getMessage());
									    e.printStackTrace();
									    Random rand = new Random();
									    float randomFloat = rand.nextFloat();
									    iii«entity.name».set«entity.attributes.get(0).name»(randomFloat);
									    
									} catch (Exception e) {
									    System.out.println("发生了未知异常，随机生成填入！");
									    System.out.println("错误消息：" + e.getMessage());
									    e.printStackTrace();
									    Random rand = new Random();
									    float randomFloat = rand.nextFloat();
									    iii«entity.name».set«entity.attributes.get(0).name»(randomFloat);
									}
								«ELSEIF entity.attributes.get(0).type.compileType == "LocalDate"»
		«««								DateTimeFormatter.ofPattern(DatePattern.NORM_DATE_PATTERN));
									String inputDate«entity.attributes.get(0).name» = sonObject«entity.name».get("«entity.attributes.get(0).name»").toString();
									try {
									    Instant instant = Instant.ofEpochMilli(Long.parseLong(inputDate«entity.attributes.get(0).name»));
									    LocalDate localDate«entity.name» = instant.atZone(ZoneId.systemDefault()).toLocalDate();
									    iii«entity.name».set«entity.attributes.get(0).name»(localDate«entity.name»);
									} catch (DateTimeParseException e) {
									    System.out.println("发生了DateTimeParseException异常，随机生成填入！");
									    
									    long startEpochDay«entity.name» = LocalDate.of(2020, 1, 1).toEpochDay();
   								        long endEpochDay«entity.name» = LocalDate.of(2030, 1, 1).toEpochDay();
   								        long randomDay«entity.name» = ThreadLocalRandom.current().nextLong(startEpochDay«entity.name», endEpochDay«entity.name»);
									    LocalDate randomDate«entity.name» = LocalDate.ofEpochDay(randomDay«entity.name»);
									    iii«entity.name».set«entity.attributes.get(0).name»(randomDate«entity.name»);
									    System.out.println("错误消息：" + e.getMessage());
									}catch (Exception e) {
   										    System.out.println("发生了未知异常，随机生成填入！");
   										    long startEpochDay«entity.name» = LocalDate.of(2020, 1, 1).toEpochDay();
									        long endEpochDay«entity.name» = LocalDate.of(2030, 1, 1).toEpochDay();
									        long randomDay«entity.name» = ThreadLocalRandom.current().nextLong(startEpochDay«entity.name», endEpochDay«entity.name»);
										    LocalDate randomDate«entity.name» = LocalDate.ofEpochDay(randomDay«entity.name»);
										    iii«entity.name».set«entity.attributes.get(0).name»(randomDate«entity.name»);
										    System.out.println("错误消息：" + e.getMessage());
   									}
								«ELSEIF entity.attributes.get(0).type.compileType == "String"»
									iii«entity.name».set«entity.attributes.get(0).name»(sonObject«entity.name».get("«entity.attributes.get(0).name»").toString());
								«ELSE»
									iii«entity.name».set«entity.attributes.get(0).name»(«entity.attributes.get(0).type.compileType».«entity.attributes.get(0).type.getOneElement.name»);
								«ENDIF»
								
								
«««									iiiStore.addCashiers(null);
«««									iiiStore.addItems(null);
«««									iiiStore.addProductcatalogs(null);
«««									iiiStore.addSales(null);
								
								

								
«««								«entity.name»Instances.add(iii«entity.name»);
   				            	«entity.name»_filtereddata = «entity.name»_filtereddata +"\r\n" + «entity.name»ToString(iii«entity.name»);
   				            	«entity.name»_«entity.attributes.get(0).name»Set.add(«entity.name»_«entity.attributes.get(0).name»Str.toLowerCase());							
				   		
				   		«ENDIF»
				   		}
«««				   	AllmapperObject.put("«entity.name»",«entity.name»Instances);
				   	«ENDIF»
				   	 } catch (JSONException e) {
	      	        // 处理异常
	      	        e.printStackTrace();
«««	      	        System.out.println("经判断，这个数据出现JSONException异常，将跳过...");
	      	        System.out.println("JSONException，skip...");
	      	        continue;
	      	    }
	   	    }   	
	   	    int counts_«entity.name» = countChar(«entity.name»_filtereddata);
«««            System.out.println("过滤后，«entity.name»：检测有 "+ counts_«entity.name»+" 个yaml");				   			   		       
			System.out.println("de-duplication，«entity.name»：check "+ counts_«entity.name»+"  yaml");	
            int «entity.name»Value = numberentities.get("«entity.name»");
            int «entity.name»RemainNumber = «entity.name»Value - counts_«entity.name»;
«««            String finish_«entity.name»RemainChatReturn = "";

            if(«entity.name»RemainNumber > 0) 
            {
«««            	System.out.println("总共要生成："+ «entity.name»Value+"个，目前还差："+ «entity.name»RemainNumber+" 个yaml \r\n");	
            	System.out.println("Totyal generate："+ «entity.name»Value+"，now："+ «entity.name»RemainNumber+"  yaml \r\n");	
	        	if(«entity.name»RemainNumber > 0 && «entity.name»RemainNumber <10) 
	            {
	            	«entity.name»RemainNumber = 10;
	            }else if(«entity.name»RemainNumber >= 10 && «entity.name»RemainNumber <=30)
	            {
	            	«entity.name»RemainNumber = 30;
	            }else{}
	            
            	String «entity.name»RemainChatReturn = gui.OpenAiSpeaker.Large_Chat_ReturnMessage("«entity.name»",«entity.name»RemainNumber);

            	
            	int int_«entity.name»_RemainNumber = «entity.name»RemainChatReturn.indexOf("-");
            	if(int_«entity.name»_RemainNumber >=0) {
«««            		System.out.println("int_«entity.name»_RemainNumber: "+ int_«entity.name»_RemainNumber);
            		String new_sub_«entity.name»_RemainNumber = «entity.name»RemainChatReturn.substring(int_«entity.name»_RemainNumber);
            		«entity.name»_filtereddata = «entity.name»_filtereddata +"\r\n"+ new_sub_«entity.name»_RemainNumber;
            	}else {
            		«entity.name»_filtereddata = «entity.name»_filtereddata +"\r\n"+ «entity.name»RemainChatReturn;
            	}

«««//             目前还没有定这个方法到底返回哪个参数，大概率是全部的所有去重的数据
               «entity.name»_filtereddata = EntityManager.YamlFilter(«entity.name»_filtereddata, numberentities, 2 ,"«entity.name»");
            }else{
            	System.out.println("yes，«entity.name»RemainNumber < 0："+«entity.name»RemainNumber);
            }
            
		}
	«ENDFOR»
	
		'''
	}
	
	
	def String setEntityToYamlStringFilter(Iterable<Entity> sEntity,Iterable<Entity> ssEntity,Iterable<Entity> sssEntity,Iterable<Contract> sContract) 
	{
		'''
				String filtereddata = ""  
				«FOR entity : sEntity»
					+ «entity.name»_filtereddata
				«ENDFOR»;
		
				int counts_filtereddata = countChar(filtereddata);
«««				System.out.println("过滤后，全部实体有：检测有 "+ counts_filtereddata+" 个yaml");
				System.out.println("De-duplication，total check： "+ counts_filtereddata+"  yaml");
				if(return_Code == 1) 
				{
					return filtereddata;
				}
				if(return_Code == 2) 
				{
					switch (returnString) {
					    «FOR entity : ssEntity»
					    case "«entity.name»":
					    	return «entity.name»_filtereddata;
					    «ENDFOR»
					    default:
					        break;
					}
				}
				return "";
				}
		
		«FOR entity : sssEntity»
			public static String «entity.name»ToString(«entity.name» «entity.name»Str) 
			{
	        	String template = "- \r\n"
	        		«FOR attribute : entity.attributes»
	                	«IF attribute.type.compileType == "int"»
							+"  «attribute.name»: %s\n" 
						«ELSEIF attribute.type.compileType == "boolean"»
							+"  «attribute.name»: %s\n" 	
						«ELSEIF attribute.type.compileType == "float"»
							+"  «attribute.name»: %.2f\n" 
						«ELSEIF attribute.type.compileType == "LocalDate"»
							+"  «attribute.name»: %s\n" 
						«ELSEIF attribute.type.compileType == "String"»
							+"  «attribute.name»: %s\n" 
						«ELSE»
«««							iii«entity.name».set«attribute.name»(«attribute.type.compileType».«attribute.type.getOneElement.name»);
							+"  «attribute.name»: %s\n" 
						«ENDIF»
	            	«ENDFOR»+"";
						        	
	        	return String.format(
	        	template, 
	    		«FOR attribute : entity.attributes»
	            	«entity.name»Str.get«attribute.name»(), 
	        	«ENDFOR»
	        	"");
		 }
		«ENDFOR»
			
	    public static int countChar(String str) {
	        int count = 0;
	        char c = '-';
	        for (int i = 0; i < str.length(); i++) {
	            if (str.charAt(i) == c) {
	            	if (str.charAt(i + 1) == ' ') {
	                    count++;
	                }
	            }
	        }
	        return count;
	    }
		'''
	}
		





}











